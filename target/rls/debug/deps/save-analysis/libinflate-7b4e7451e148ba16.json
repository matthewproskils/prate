{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0","program":"C:\\Users\\matth\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","inflate","C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=7b4e7451e148ba16","-C","extra-filename=-7b4e7451e148ba16","--out-dir","c:\\Users\\matth\\Documents\\_Coding\\Rust\\prate\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\matth\\Documents\\_Coding\\Rust\\prate\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\matth\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\matth\\Documents\\_Coding\\Rust\\prate\\target\\rls\\debug\\deps\\libinflate-7b4e7451e148ba16.rmeta"},"prelude":{"crate_id":{"name":"inflate","disambiguator":[8874717929338849727,0]},"crate_root":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src","external_crates":[{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[10096348926132587111,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[6130085985959571423,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10834538756664496827,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16052532455530240381,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9943859611570948275,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2085945775536176072,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9544986399897469044,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17772512906340842432,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2307131819628043677,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8458190703300588207,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5770881746596919874,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[9756748775720564409,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[13144887679811945557,0]}}],"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":432,"byte_end":45623,"line_start":10,"line_end":1066,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2843,"byte_end":2856,"line_start":73,"line_end":73,"column_start":24,"column_end":37},"alias_span":null,"name":"InflateWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2893,"byte_end":2906,"line_start":76,"line_end":76,"column_start":23,"column_end":36},"alias_span":null,"name":"inflate_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2908,"byte_end":2926,"line_start":76,"line_end":76,"column_start":38,"column_end":56},"alias_span":null,"name":"inflate_bytes_zlib","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":432,"byte_end":45623,"line_start":10,"line_end":1066,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":198},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":82},{"krate":0,"index":89},{"krate":0,"index":96},{"krate":0,"index":100},{"krate":0,"index":105},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":164}],"decl_id":null,"docs":" A [DEFLATE](http://www.gzip.org/zlib/rfc-deflate.html) decoder written in rust.","sig":null,"attributes":[{"value":"/ A [DEFLATE](http://www.gzip.org/zlib/rfc-deflate.html) decoder written in rust.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":432,"byte_end":515,"line_start":10,"line_end":10,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":516,"byte_end":519,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This library provides functionality to decompress data compressed with the DEFLATE algorithm,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":520,"byte_end":617,"line_start":12,"line_end":12,"column_start":1,"column_end":98}},{"value":"/ both with and without a [zlib](https://tools.ietf.org/html/rfc1950) header/trailer.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":618,"byte_end":705,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":706,"byte_end":709,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":710,"byte_end":724,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/ The easiest way to get `std::Vec<u8>` containing the decompressed bytes is to use either","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":725,"byte_end":817,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ `inflate::inflate_bytes` or `inflate::inflate_bytes_zlib` (depending on whether","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":818,"byte_end":901,"line_start":17,"line_end":17,"column_start":1,"column_end":84}},{"value":"/ the encoded data has zlib headers and trailers or not). The following example","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":902,"byte_end":983,"line_start":18,"line_end":18,"column_start":1,"column_end":82}},{"value":"/ decodes the DEFLATE encoded string \"Hello, world\" and prints it:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":984,"byte_end":1052,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1053,"byte_end":1056,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1057,"byte_end":1068,"line_start":21,"line_end":21,"column_start":1,"column_end":12}},{"value":"/ use inflate::inflate_bytes;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1069,"byte_end":1100,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/ use std::str::from_utf8;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1101,"byte_end":1129,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1130,"byte_end":1133,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let encoded = [243, 72, 205, 201, 201, 215, 81, 40, 207, 47, 202, 73, 1, 0];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1134,"byte_end":1214,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ let decoded = inflate_bytes(&encoded).unwrap();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1215,"byte_end":1266,"line_start":26,"line_end":26,"column_start":1,"column_end":52}},{"value":"/ println!(\"{}\", from_utf8(&decoded).unwrap()); // prints \"Hello, world\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1267,"byte_end":1341,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1342,"byte_end":1349,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1350,"byte_end":1353,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ If you need more flexibility, then the library also provides an implementation","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1354,"byte_end":1436,"line_start":30,"line_end":30,"column_start":1,"column_end":83}},{"value":"/ of `std::io::Writer` in `inflate::writer`. Below is an example using an","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1437,"byte_end":1512,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ `inflate::writer::InflateWriter` to decode the DEFLATE encoded string \"Hello, world\":","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1513,"byte_end":1602,"line_start":32,"line_end":32,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1603,"byte_end":1606,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1607,"byte_end":1618,"line_start":34,"line_end":34,"column_start":1,"column_end":12}},{"value":"/ use inflate::InflateWriter;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1619,"byte_end":1650,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/ use std::io::Write;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1651,"byte_end":1674,"line_start":36,"line_end":36,"column_start":1,"column_end":24}},{"value":"/ use std::str::from_utf8;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1675,"byte_end":1703,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1704,"byte_end":1707,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let encoded = [243, 72, 205, 201, 201, 215, 81, 40, 207, 47, 202, 73, 1, 0];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1708,"byte_end":1788,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ let mut decoder = InflateWriter::new(Vec::new());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1789,"byte_end":1842,"line_start":40,"line_end":40,"column_start":1,"column_end":54}},{"value":"/ decoder.write(&encoded).unwrap();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1843,"byte_end":1880,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/ let decoded = decoder.finish().unwrap();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1881,"byte_end":1925,"line_start":42,"line_end":42,"column_start":1,"column_end":45}},{"value":"/ println!(\"{}\", from_utf8(&decoded).unwrap()); // prints \"Hello, world\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":1926,"byte_end":2000,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2001,"byte_end":2008,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2009,"byte_end":2012,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Finally, if you need even more flexibility, or if you only want to depend on","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2013,"byte_end":2093,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/ `core`, you can use the `inflate::InflateStream` API. The below example","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2094,"byte_end":2169,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ decodes an array of DEFLATE encoded bytes:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2170,"byte_end":2216,"line_start":48,"line_end":48,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2217,"byte_end":2220,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2221,"byte_end":2232,"line_start":50,"line_end":50,"column_start":1,"column_end":12}},{"value":"/ use inflate::InflateStream;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2233,"byte_end":2264,"line_start":51,"line_end":51,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2265,"byte_end":2268,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ let data = [0x73, 0x49, 0x4d, 0xcb, 0x49, 0x2c, 0x49, 0x55, 0x00, 0x11, 0x00];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2269,"byte_end":2351,"line_start":53,"line_end":53,"column_start":1,"column_end":83}},{"value":"/ let mut inflater = InflateStream::new();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2352,"byte_end":2396,"line_start":54,"line_end":54,"column_start":1,"column_end":45}},{"value":"/ let mut out = Vec::<u8>::new();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2397,"byte_end":2432,"line_start":55,"line_end":55,"column_start":1,"column_end":36}},{"value":"/ let mut n = 0;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2433,"byte_end":2451,"line_start":56,"line_end":56,"column_start":1,"column_end":19}},{"value":"/ while n < data.len() {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2452,"byte_end":2478,"line_start":57,"line_end":57,"column_start":1,"column_end":27}},{"value":"/     let res = inflater.update(&data[n..]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2479,"byte_end":2525,"line_start":58,"line_end":58,"column_start":1,"column_end":47}},{"value":"/     if let Ok((num_bytes_read, result)) = res {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2526,"byte_end":2577,"line_start":59,"line_end":59,"column_start":1,"column_end":52}},{"value":"/         n += num_bytes_read;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2578,"byte_end":2610,"line_start":60,"line_end":60,"column_start":1,"column_end":33}},{"value":"/         out.extend(result.iter().cloned());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2611,"byte_end":2658,"line_start":61,"line_end":61,"column_start":1,"column_end":48}},{"value":"/     } else {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2659,"byte_end":2675,"line_start":62,"line_end":62,"column_start":1,"column_end":17}},{"value":"/         res.unwrap();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2676,"byte_end":2701,"line_start":63,"line_end":63,"column_start":1,"column_end":26}},{"value":"/     }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2702,"byte_end":2711,"line_start":64,"line_end":64,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2712,"byte_end":2717,"line_start":65,"line_end":65,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":2718,"byte_end":2725,"line_start":66,"line_end":66,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46260,"byte_end":46273,"line_start":22,"line_end":22,"column_start":12,"column_end":25},"name":"InflateWriter","qualname":"::writer::InflateWriter","value":"InflateWriter {  }","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29}],"decl_id":null,"docs":" A DEFLATE decoder.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":45698,"byte_end":45720,"line_start":5,"line_end":5,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":45721,"byte_end":45724,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ A struct implementing the `std::io::Write` trait that decompresses DEFLATE","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":45725,"byte_end":45803,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ encoded data into the given writer `w`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":45804,"byte_end":45847,"line_start":8,"line_end":8,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":45848,"byte_end":45851,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":45852,"byte_end":45865,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":45866,"byte_end":45869,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":45870,"byte_end":45877,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use inflate::InflateWriter;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":45878,"byte_end":45909,"line_start":13,"line_end":13,"column_start":1,"column_end":32}},{"value":"/ use std::io::Write;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":45910,"byte_end":45933,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":45934,"byte_end":45937,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ let encoded = [243, 72, 205, 201, 201, 215, 81, 40, 207, 47, 202, 73, 1, 0];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":45938,"byte_end":46018,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ let mut decoder = InflateWriter::new(Vec::new());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46019,"byte_end":46072,"line_start":17,"line_end":17,"column_start":1,"column_end":54}},{"value":"/ decoder.write(&encoded).unwrap();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46073,"byte_end":46110,"line_start":18,"line_end":18,"column_start":1,"column_end":38}},{"value":"/ let decoded = decoder.finish().unwrap();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46111,"byte_end":46155,"line_start":19,"line_end":19,"column_start":1,"column_end":45}},{"value":"/ println!(\"{}\", std::str::from_utf8(&decoded).unwrap()); // prints \"Hello, world\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46156,"byte_end":46240,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46241,"byte_end":46248,"line_start":21,"line_end":21,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46377,"byte_end":46380,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateWriter<W>>::new","value":"pub fn new(W) -> InflateWriter<W>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46495,"byte_end":46504,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<InflateWriter<W>>::from_zlib","value":"pub fn from_zlib(W) -> InflateWriter<W>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46625,"byte_end":46631,"line_start":36,"line_end":36,"column_start":12,"column_end":18},"name":"finish","qualname":"<InflateWriter<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\utils.rs","byte_start":49171,"byte_end":49184,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"inflate_bytes","qualname":"::utils::inflate_bytes","value":"pub fn inflate_bytes(&[u8]) -> Result<Vec<u8>, String>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the given slice of DEFLATE compressed data.","sig":null,"attributes":[{"value":"/ Decompress the given slice of DEFLATE compressed data.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\utils.rs","byte_start":49033,"byte_end":49091,"line_start":28,"line_end":28,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\utils.rs","byte_start":49092,"byte_end":49095,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Returns a `Vec` with the decompressed data or an error message.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\utils.rs","byte_start":49096,"byte_end":49163,"line_start":30,"line_end":30,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\utils.rs","byte_start":49446,"byte_end":49464,"line_start":38,"line_end":38,"column_start":8,"column_end":26},"name":"inflate_bytes_zlib","qualname":"::utils::inflate_bytes_zlib","value":"pub fn inflate_bytes_zlib(&[u8]) -> Result<Vec<u8>, String>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data.","sig":null,"attributes":[{"value":"/ Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\utils.rs","byte_start":49275,"byte_end":49366,"line_start":35,"line_end":35,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\utils.rs","byte_start":49367,"byte_end":49370,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Returns a `Vec` with the decompressed data or an error message.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\utils.rs","byte_start":49371,"byte_end":49438,"line_start":37,"line_end":37,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":19384,"byte_end":19397,"line_start":541,"line_end":541,"column_start":12,"column_end":25},"name":"InflateStream","qualname":"::InflateStream","value":"InflateStream {  }","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":19610,"byte_end":19613,"line_start":551,"line_end":551,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateStream>::new","value":"pub fn new() -> InflateStream","parent":null,"children":[],"decl_id":null,"docs":" Create a new stream for decoding raw deflate encoded data.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":19512,"byte_end":19531,"line_start":549,"line_end":549,"column_start":5,"column_end":24}},{"value":"/ Create a new stream for decoding raw deflate encoded data.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":19536,"byte_end":19598,"line_start":550,"line_end":550,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":19921,"byte_end":19930,"line_start":558,"line_end":558,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<InflateStream>::from_zlib","value":"pub fn from_zlib() -> InflateStream","parent":null,"children":[],"decl_id":null,"docs":" Create a new stream for decoding deflate encoded data with a zlib header and footer\n","sig":null,"attributes":[{"value":"/ Create a new stream for decoding deflate encoded data with a zlib header and footer","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":19822,"byte_end":19909,"line_start":557,"line_end":557,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":44922,"byte_end":44928,"line_start":1048,"line_end":1048,"column_start":12,"column_end":18},"name":"update","qualname":"<InflateStream>::update","value":"pub fn update<'a>(&'a mut Self, &[u8]) -> Result<(usize, &'a [u8]), String>","parent":null,"children":[],"decl_id":null,"docs":" Try to uncompress/decode the data in `data`.","sig":null,"attributes":[{"value":"/ Try to uncompress/decode the data in `data`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":44270,"byte_end":44318,"line_start":1037,"line_end":1037,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":44323,"byte_end":44326,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ On success, returns how many bytes of the input data was decompressed, and a reference to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":44331,"byte_end":44424,"line_start":1039,"line_end":1039,"column_start":5,"column_end":98}},{"value":"/ the buffer containing the decompressed data.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":44429,"byte_end":44477,"line_start":1040,"line_end":1040,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":44482,"byte_end":44485,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ This function may not uncompress all the provided data in one call, so it has to be called","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":44490,"byte_end":44584,"line_start":1042,"line_end":1042,"column_start":5,"column_end":99}},{"value":"/ repeatedly with the data that hasn't been decompressed yet as an input until the number of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":44589,"byte_end":44683,"line_start":1043,"line_end":1043,"column_start":5,"column_end":99}},{"value":"/ bytes decoded returned is 0. (See the [top level crate documentation](index.html) for an example.)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":44688,"byte_end":44790,"line_start":1044,"line_end":1044,"column_start":5,"column_end":107}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":44795,"byte_end":44798,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":44803,"byte_end":44815,"line_start":1046,"line_end":1046,"column_start":5,"column_end":17}},{"value":"/ If invalid input data is encountered, a string describing what went wrong is returned.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":44820,"byte_end":44910,"line_start":1047,"line_end":1047,"column_start":5,"column_end":95}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46347,"byte_end":46360,"line_start":27,"line_end":27,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46974,"byte_end":46987,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":7112,"byte_end":7121,"line_start":191,"line_end":191,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":10832,"byte_end":10848,"line_start":312,"line_end":312,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":13957,"byte_end":13969,"line_start":402,"line_end":402,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":19492,"byte_end":19505,"line_start":548,"line_end":548,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46347,"byte_end":46360,"line_start":27,"line_end":27,"column_start":16,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":26},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\writer.rs","byte_start":46974,"byte_end":46987,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":26},"to":{"krate":1,"index":4402}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":7112,"byte_end":7121,"line_start":191,"line_end":191,"column_start":10,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":10832,"byte_end":10848,"line_start":312,"line_end":312,"column_start":6,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":74},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":13957,"byte_end":13969,"line_start":402,"line_end":402,"column_start":6,"column_end":18},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":96},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.2.0\\src\\lib.rs","byte_start":19492,"byte_end":19505,"line_start":548,"line_end":548,"column_start":6,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":159},"to":{"krate":4294967295,"index":4294967295}}]}