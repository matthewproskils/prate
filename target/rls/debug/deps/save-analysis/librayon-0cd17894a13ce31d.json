{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1","program":"C:\\Users\\matth\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","rayon","C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=0cd17894a13ce31d","-C","extra-filename=-0cd17894a13ce31d","--out-dir","c:\\Users\\matth\\Documents\\_Coding\\Rust\\prate\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\matth\\Documents\\_Coding\\Rust\\prate\\target\\rls\\debug\\deps","--extern","crossbeam_deque=c:\\Users\\matth\\Documents\\_Coding\\Rust\\prate\\target\\rls\\debug\\deps\\libcrossbeam_deque-3835815ecf2a0256.rmeta","--extern","either=c:\\Users\\matth\\Documents\\_Coding\\Rust\\prate\\target\\rls\\debug\\deps\\libeither-9d6ffb730e49cc17.rmeta","--extern","rayon_core=c:\\Users\\matth\\Documents\\_Coding\\Rust\\prate\\target\\rls\\debug\\deps\\librayon_core-997ddd7e332f4e43.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\matth\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\matth\\Documents\\_Coding\\Rust\\prate\\target\\rls\\debug\\deps\\librayon-0cd17894a13ce31d.rmeta"},"prelude":{"crate_id":{"name":"rayon","disambiguator":[6659851948567644445,0]},"crate_root":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src","external_crates":[{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[10096348926132587111,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[6130085985959571423,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10834538756664496827,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16052532455530240381,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9943859611570948275,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2085945775536176072,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9544986399897469044,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17772512906340842432,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2307131819628043677,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8458190703300588207,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5770881746596919874,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[9756748775720564409,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[13144887679811945557,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":14,"id":{"name":"crossbeam_deque","disambiguator":[3540481740765411986,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":15,"id":{"name":"crossbeam_epoch","disambiguator":[2095386980285716758,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":16,"id":{"name":"cfg_if","disambiguator":[4503890005825602928,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":17,"id":{"name":"crossbeam_utils","disambiguator":[6747111443886126206,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":18,"id":{"name":"lazy_static","disambiguator":[3944360065909552950,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":19,"id":{"name":"memoffset","disambiguator":[3208325140715590750,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":20,"id":{"name":"scopeguard","disambiguator":[16498534004486282225,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":21,"id":{"name":"either","disambiguator":[4440565188030458172,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":22,"id":{"name":"rayon_core","disambiguator":[5100390554992917776,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":23,"id":{"name":"crossbeam_queue","disambiguator":[11416001097346275268,0]}},{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","num":24,"id":{"name":"num_cpus","disambiguator":[15830459624441690525,0]}}],"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":0,"byte_end":4884,"line_start":1,"line_end":134,"column_start":1,"column_end":41}},"imports":[{"kind":"Use","ref_id":{"krate":21,"index":177},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":26617,"byte_end":26623,"line_start":84,"line_end":84,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":5874},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27344,"byte_end":27354,"line_start":101,"line_end":101,"column_start":28,"column_end":38},"alias_span":null,"name":"IterBridge","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27356,"byte_end":27370,"line_start":101,"line_end":101,"column_start":40,"column_end":54},"alias_span":null,"name":"ParallelBridge","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":5883},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27437,"byte_end":27442,"line_start":106,"line_end":106,"column_start":22,"column_end":27},"alias_span":null,"name":"Chain","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":5904},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27478,"byte_end":27484,"line_start":108,"line_end":108,"column_start":23,"column_end":29},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":5914},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27539,"byte_end":27548,"line_start":111,"line_end":111,"column_start":26,"column_end":35},"alias_span":null,"name":"Enumerate","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":5923},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27584,"byte_end":27590,"line_start":113,"line_end":113,"column_start":23,"column_end":29},"alias_span":null,"name":"Filter","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":5932},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27634,"byte_end":27643,"line_start":115,"line_end":115,"column_start":27,"column_end":36},"alias_span":null,"name":"FilterMap","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":5941},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27683,"byte_end":27690,"line_start":117,"line_end":117,"column_start":25,"column_end":32},"alias_span":null,"name":"FlatMap","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":5950},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27728,"byte_end":27735,"line_start":119,"line_end":119,"column_start":24,"column_end":31},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":5959},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27819,"byte_end":27823,"line_start":124,"line_end":124,"column_start":22,"column_end":26},"alias_span":null,"name":"Fold","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":5971},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27825,"byte_end":27833,"line_start":124,"line_end":124,"column_start":28,"column_end":36},"alias_span":null,"name":"FoldWith","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":5994},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27875,"byte_end":27882,"line_start":126,"line_end":126,"column_start":26,"column_end":33},"alias_span":null,"name":"TryFold","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6009},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27884,"byte_end":27895,"line_start":126,"line_end":126,"column_start":35,"column_end":46},"alias_span":null,"name":"TryFoldWith","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6021},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27977,"byte_end":27981,"line_start":131,"line_end":131,"column_start":21,"column_end":25},"alias_span":null,"name":"Skip","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":1776},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28022,"byte_end":28027,"line_start":133,"line_end":133,"column_start":26,"column_end":31},"alias_span":null,"name":"split","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6031},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28029,"byte_end":28034,"line_start":133,"line_end":133,"column_start":33,"column_end":38},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6040},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28067,"byte_end":28071,"line_start":135,"line_end":135,"column_start":21,"column_end":25},"alias_span":null,"name":"Take","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6050},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28101,"byte_end":28104,"line_start":137,"line_end":137,"column_start":20,"column_end":23},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6071},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28145,"byte_end":28152,"line_start":139,"line_end":139,"column_start":26,"column_end":33},"alias_span":null,"name":"MapInit","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6059},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28154,"byte_end":28161,"line_start":139,"line_end":139,"column_start":35,"column_end":42},"alias_span":null,"name":"MapWith","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6083},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28192,"byte_end":28195,"line_start":141,"line_end":141,"column_start":20,"column_end":23},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6096},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28231,"byte_end":28236,"line_start":143,"line_end":143,"column_start":23,"column_end":28},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6108},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28280,"byte_end":28290,"line_start":145,"line_end":145,"column_start":27,"column_end":37},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6121},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28352,"byte_end":28370,"line_start":147,"line_end":147,"column_start":36,"column_end":54},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6133},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28416,"byte_end":28427,"line_start":149,"line_end":149,"column_start":28,"column_end":39},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6143},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28463,"byte_end":28469,"line_start":151,"line_end":151,"column_start":23,"column_end":29},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6165},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28510,"byte_end":28513,"line_start":155,"line_end":155,"column_start":20,"column_end":23},"alias_span":null,"name":"Rev","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6184},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28544,"byte_end":28550,"line_start":157,"line_end":157,"column_start":21,"column_end":27},"alias_span":null,"name":"MaxLen","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6174},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28552,"byte_end":28558,"line_start":157,"line_end":157,"column_start":29,"column_end":35},"alias_span":null,"name":"MinLen","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6194},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28596,"byte_end":28602,"line_start":160,"line_end":160,"column_start":23,"column_end":29},"alias_span":null,"name":"Cloned","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6203},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28638,"byte_end":28644,"line_start":162,"line_end":162,"column_start":23,"column_end":29},"alias_span":null,"name":"Copied","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6212},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28706,"byte_end":28713,"line_start":168,"line_end":168,"column_start":24,"column_end":31},"alias_span":null,"name":"Inspect","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6221},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28757,"byte_end":28766,"line_start":170,"line_end":170,"column_start":27,"column_end":36},"alias_span":null,"name":"PanicFuse","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6237},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28810,"byte_end":28819,"line_start":172,"line_end":172,"column_start":27,"column_end":36},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":3692},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28879,"byte_end":28885,"line_start":176,"line_end":176,"column_start":24,"column_end":30},"alias_span":null,"name":"repeat","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6246},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28887,"byte_end":28893,"line_start":176,"line_end":176,"column_start":32,"column_end":38},"alias_span":null,"name":"Repeat","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":3713},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28919,"byte_end":28926,"line_start":177,"line_end":177,"column_start":24,"column_end":31},"alias_span":null,"name":"repeatn","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6255},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28928,"byte_end":28935,"line_start":177,"line_end":177,"column_start":33,"column_end":40},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":3975},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28972,"byte_end":28977,"line_start":180,"line_end":180,"column_start":23,"column_end":28},"alias_span":null,"name":"empty","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":3977},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":28979,"byte_end":28984,"line_start":180,"line_end":180,"column_start":30,"column_end":35},"alias_span":null,"name":"Empty","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":4021},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29018,"byte_end":29022,"line_start":182,"line_end":182,"column_start":22,"column_end":26},"alias_span":null,"name":"once","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":6265},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29024,"byte_end":29028,"line_start":182,"line_end":182,"column_start":28,"column_end":32},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":182}},{"kind":"Use","ref_id":{"krate":0,"index":4335},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":371739,"byte_end":371759,"line_start":5,"line_end":5,"column_start":15,"column_end":35},"alias_span":null,"name":"FromParallelIterator","value":"","parent":{"krate":0,"index":4430}},{"kind":"Use","ref_id":{"krate":0,"index":4273},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":371775,"byte_end":371798,"line_start":6,"line_end":6,"column_start":15,"column_end":38},"alias_span":null,"name":"IndexedParallelIterator","value":"","parent":{"krate":0,"index":4430}},{"kind":"Use","ref_id":{"krate":0,"index":4043},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":371814,"byte_end":371834,"line_start":7,"line_end":7,"column_start":15,"column_end":35},"alias_span":null,"name":"IntoParallelIterator","value":"","parent":{"krate":0,"index":4430}},{"kind":"Use","ref_id":{"krate":0,"index":4047},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":371850,"byte_end":371873,"line_start":8,"line_end":8,"column_start":15,"column_end":38},"alias_span":null,"name":"IntoParallelRefIterator","value":"","parent":{"krate":0,"index":4430}},{"kind":"Use","ref_id":{"krate":0,"index":4058},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":371889,"byte_end":371915,"line_start":9,"line_end":9,"column_start":15,"column_end":41},"alias_span":null,"name":"IntoParallelRefMutIterator","value":"","parent":{"krate":0,"index":4430}},{"kind":"Use","ref_id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":371931,"byte_end":371945,"line_start":10,"line_end":10,"column_start":15,"column_end":29},"alias_span":null,"name":"ParallelBridge","value":"","parent":{"krate":0,"index":4430}},{"kind":"Use","ref_id":{"krate":0,"index":4339},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":371961,"byte_end":371975,"line_start":11,"line_end":11,"column_start":15,"column_end":29},"alias_span":null,"name":"ParallelExtend","value":"","parent":{"krate":0,"index":4430}},{"kind":"Use","ref_id":{"krate":0,"index":4069},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":371991,"byte_end":372007,"line_start":12,"line_end":12,"column_start":15,"column_end":31},"alias_span":null,"name":"ParallelIterator","value":"","parent":{"krate":0,"index":4430}},{"kind":"Use","ref_id":{"krate":0,"index":4762},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":372024,"byte_end":372037,"line_start":13,"line_end":13,"column_start":16,"column_end":29},"alias_span":null,"name":"ParallelSlice","value":"","parent":{"krate":0,"index":4430}},{"kind":"Use","ref_id":{"krate":0,"index":4772},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":372054,"byte_end":372070,"line_start":14,"line_end":14,"column_start":16,"column_end":32},"alias_span":null,"name":"ParallelSliceMut","value":"","parent":{"krate":0,"index":4430}},{"kind":"Use","ref_id":{"krate":0,"index":5036},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":372085,"byte_end":372099,"line_start":15,"line_end":15,"column_start":14,"column_end":28},"alias_span":null,"name":"ParallelString","value":"","parent":{"krate":0,"index":4430}},{"kind":"Use","ref_id":{"krate":22,"index":1101},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4497,"byte_end":4506,"line_start":125,"line_end":125,"column_start":21,"column_end":30},"alias_span":null,"name":"FnContext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":374},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4528,"byte_end":4541,"line_start":126,"line_end":126,"column_start":21,"column_end":34},"alias_span":null,"name":"ThreadBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":737},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4563,"byte_end":4573,"line_start":127,"line_end":127,"column_start":21,"column_end":31},"alias_span":null,"name":"ThreadPool","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":1089},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4595,"byte_end":4615,"line_start":128,"line_end":128,"column_start":21,"column_end":41},"alias_span":null,"name":"ThreadPoolBuildError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":866},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4637,"byte_end":4654,"line_start":129,"line_end":129,"column_start":21,"column_end":38},"alias_span":null,"name":"ThreadPoolBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":865},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4677,"byte_end":4696,"line_start":130,"line_end":130,"column_start":22,"column_end":41},"alias_span":null,"name":"current_num_threads","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":776},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4698,"byte_end":4718,"line_start":130,"line_end":130,"column_start":43,"column_end":63},"alias_span":null,"name":"current_thread_index","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":149},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4742,"byte_end":4746,"line_start":131,"line_end":131,"column_start":22,"column_end":26},"alias_span":null,"name":"join","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":159},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4748,"byte_end":4760,"line_start":131,"line_end":131,"column_start":28,"column_end":40},"alias_span":null,"name":"join_context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":569},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4784,"byte_end":4789,"line_start":132,"line_end":132,"column_start":22,"column_end":27},"alias_span":null,"name":"scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":555},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4791,"byte_end":4796,"line_start":132,"line_end":132,"column_start":29,"column_end":34},"alias_span":null,"name":"Scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":576},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4820,"byte_end":4830,"line_start":133,"line_end":133,"column_start":22,"column_end":32},"alias_span":null,"name":"scope_fifo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":558},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4832,"byte_end":4841,"line_start":133,"line_end":133,"column_start":34,"column_end":43},"alias_span":null,"name":"ScopeFifo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":676},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4865,"byte_end":4870,"line_start":134,"line_end":134,"column_start":22,"column_end":27},"alias_span":null,"name":"spawn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":683},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4872,"byte_end":4882,"line_start":134,"line_end":134,"column_start":29,"column_end":39},"alias_span":null,"name":"spawn_fifo","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":0,"byte_end":4884,"line_start":1,"line_end":134,"column_start":1,"column_end":41},"name":"","qualname":"::","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":14},{"krate":0,"index":53},{"krate":0,"index":182},{"krate":0,"index":4365},{"krate":0,"index":4430},{"krate":0,"index":4464},{"krate":0,"index":4491},{"krate":0,"index":4508},{"krate":0,"index":4552},{"krate":0,"index":5029},{"krate":0,"index":5265},{"krate":0,"index":5326},{"krate":0,"index":5328},{"krate":0,"index":5359},{"krate":0,"index":5370},{"krate":0,"index":5373},{"krate":0,"index":5376},{"krate":0,"index":5379},{"krate":0,"index":5382},{"krate":0,"index":5385},{"krate":0,"index":5386},{"krate":0,"index":5389},{"krate":0,"index":5392},{"krate":0,"index":5393},{"krate":0,"index":5396},{"krate":0,"index":5399},{"krate":0,"index":5400},{"krate":0,"index":5403},{"krate":0,"index":5406},{"krate":0,"index":5407},{"krate":0,"index":5410},{"krate":0,"index":5413},{"krate":0,"index":5414},{"krate":0,"index":5417}],"decl_id":null,"docs":" Data-parallelism library that makes it easy to convert sequential\n computations into parallel","sig":null,"attributes":[{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":53,"byte_end":92,"line_start":2,"line_end":2,"column_start":1,"column_end":40}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":93,"byte_end":115,"line_start":3,"line_end":3,"column_start":1,"column_end":23}},{"value":"deny(unreachable_pub)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":116,"byte_end":141,"line_start":4,"line_end":4,"column_start":1,"column_end":26}},{"value":"/ Data-parallelism library that makes it easy to convert sequential","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":143,"byte_end":212,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/ computations into parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":213,"byte_end":243,"line_start":7,"line_end":7,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":244,"byte_end":247,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Rayon is lightweight and convenient for introducing parallelism into existing","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":248,"byte_end":329,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/ code. It guarantees data-race free executions and takes advantage of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":330,"byte_end":402,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ parallelism when sensible, based on work-load at runtime.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":403,"byte_end":464,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":465,"byte_end":468,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # How to use Rayon","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":469,"byte_end":491,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":492,"byte_end":495,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ There are two ways to use Rayon:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":496,"byte_end":532,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":533,"byte_end":536,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ - **High-level parallel constructs** are the simplest way to use Rayon and also","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":537,"byte_end":620,"line_start":17,"line_end":17,"column_start":1,"column_end":84}},{"value":"/   typically the most efficient.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":621,"byte_end":656,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"/   - [Parallel iterators][iter module] make it easy to convert a sequential iterator to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":657,"byte_end":747,"line_start":19,"line_end":19,"column_start":1,"column_end":91}},{"value":"/     execute in parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":748,"byte_end":776,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/     - The [`ParallelIterator`] trait defines general methods for all parallel iterators.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":777,"byte_end":869,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/     - The [`IndexedParallelIterator`] trait adds methods for iterators that support random","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":870,"byte_end":964,"line_start":22,"line_end":22,"column_start":1,"column_end":95}},{"value":"/       access.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":965,"byte_end":982,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/   - The [`par_sort`] method sorts `&mut [T]` slices (or vectors) in parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":983,"byte_end":1064,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"/   - [`par_extend`] can be used to efficiently grow collections with items produced","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1065,"byte_end":1151,"line_start":25,"line_end":25,"column_start":1,"column_end":87}},{"value":"/     by a parallel iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1152,"byte_end":1183,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/ - **Custom tasks** let you divide your work into parallel tasks yourself.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1184,"byte_end":1261,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/   - [`join`] is used to subdivide a task into two pieces.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1262,"byte_end":1323,"line_start":28,"line_end":28,"column_start":1,"column_end":62}},{"value":"/   - [`scope`] creates a scope within which you can create any number of parallel tasks.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1324,"byte_end":1415,"line_start":29,"line_end":29,"column_start":1,"column_end":92}},{"value":"/   - [`ThreadPoolBuilder`] can be used to create your own thread pools or customize","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1416,"byte_end":1502,"line_start":30,"line_end":30,"column_start":1,"column_end":87}},{"value":"/     the global one.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1503,"byte_end":1526,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1527,"byte_end":1530,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ [iter module]: iter/index.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1531,"byte_end":1565,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ [`join`]: fn.join.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1566,"byte_end":1592,"line_start":34,"line_end":34,"column_start":1,"column_end":27}},{"value":"/ [`scope`]: fn.scope.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1593,"byte_end":1621,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/ [`par_sort`]: slice/trait.ParallelSliceMut.html#method.par_sort","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1622,"byte_end":1689,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"/ [`par_extend`]: iter/trait.ParallelExtend.html#tymethod.par_extend","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1690,"byte_end":1760,"line_start":37,"line_end":37,"column_start":1,"column_end":71}},{"value":"/ [`ThreadPoolBuilder`]: struct.ThreadPoolBuilder.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1761,"byte_end":1817,"line_start":38,"line_end":38,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1818,"byte_end":1821,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Basic usage and the Rayon prelude","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1822,"byte_end":1861,"line_start":40,"line_end":40,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1862,"byte_end":1865,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ First, you will need to add `rayon` to your `Cargo.toml` and put","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1866,"byte_end":1934,"line_start":42,"line_end":42,"column_start":1,"column_end":69}},{"value":"/ `extern crate rayon` in your main file (`lib.rs`, `main.rs`).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":1935,"byte_end":2000,"line_start":43,"line_end":43,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2001,"byte_end":2004,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Next, to use parallel iterators or the other high-level methods,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2005,"byte_end":2073,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"/ you need to import several traits. Those traits are bundled into","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2074,"byte_end":2142,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/ the module [`rayon::prelude`]. It is recommended that you import","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2143,"byte_end":2211,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"/ all of these traits at once by adding `use rayon::prelude::*` at","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2212,"byte_end":2280,"line_start":48,"line_end":48,"column_start":1,"column_end":69}},{"value":"/ the top of each module that uses Rayon methods.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2281,"byte_end":2332,"line_start":49,"line_end":49,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2333,"byte_end":2336,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ These traits give you access to the `par_iter` method which provides","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2337,"byte_end":2409,"line_start":51,"line_end":51,"column_start":1,"column_end":73}},{"value":"/ parallel implementations of many iterative functions such as [`map`],","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2410,"byte_end":2483,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ [`for_each`], [`filter`], [`fold`], and [more].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2484,"byte_end":2535,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2536,"byte_end":2539,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ [`rayon::prelude`]: prelude/index.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2540,"byte_end":2582,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/ [`map`]: iter/trait.ParallelIterator.html#method.map","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2583,"byte_end":2639,"line_start":56,"line_end":56,"column_start":1,"column_end":57}},{"value":"/ [`for_each`]: iter/trait.ParallelIterator.html#method.for_each","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2640,"byte_end":2706,"line_start":57,"line_end":57,"column_start":1,"column_end":67}},{"value":"/ [`filter`]: iter/trait.ParallelIterator.html#method.filter","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2707,"byte_end":2769,"line_start":58,"line_end":58,"column_start":1,"column_end":63}},{"value":"/ [`fold`]: iter/trait.ParallelIterator.html#method.fold","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2770,"byte_end":2828,"line_start":59,"line_end":59,"column_start":1,"column_end":59}},{"value":"/ [more]: iter/trait.ParallelIterator.html#provided-methods","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2829,"byte_end":2890,"line_start":60,"line_end":60,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: iter/trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2891,"byte_end":2949,"line_start":61,"line_end":61,"column_start":1,"column_end":59}},{"value":"/ [`IndexedParallelIterator`]: iter/trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":2950,"byte_end":3022,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3023,"byte_end":3026,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Crate Layout","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3027,"byte_end":3045,"line_start":64,"line_end":64,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3046,"byte_end":3049,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Rayon extends many of the types found in the standard library with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3050,"byte_end":3120,"line_start":66,"line_end":66,"column_start":1,"column_end":71}},{"value":"/ parallel iterator implementations. The modules in the `rayon`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3121,"byte_end":3186,"line_start":67,"line_end":67,"column_start":1,"column_end":66}},{"value":"/ crate mirror [`std`] itself: so, e.g., the `option` module in","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3187,"byte_end":3252,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/ Rayon contains parallel iterators for the `Option` type, which is","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3253,"byte_end":3322,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"/ found in [the `option` module of `std`]. Similarly, the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3323,"byte_end":3382,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/ `collections` module in Rayon offers parallel iterator types for","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3383,"byte_end":3451,"line_start":71,"line_end":71,"column_start":1,"column_end":69}},{"value":"/ [the `collections` from `std`]. You will rarely need to access","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3452,"byte_end":3518,"line_start":72,"line_end":72,"column_start":1,"column_end":67}},{"value":"/ these submodules unless you need to name iterator types","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3519,"byte_end":3578,"line_start":73,"line_end":73,"column_start":1,"column_end":60}},{"value":"/ explicitly.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3579,"byte_end":3594,"line_start":74,"line_end":74,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3595,"byte_end":3598,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ [the `option` module of `std`]: https://doc.rust-lang.org/std/option/index.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3599,"byte_end":3682,"line_start":76,"line_end":76,"column_start":1,"column_end":84}},{"value":"/ [the `collections` from `std`]: https://doc.rust-lang.org/std/collections/index.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3683,"byte_end":3771,"line_start":77,"line_end":77,"column_start":1,"column_end":89}},{"value":"/ [`std`]: https://doc.rust-lang.org/std/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3772,"byte_end":3815,"line_start":78,"line_end":78,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3816,"byte_end":3819,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ # Other questions?","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3820,"byte_end":3842,"line_start":80,"line_end":80,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3843,"byte_end":3846,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ See [the Rayon FAQ][faq].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3847,"byte_end":3876,"line_start":82,"line_end":82,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3877,"byte_end":3880,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ [faq]: https://github.com/rayon-rs/rayon/blob/master/FAQ.md","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":3881,"byte_end":3944,"line_start":84,"line_end":84,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":10},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\private.rs","byte_start":7400,"byte_end":7413,"line_start":9,"line_end":9,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::private::PrivateMarker","value":"","parent":null,"children":[],"decl_id":null,"docs":" If this type is pub but not publicly reachable, third parties\n can't name it and can't implement traits using it.\n","sig":null,"attributes":[{"value":"/ If this type is pub but not publicly reachable, third parties","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\private.rs","byte_start":7228,"byte_end":7293,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ can't name it and can't implement traits using it.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\private.rs","byte_start":7294,"byte_end":7348,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\private.rs","byte_start":7349,"byte_end":7388,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collections","qualname":"::collections","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":73},{"krate":0,"index":87},{"krate":0,"index":100},{"krate":0,"index":121},{"krate":0,"index":141},{"krate":0,"index":154}],"decl_id":null,"docs":" Parallel iterator types for [standard collections][std::collections]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [standard collections][std::collections]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":11945,"byte_end":12017,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":12018,"byte_end":12021,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":12022,"byte_end":12100,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":12101,"byte_end":12139,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":12140,"byte_end":12143,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::collections]: https://doc.rust-lang.org/stable/std/collections/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":12144,"byte_end":12217,"line_start":6,"line_end":6,"column_start":1,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::collections::binary_heap","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":5420},{"krate":0,"index":5423},{"krate":0,"index":5426},{"krate":0,"index":64},{"krate":0,"index":5436},{"krate":0,"index":5429},{"krate":0,"index":5442},{"krate":0,"index":5446},{"krate":0,"index":69},{"krate":0,"index":5450},{"krate":0,"index":5467},{"krate":0,"index":5459}],"decl_id":null,"docs":" This module contains the parallel iterator types for heaps\n (`BinaryHeap<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for heaps","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","byte_start":12921,"byte_end":12983,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"/ (`BinaryHeap<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","byte_start":12984,"byte_end":13056,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","byte_start":13057,"byte_end":13116,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5420},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","byte_start":13276,"byte_end":13284,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::binary_heap::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5422}],"decl_id":null,"docs":" Parallel iterator over a binary heap\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a binary heap","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","byte_start":13200,"byte_end":13240,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5442},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","byte_start":13750,"byte_end":13754,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::binary_heap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5445}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a binary heap\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a binary heap","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","byte_start":13655,"byte_end":13721,"line_start":34,"line_end":34,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"btree_map","qualname":"::collections::btree_map","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":5474},{"krate":0,"index":5478},{"krate":0,"index":5482},{"krate":0,"index":5491},{"krate":0,"index":5498},{"krate":0,"index":5503},{"krate":0,"index":82},{"krate":0,"index":5508},{"krate":0,"index":5518},{"krate":0,"index":5526},{"krate":0,"index":5531},{"krate":0,"index":5536},{"krate":0,"index":5546}],"decl_id":null,"docs":" This module contains the parallel iterator types for B-Tree maps\n (`BTreeMap<K, V>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for B-Tree maps","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","byte_start":14195,"byte_end":14263,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/ (`BTreeMap<K, V>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","byte_start":14264,"byte_end":14337,"line_start":2,"line_end":2,"column_start":1,"column_end":74}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","byte_start":14338,"byte_end":14397,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5474},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","byte_start":14568,"byte_end":14576,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5477}],"decl_id":null,"docs":" Parallel iterator over a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a B-Tree map","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","byte_start":14479,"byte_end":14518,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":5498},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","byte_start":14911,"byte_end":14915,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5502}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a B-Tree map","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","byte_start":14817,"byte_end":14882,"line_start":28,"line_end":28,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":5526},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","byte_start":15462,"byte_end":15469,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::btree_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5530}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a B-Tree map","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","byte_start":15371,"byte_end":15433,"line_start":52,"line_end":52,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"btree_set","qualname":"::collections::btree_set","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_set.rs","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":5554},{"krate":0,"index":5557},{"krate":0,"index":5560},{"krate":0,"index":5568},{"krate":0,"index":5574},{"krate":0,"index":5578},{"krate":0,"index":96},{"krate":0,"index":5582},{"krate":0,"index":5591}],"decl_id":null,"docs":" This module contains the parallel iterator types for B-Tree sets\n (`BTreeSet<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for B-Tree sets","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_set.rs","byte_start":15780,"byte_end":15848,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/ (`BTreeSet<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_set.rs","byte_start":15849,"byte_end":15919,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_set.rs","byte_start":15920,"byte_end":15979,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5554},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_set.rs","byte_start":16150,"byte_end":16158,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree_set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5556}],"decl_id":null,"docs":" Parallel iterator over a B-Tree set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a B-Tree set","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_set.rs","byte_start":16061,"byte_end":16100,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":5574},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_set.rs","byte_start":16447,"byte_end":16451,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree_set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5577}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a B-Tree set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a B-Tree set","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_set.rs","byte_start":16353,"byte_end":16418,"line_start":28,"line_end":28,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash_map","qualname":"::collections::hash_map","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":5598},{"krate":0,"index":5602},{"krate":0,"index":5606},{"krate":0,"index":5616},{"krate":0,"index":5623},{"krate":0,"index":5628},{"krate":0,"index":116},{"krate":0,"index":5633},{"krate":0,"index":5644},{"krate":0,"index":5652},{"krate":0,"index":5657},{"krate":0,"index":5662},{"krate":0,"index":5673}],"decl_id":null,"docs":" This module contains the parallel iterator types for hash maps\n (`HashMap<K, V>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for hash maps","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","byte_start":16885,"byte_end":16951,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/ (`HashMap<K, V>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","byte_start":16952,"byte_end":17024,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","byte_start":17025,"byte_end":17084,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5598},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","byte_start":17288,"byte_end":17296,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::hash_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5601}],"decl_id":null,"docs":" Parallel iterator over a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a hash map","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","byte_start":17201,"byte_end":17238,"line_start":13,"line_end":13,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":5623},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","byte_start":17665,"byte_end":17669,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::hash_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5627}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a hash map","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","byte_start":17573,"byte_end":17636,"line_start":29,"line_end":29,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":5652},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","byte_start":18256,"byte_end":18263,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::hash_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5656}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a hash map","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","byte_start":18167,"byte_end":18227,"line_start":53,"line_end":53,"column_start":1,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash_set","qualname":"::collections::hash_set","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_set.rs","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":5681},{"krate":0,"index":5684},{"krate":0,"index":5687},{"krate":0,"index":5696},{"krate":0,"index":5702},{"krate":0,"index":5706},{"krate":0,"index":137},{"krate":0,"index":5710},{"krate":0,"index":5720}],"decl_id":null,"docs":" This module contains the parallel iterator types for hash sets\n (`HashSet<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for hash sets","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_set.rs","byte_start":18610,"byte_end":18676,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/ (`HashSet<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_set.rs","byte_start":18677,"byte_end":18746,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_set.rs","byte_start":18747,"byte_end":18806,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5681},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_set.rs","byte_start":19010,"byte_end":19018,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::hash_set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5683}],"decl_id":null,"docs":" Parallel iterator over a hash set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a hash set","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_set.rs","byte_start":18923,"byte_end":18960,"line_start":13,"line_end":13,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":5702},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_set.rs","byte_start":19341,"byte_end":19345,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::hash_set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5705}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a hash set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a hash set","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_set.rs","byte_start":19249,"byte_end":19312,"line_start":29,"line_end":29,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linked_list","qualname":"::collections::linked_list","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":5727},{"krate":0,"index":5730},{"krate":0,"index":5733},{"krate":0,"index":5736},{"krate":0,"index":5744},{"krate":0,"index":5750},{"krate":0,"index":5754},{"krate":0,"index":150},{"krate":0,"index":5758},{"krate":0,"index":5767},{"krate":0,"index":5774},{"krate":0,"index":5778},{"krate":0,"index":5782},{"krate":0,"index":5791}],"decl_id":null,"docs":" This module contains the parallel iterator types for linked lists\n (`LinkedList<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for linked lists","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","byte_start":19815,"byte_end":19884,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/ (`LinkedList<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","byte_start":19885,"byte_end":19957,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","byte_start":19958,"byte_end":20017,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5727},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","byte_start":20177,"byte_end":20185,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::linked_list::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5729}],"decl_id":null,"docs":" Parallel iterator over a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a linked list","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","byte_start":20101,"byte_end":20141,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5750},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","byte_start":20459,"byte_end":20463,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::linked_list::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5753}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a linked list","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","byte_start":20364,"byte_end":20430,"line_start":28,"line_end":28,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":5774},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","byte_start":20913,"byte_end":20920,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::linked_list::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5777}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a linked list","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","byte_start":20821,"byte_end":20884,"line_start":52,"line_end":52,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec_deque","qualname":"::collections::vec_deque","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":5798},{"krate":0,"index":5801},{"krate":0,"index":5804},{"krate":0,"index":5807},{"krate":0,"index":5822},{"krate":0,"index":5815},{"krate":0,"index":5828},{"krate":0,"index":5832},{"krate":0,"index":166},{"krate":0,"index":170},{"krate":0,"index":5844},{"krate":0,"index":5836},{"krate":0,"index":5851},{"krate":0,"index":5855},{"krate":0,"index":176},{"krate":0,"index":5867},{"krate":0,"index":5859}],"decl_id":null,"docs":" This module contains the parallel iterator types for double-ended queues\n (`VecDeque<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for double-ended queues","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","byte_start":21151,"byte_end":21227,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ (`VecDeque<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","byte_start":21228,"byte_end":21298,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","byte_start":21299,"byte_end":21358,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5798},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","byte_start":21534,"byte_end":21542,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::vec_deque::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5800}],"decl_id":null,"docs":" Parallel iterator over a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a double-ended queue","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","byte_start":21451,"byte_end":21498,"line_start":13,"line_end":13,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5828},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","byte_start":21829,"byte_end":21833,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::vec_deque::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5831}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a double-ended queue","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","byte_start":21727,"byte_end":21800,"line_start":29,"line_end":29,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5851},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","byte_start":22521,"byte_end":22528,"line_start":62,"line_end":62,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::vec_deque::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5854}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a double-ended queue","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","byte_start":22422,"byte_end":22492,"line_start":60,"line_end":60,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":289},{"krate":0,"index":292},{"krate":0,"index":393},{"krate":0,"index":457},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":596},{"krate":0,"index":599},{"krate":0,"index":707},{"krate":0,"index":756},{"krate":0,"index":759},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":902},{"krate":0,"index":905},{"krate":0,"index":979},{"krate":0,"index":982},{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1130},{"krate":0,"index":1170},{"krate":0,"index":1286},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1380},{"krate":0,"index":1383},{"krate":0,"index":1514},{"krate":0,"index":1515},{"krate":0,"index":1518},{"krate":0,"index":1521},{"krate":0,"index":1586},{"krate":0,"index":1621},{"krate":0,"index":1696},{"krate":0,"index":1763},{"krate":0,"index":1766},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1808},{"krate":0,"index":1811},{"krate":0,"index":1843},{"krate":0,"index":1846},{"krate":0,"index":1965},{"krate":0,"index":1968},{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2253},{"krate":0,"index":2256},{"krate":0,"index":2322},{"krate":0,"index":2325},{"krate":0,"index":2347},{"krate":0,"index":2350},{"krate":0,"index":2448},{"krate":0,"index":2451},{"krate":0,"index":2473},{"krate":0,"index":2476},{"krate":0,"index":2593},{"krate":0,"index":2596},{"krate":0,"index":2728},{"krate":0,"index":2731},{"krate":0,"index":2759},{"krate":0,"index":2803},{"krate":0,"index":2806},{"krate":0,"index":2892},{"krate":0,"index":2893},{"krate":0,"index":2896},{"krate":0,"index":2899},{"krate":0,"index":2985},{"krate":0,"index":2988},{"krate":0,"index":3074},{"krate":0,"index":3077},{"krate":0,"index":3134},{"krate":0,"index":3191},{"krate":0,"index":3303},{"krate":0,"index":3306},{"krate":0,"index":3436},{"krate":0,"index":3439},{"krate":0,"index":3498},{"krate":0,"index":3501},{"krate":0,"index":3683},{"krate":0,"index":3753},{"krate":0,"index":3949},{"krate":0,"index":3950},{"krate":0,"index":3953},{"krate":0,"index":3956},{"krate":0,"index":3957},{"krate":0,"index":3960},{"krate":0,"index":3963},{"krate":0,"index":4011},{"krate":0,"index":4012},{"krate":0,"index":4015},{"krate":0,"index":4018},{"krate":0,"index":4036},{"krate":0,"index":4037},{"krate":0,"index":4040},{"krate":0,"index":4043},{"krate":0,"index":4047},{"krate":0,"index":4052},{"krate":0,"index":4058},{"krate":0,"index":4063},{"krate":0,"index":4069},{"krate":0,"index":4268},{"krate":0,"index":4273},{"krate":0,"index":4335},{"krate":0,"index":4339},{"krate":0,"index":4343}],"decl_id":null,"docs":" Traits for writing parallel programs using an iterator-style interface","sig":null,"attributes":[{"value":"/ Traits for writing parallel programs using an iterator-style interface","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23003,"byte_end":23077,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23078,"byte_end":23081,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you have","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23082,"byte_end":23160,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ need to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23161,"byte_end":23204,"line_start":4,"line_end":4,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23205,"byte_end":23208,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Parallel iterators make it easy to write iterator-like chains that","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23209,"byte_end":23279,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ execute in parallel: typically all you have to do is convert the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23280,"byte_end":23348,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/ first `.iter()` (or `iter_mut()`, `into_iter()`, etc) method into","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23349,"byte_end":23418,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ `par_iter()` (or `par_iter_mut()`, `into_par_iter()`, etc). For","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23419,"byte_end":23486,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ example, to compute the sum of the squares of a sequence of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23487,"byte_end":23550,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/ integers, one might write:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23551,"byte_end":23581,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23582,"byte_end":23585,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23586,"byte_end":23597,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23598,"byte_end":23624,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/ fn sum_of_squares(input: &[i32]) -> i32 {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23625,"byte_end":23670,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"/     input.par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23671,"byte_end":23695,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/          .map(|i| i * i)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23696,"byte_end":23724,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/          .sum()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23725,"byte_end":23744,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23745,"byte_end":23750,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23751,"byte_end":23758,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23759,"byte_end":23762,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Or, to increment all the integers in a slice, you could write:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23763,"byte_end":23829,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23830,"byte_end":23833,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23834,"byte_end":23845,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23846,"byte_end":23872,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/ fn increment_all(input: &mut [i32]) {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23873,"byte_end":23914,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/     input.par_iter_mut()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23915,"byte_end":23943,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/          .for_each(|p| *p += 1);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23944,"byte_end":23980,"line_start":28,"line_end":28,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23981,"byte_end":23986,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23987,"byte_end":23994,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23995,"byte_end":23998,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ To use parallel iterators, first import the traits by adding","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":23999,"byte_end":24063,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/ something like `use rayon::prelude::*` to your module. You can","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24064,"byte_end":24130,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"/ then call `par_iter`, `par_iter_mut`, or `into_par_iter` to get a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24131,"byte_end":24200,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/ parallel iterator. Like a [regular iterator][], parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24201,"byte_end":24261,"line_start":35,"line_end":35,"column_start":1,"column_end":61}},{"value":"/ iterators work by first constructing a computation and then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24262,"byte_end":24325,"line_start":36,"line_end":36,"column_start":1,"column_end":64}},{"value":"/ executing it.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24326,"byte_end":24343,"line_start":37,"line_end":37,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24344,"byte_end":24347,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In addition to `par_iter()` and friends, some types offer other","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24348,"byte_end":24415,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"/ ways to create (or consume) parallel iterators:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24416,"byte_end":24467,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24468,"byte_end":24471,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - Slices (`&[T]`, `&mut [T]`) offer methods like `par_split` and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24472,"byte_end":24540,"line_start":42,"line_end":42,"column_start":1,"column_end":69}},{"value":"/   `par_windows`, as well as various parallel sorting","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24541,"byte_end":24597,"line_start":43,"line_end":43,"column_start":1,"column_end":57}},{"value":"/   operations. See [the `ParallelSlice` trait] for the full list.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24598,"byte_end":24666,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/ - Strings (`&str`) offer methods like `par_split` and `par_lines`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24667,"byte_end":24737,"line_start":45,"line_end":45,"column_start":1,"column_end":71}},{"value":"/   See [the `ParallelString` trait] for the full list.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24738,"byte_end":24795,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"/ - Various collections offer [`par_extend`], which grows a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24796,"byte_end":24857,"line_start":47,"line_end":47,"column_start":1,"column_end":62}},{"value":"/   collection given a parallel iterator. (If you don't have a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24858,"byte_end":24922,"line_start":48,"line_end":48,"column_start":1,"column_end":65}},{"value":"/   collection to extend, you can use [`collect()`] to create a new","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24923,"byte_end":24992,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"/   one from scratch.)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":24993,"byte_end":25017,"line_start":50,"line_end":50,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25018,"byte_end":25021,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ [the `ParallelSlice` trait]: ../slice/trait.ParallelSlice.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25022,"byte_end":25088,"line_start":52,"line_end":52,"column_start":1,"column_end":67}},{"value":"/ [the `ParallelString` trait]: ../str/trait.ParallelString.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25089,"byte_end":25155,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"/ [`par_extend`]: trait.ParallelExtend.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25156,"byte_end":25201,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ [`collect()`]: trait.ParallelIterator.html#method.collect","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25202,"byte_end":25263,"line_start":55,"line_end":55,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25264,"byte_end":25267,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ To see the full range of methods available on parallel iterators,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25268,"byte_end":25337,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/ check out the [`ParallelIterator`] and [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25338,"byte_end":25408,"line_start":58,"line_end":58,"column_start":1,"column_end":71}},{"value":"/ traits.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25409,"byte_end":25420,"line_start":59,"line_end":59,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25421,"byte_end":25424,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ If you'd like to build a custom parallel iterator, or to write your own","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25425,"byte_end":25500,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ combinator, then check out the [split] function and the [plumbing] module.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25501,"byte_end":25579,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25580,"byte_end":25583,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [regular iterator]: http://doc.rust-lang.org/std/iter/trait.Iterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25584,"byte_end":25661,"line_start":64,"line_end":64,"column_start":1,"column_end":78}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25662,"byte_end":25715,"line_start":65,"line_end":65,"column_start":1,"column_end":54}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25716,"byte_end":25783,"line_start":66,"line_end":66,"column_start":1,"column_end":68}},{"value":"/ [split]: fn.split.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25784,"byte_end":25810,"line_start":67,"line_end":67,"column_start":1,"column_end":27}},{"value":"/ [plumbing]: plumbing/index.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25811,"byte_end":25846,"line_start":68,"line_end":68,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25847,"byte_end":25850,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Note: Several of the `ParallelIterator` methods rely on a `Try` trait which","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25851,"byte_end":25930,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/ has been deliberately obscured from the public API.  This trait is intended","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":25931,"byte_end":26010,"line_start":71,"line_end":71,"column_start":1,"column_end":80}},{"value":"/ to mirror the unstable `std::ops::Try` with implementations for `Option` and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":26011,"byte_end":26091,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ `Result`, where `Some`/`Ok` values will let those iterators continue, but","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":26092,"byte_end":26169,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ `None`/`Err` values will exit early.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":26170,"byte_end":26210,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":26211,"byte_end":26214,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ A note about object safety: It is currently _not_ possible to wrap","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":26215,"byte_end":26285,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"/ a `ParallelIterator` (or any trait that depends on it) using a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":26286,"byte_end":26352,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ `Box<dyn ParallelIterator>` or other kind of dynamic allocation,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":26353,"byte_end":26421,"line_start":78,"line_end":78,"column_start":1,"column_end":69}},{"value":"/ because `ParallelIterator` is **not object-safe**.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":26422,"byte_end":26476,"line_start":79,"line_end":79,"column_start":1,"column_end":55}},{"value":"/ (This keeps the implementation simpler and allows extra optimizations.)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":26477,"byte_end":26552,"line_start":80,"line_end":80,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118622,"byte_end":118636,"line_start":46,"line_end":46,"column_start":11,"column_end":25},"name":"ParallelBridge","qualname":"::iter::par_bridge::ParallelBridge","value":"ParallelBridge: Sized","parent":null,"children":[{"krate":0,"index":258}],"decl_id":null,"docs":" Conversion trait to convert an `Iterator` to a `ParallelIterator`.","sig":null,"attributes":[{"value":"/ Conversion trait to convert an `Iterator` to a `ParallelIterator`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":117358,"byte_end":117428,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":117429,"byte_end":117432,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This creates a \"bridge\" from a sequential iterator to a parallel one, by distributing its items","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":117433,"byte_end":117532,"line_start":13,"line_end":13,"column_start":1,"column_end":100}},{"value":"/ across the Rayon thread pool. This has the advantage of being able to parallelize just about","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":117533,"byte_end":117629,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ anything, but the resulting `ParallelIterator` can be less efficient than if you started with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":117630,"byte_end":117727,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ `par_iter` instead. However, it can still be useful for iterators that are difficult to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":117728,"byte_end":117819,"line_start":16,"line_end":16,"column_start":1,"column_end":92}},{"value":"/ parallelize by other means, like channels or file or network I/O.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":117820,"byte_end":117889,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":117890,"byte_end":117893,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The resulting iterator is not guaranteed to keep the order of the original iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":117894,"byte_end":117982,"line_start":19,"line_end":19,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":117983,"byte_end":117986,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":117987,"byte_end":118001,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118002,"byte_end":118005,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ To use this trait, take an existing `Iterator` and call `par_bridge` on it. After that, you can","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118006,"byte_end":118105,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/ use any of the `ParallelIterator` methods:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118106,"byte_end":118152,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118153,"byte_end":118156,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118157,"byte_end":118164,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ use rayon::iter::ParallelBridge;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118165,"byte_end":118201,"line_start":27,"line_end":27,"column_start":1,"column_end":37}},{"value":"/ use rayon::prelude::ParallelIterator;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118202,"byte_end":118243,"line_start":28,"line_end":28,"column_start":1,"column_end":42}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118244,"byte_end":118277,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118278,"byte_end":118281,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let rx = {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118282,"byte_end":118296,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/     let (tx, rx) = channel();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118297,"byte_end":118330,"line_start":32,"line_end":32,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118331,"byte_end":118334,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     tx.send(\"one!\");","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118335,"byte_end":118359,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/     tx.send(\"two!\");","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118360,"byte_end":118384,"line_start":35,"line_end":35,"column_start":1,"column_end":25}},{"value":"/     tx.send(\"three!\");","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118385,"byte_end":118411,"line_start":36,"line_end":36,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118412,"byte_end":118415,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/     rx","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118416,"byte_end":118426,"line_start":38,"line_end":38,"column_start":1,"column_end":11}},{"value":"/ };","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118427,"byte_end":118433,"line_start":39,"line_end":39,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118434,"byte_end":118437,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let mut output: Vec<&'static str> = rx.into_iter().par_bridge().collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118438,"byte_end":118516,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ output.sort_unstable();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118517,"byte_end":118544,"line_start":42,"line_end":42,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118545,"byte_end":118548,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(&*output, &[\"one!\", \"three!\", \"two!\"]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118549,"byte_end":118603,"line_start":44,"line_end":44,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118604,"byte_end":118611,"line_start":45,"line_end":45,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118717,"byte_end":118727,"line_start":48,"line_end":48,"column_start":8,"column_end":18},"name":"par_bridge","qualname":"::iter::par_bridge::ParallelBridge::par_bridge","value":"pub fn par_bridge(Self) -> IterBridge<Self>","parent":{"krate":0,"index":257},"children":[],"decl_id":null,"docs":" Create a bridge from this type to a `ParallelIterator`.\n","sig":null,"attributes":[{"value":"/ Create a bridge from this type to a `ParallelIterator`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118650,"byte_end":118709,"line_start":47,"line_end":47,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":5874},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":119226,"byte_end":119236,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"IterBridge","qualname":"::iter::par_bridge::IterBridge","value":"IterBridge {  }","parent":null,"children":[{"krate":0,"index":5876}],"decl_id":null,"docs":" `IterBridge` is a parallel iterator that wraps a sequential iterator.","sig":null,"attributes":[{"value":"/ `IterBridge` is a parallel iterator that wraps a sequential iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118920,"byte_end":118993,"line_start":60,"line_end":60,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118994,"byte_end":118997,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ This type is created when using the `par_bridge` method on `ParallelBridge`. See the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118998,"byte_end":119086,"line_start":62,"line_end":62,"column_start":1,"column_end":89}},{"value":"/ [`ParallelBridge`] documentation for details.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":119087,"byte_end":119136,"line_start":63,"line_end":63,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":119137,"byte_end":119140,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`ParallelBridge`]: trait.ParallelBridge.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":119141,"byte_end":119190,"line_start":65,"line_end":65,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":5883},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":124445,"byte_end":124450,"line_start":14,"line_end":14,"column_start":12,"column_end":17},"name":"Chain","qualname":"::iter::chain::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":5886},{"krate":0,"index":5887}],"decl_id":null,"docs":" `Chain` is an iterator that joins `b` after `a` in one continuous iterator.\n This struct is created by the [`chain()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Chain` is an iterator that joins `b` after `a` in one continuous iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":124063,"byte_end":124142,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ This struct is created by the [`chain()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":124143,"byte_end":124219,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":124220,"byte_end":124223,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`chain()`]: trait.ParallelIterator.html#method.chain","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":124224,"byte_end":124281,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":124282,"byte_end":124335,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":124336,"byte_end":124409,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5904},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":141710,"byte_end":141716,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::iter::chunks::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":5906},{"krate":0,"index":5907}],"decl_id":null,"docs":" `Chunks` is an iterator that groups elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Chunks` is an iterator that groups elements of an underlying iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":141297,"byte_end":141372,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":141373,"byte_end":141376,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`chunks()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":141377,"byte_end":141461,"line_start":9,"line_end":9,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":141462,"byte_end":141465,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`chunks()`]: trait.IndexedParallelIterator.html#method.chunks","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":141466,"byte_end":141532,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":141533,"byte_end":141600,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":141601,"byte_end":141674,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5914},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":163145,"byte_end":163154,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"Enumerate","qualname":"::iter::enumerate::Enumerate","value":"Enumerate {  }","parent":null,"children":[{"krate":0,"index":5916}],"decl_id":null,"docs":" `Enumerate` is an iterator that returns the current count along with the element.\n This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Enumerate` is an iterator that returns the current count along with the element.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":162717,"byte_end":162802,"line_start":7,"line_end":7,"column_start":1,"column_end":86}},{"value":"/ This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":162803,"byte_end":162890,"line_start":8,"line_end":8,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":162891,"byte_end":162894,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`enumerate()`]: trait.IndexedParallelIterator.html#method.enumerate","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":162895,"byte_end":162967,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":162968,"byte_end":163035,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":163036,"byte_end":163109,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5923},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":166580,"byte_end":166586,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Filter","qualname":"::iter::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":5926},{"krate":0,"index":5927}],"decl_id":null,"docs":" `Filter` takes a predicate `filter_op` and filters out elements that match.\n This struct is created by the [`filter()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Filter` takes a predicate `filter_op` and filters out elements that match.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":166202,"byte_end":166281,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ This struct is created by the [`filter()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":166282,"byte_end":166359,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":166360,"byte_end":166363,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`filter()`]: trait.ParallelIterator.html#method.filter","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":166364,"byte_end":166423,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":166424,"byte_end":166477,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":166478,"byte_end":166551,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5932},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":170126,"byte_end":170135,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::iter::filter_map::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":5935},{"krate":0,"index":5936}],"decl_id":null,"docs":" `FilterMap` creates an iterator that uses `filter_op` to both filter and map elements.\n This struct is created by the [`filter_map()`] method on [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `FilterMap` creates an iterator that uses `filter_op` to both filter and map elements.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":169724,"byte_end":169814,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"/ This struct is created by the [`filter_map()`] method on [`ParallelIterator`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":169815,"byte_end":169897,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":169898,"byte_end":169901,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`filter_map()`]: trait.ParallelIterator.html#method.filter_map","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":169902,"byte_end":169969,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":169970,"byte_end":170023,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":170024,"byte_end":170097,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5941},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":173833,"byte_end":173840,"line_start":13,"line_end":13,"column_start":12,"column_end":19},"name":"FlatMap","qualname":"::iter::flat_map::FlatMap","value":"FlatMap {  }","parent":null,"children":[{"krate":0,"index":5944},{"krate":0,"index":5945}],"decl_id":null,"docs":" `FlatMap` maps each element to an iterator, then flattens these iterators together.\n This struct is created by the [`flat_map()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FlatMap` maps each element to an iterator, then flattens these iterators together.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":173441,"byte_end":173528,"line_start":6,"line_end":6,"column_start":1,"column_end":88}},{"value":"/ This struct is created by the [`flat_map()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":173529,"byte_end":173608,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":173609,"byte_end":173612,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`flat_map()`]: trait.ParallelIterator.html#method.flat_map","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":173613,"byte_end":173676,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":173677,"byte_end":173730,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":173731,"byte_end":173804,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5950},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flatten.rs","byte_start":177892,"byte_end":177899,"line_start":12,"line_end":12,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::iter::flatten::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":5952}],"decl_id":null,"docs":" `Flatten` turns each element to an iterator, then flattens these iterators\n together. This struct is created by the [`flatten()`] method on\n [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `Flatten` turns each element to an iterator, then flattens these iterators","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flatten.rs","byte_start":177490,"byte_end":177568,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ together. This struct is created by the [`flatten()`] method on","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flatten.rs","byte_start":177569,"byte_end":177636,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flatten.rs","byte_start":177637,"byte_end":177662,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flatten.rs","byte_start":177663,"byte_end":177666,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`flatten()`]: trait.ParallelIterator.html#method.flatten","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flatten.rs","byte_start":177667,"byte_end":177728,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flatten.rs","byte_start":177729,"byte_end":177782,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flatten.rs","byte_start":177783,"byte_end":177856,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5959},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":179318,"byte_end":179322,"line_start":29,"line_end":29,"column_start":12,"column_end":16},"name":"Fold","qualname":"::iter::fold::Fold","value":"Fold {  }","parent":null,"children":[{"krate":0,"index":5963},{"krate":0,"index":5964},{"krate":0,"index":5965}],"decl_id":null,"docs":" `Fold` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`fold()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Fold` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":178933,"byte_end":179025,"line_start":22,"line_end":22,"column_start":1,"column_end":93}},{"value":"/ This struct is created by the [`fold()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":179026,"byte_end":179101,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":179102,"byte_end":179105,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`fold()`]: trait.ParallelIterator.html#method.fold","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":179106,"byte_end":179161,"line_start":25,"line_end":25,"column_start":1,"column_end":56}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":179162,"byte_end":179215,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":179216,"byte_end":179289,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5971},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":183449,"byte_end":183457,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"FoldWith","qualname":"::iter::fold::FoldWith","value":"FoldWith {  }","parent":null,"children":[{"krate":0,"index":5975},{"krate":0,"index":5976},{"krate":0,"index":5977}],"decl_id":null,"docs":" `FoldWith` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`fold_with()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FoldWith` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":183045,"byte_end":183141,"line_start":197,"line_end":197,"column_start":1,"column_end":97}},{"value":"/ This struct is created by the [`fold_with()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":183142,"byte_end":183222,"line_start":198,"line_end":198,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":183223,"byte_end":183226,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ [`fold_with()`]: trait.ParallelIterator.html#method.fold_with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":183227,"byte_end":183292,"line_start":200,"line_end":200,"column_start":1,"column_end":66}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":183293,"byte_end":183346,"line_start":201,"line_end":201,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":183347,"byte_end":183420,"line_start":202,"line_end":202,"column_start":1,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":1286},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"plumbing","qualname":"::iter::plumbing","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","parent":null,"children":[{"krate":0,"index":1287},{"krate":0,"index":1290},{"krate":0,"index":1293},{"krate":0,"index":1296},{"krate":0,"index":1299},{"krate":0,"index":1304},{"krate":0,"index":1313},{"krate":0,"index":1321},{"krate":0,"index":1329},{"krate":0,"index":1332},{"krate":0,"index":1336},{"krate":0,"index":5983},{"krate":0,"index":5985},{"krate":0,"index":5987},{"krate":0,"index":1341},{"krate":0,"index":5988},{"krate":0,"index":5991},{"krate":0,"index":5993},{"krate":0,"index":1344},{"krate":0,"index":1347},{"krate":0,"index":1360},{"krate":0,"index":1368},{"krate":0,"index":1371}],"decl_id":null,"docs":" Traits and functions used to implement parallel iteration.  These are\n low-level details -- users of parallel iterators should not need to\n interact with them directly.  See [the `plumbing` README][r] for a high-level overview.","sig":null,"attributes":[{"value":"/ Traits and functions used to implement parallel iteration.  These are","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193193,"byte_end":193266,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ low-level details -- users of parallel iterators should not need to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193267,"byte_end":193338,"line_start":2,"line_end":2,"column_start":1,"column_end":72}},{"value":"/ interact with them directly.  See [the `plumbing` README][r] for a high-level overview.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193339,"byte_end":193430,"line_start":3,"line_end":3,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193431,"byte_end":193434,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193435,"byte_end":193517,"line_start":5,"line_end":5,"column_start":1,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":1299},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193967,"byte_end":193983,"line_start":20,"line_end":20,"column_start":11,"column_end":27},"name":"ProducerCallback","qualname":"::iter::plumbing::ProducerCallback","value":"ProducerCallback<T>","parent":null,"children":[{"krate":0,"index":1301},{"krate":0,"index":1302}],"decl_id":null,"docs":" The `ProducerCallback` trait is a kind of generic closure,\n [analogous to `FnOnce`][FnOnce]. See [the corresponding section in\n the plumbing README][r] for more details.","sig":null,"attributes":[{"value":"/ The `ProducerCallback` trait is a kind of generic closure,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193606,"byte_end":193668,"line_start":14,"line_end":14,"column_start":1,"column_end":63}},{"value":"/ [analogous to `FnOnce`][FnOnce]. See [the corresponding section in","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193669,"byte_end":193739,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ the plumbing README][r] for more details.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193740,"byte_end":193785,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193786,"byte_end":193789,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md#producer-callback","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193790,"byte_end":193890,"line_start":18,"line_end":18,"column_start":1,"column_end":101}},{"value":"/ [FnOnce]: https://doc.rust-lang.org/std/ops/trait.FnOnce.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193891,"byte_end":193956,"line_start":19,"line_end":19,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":1301},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194216,"byte_end":194222,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::iter::plumbing::ProducerCallback::Output","value":"type Output;","parent":{"krate":0,"index":1299},"children":[],"decl_id":null,"docs":" The type of value returned by this callback. Analogous to\n [`Output` from the `FnOnce` trait][Output].","sig":null,"attributes":[{"value":"/ The type of value returned by this callback. Analogous to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":193993,"byte_end":194054,"line_start":21,"line_end":21,"column_start":5,"column_end":66}},{"value":"/ [`Output` from the `FnOnce` trait][Output].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194059,"byte_end":194106,"line_start":22,"line_end":22,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194111,"byte_end":194114,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ [Output]: https://doc.rust-lang.org/std/ops/trait.FnOnce.html#associatedtype.Output","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194119,"byte_end":194206,"line_start":24,"line_end":24,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194440,"byte_end":194448,"line_start":30,"line_end":30,"column_start":8,"column_end":16},"name":"callback","qualname":"::iter::plumbing::ProducerCallback::callback","value":"pub fn callback<P>(Self, P) -> Self::Output where P: Producer<Item = T>","parent":{"krate":0,"index":1299},"children":[],"decl_id":null,"docs":" Invokes the callback with the given producer as argument. The\n key point of this trait is that this method is generic over\n `P`, and hence implementors must be defined for any producer.\n","sig":null,"attributes":[{"value":"/ Invokes the callback with the given producer as argument. The","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194229,"byte_end":194294,"line_start":27,"line_end":27,"column_start":5,"column_end":70}},{"value":"/ key point of this trait is that this method is generic over","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194299,"byte_end":194362,"line_start":28,"line_end":28,"column_start":5,"column_end":68}},{"value":"/ `P`, and hence implementors must be defined for any producer.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194367,"byte_end":194432,"line_start":29,"line_end":29,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1304},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195922,"byte_end":195930,"line_start":59,"line_end":59,"column_start":11,"column_end":19},"name":"Producer","qualname":"::iter::plumbing::Producer","value":"Producer: Send + Sized","parent":null,"children":[{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311}],"decl_id":null,"docs":" A `Producer` is effectively a \"splittable `IntoIterator`\". That\n is, a producer is a value which can be converted into an iterator\n at any time: at that point, it simply produces items on demand,\n like any iterator. But what makes a `Producer` special is that,\n *before* we convert to an iterator, we can also **split** it at a\n particular point using the `split_at` method. This will yield up\n two producers, one producing the items before that point, and one\n producing the items after that point (these two producers can then\n independently be split further, or be converted into iterators).\n In Rayon, this splitting is used to divide between threads.\n See [the `plumbing` README][r] for further details.","sig":null,"attributes":[{"value":"/ A `Producer` is effectively a \"splittable `IntoIterator`\". That","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194531,"byte_end":194598,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/ is, a producer is a value which can be converted into an iterator","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194599,"byte_end":194668,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/ at any time: at that point, it simply produces items on demand,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194669,"byte_end":194736,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ like any iterator. But what makes a `Producer` special is that,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194737,"byte_end":194804,"line_start":38,"line_end":38,"column_start":1,"column_end":68}},{"value":"/ *before* we convert to an iterator, we can also **split** it at a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194805,"byte_end":194874,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/ particular point using the `split_at` method. This will yield up","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194875,"byte_end":194943,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/ two producers, one producing the items before that point, and one","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":194944,"byte_end":195013,"line_start":41,"line_end":41,"column_start":1,"column_end":70}},{"value":"/ producing the items after that point (these two producers can then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195014,"byte_end":195084,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/ independently be split further, or be converted into iterators).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195085,"byte_end":195153,"line_start":43,"line_end":43,"column_start":1,"column_end":69}},{"value":"/ In Rayon, this splitting is used to divide between threads.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195154,"byte_end":195217,"line_start":44,"line_end":44,"column_start":1,"column_end":64}},{"value":"/ See [the `plumbing` README][r] for further details.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195218,"byte_end":195273,"line_start":45,"line_end":45,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195274,"byte_end":195277,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Note that each producer will always produce a fixed number of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195278,"byte_end":195343,"line_start":47,"line_end":47,"column_start":1,"column_end":66}},{"value":"/ items N. However, this number N is not queryable through the API;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195344,"byte_end":195413,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ the consumer is expected to track it.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195414,"byte_end":195455,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195456,"byte_end":195459,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ NB. You might expect `Producer` to extend the `IntoIterator`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195460,"byte_end":195524,"line_start":51,"line_end":51,"column_start":1,"column_end":65}},{"value":"/ trait.  However, [rust-lang/rust#20671][20671] prevents us from","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195525,"byte_end":195592,"line_start":52,"line_end":52,"column_start":1,"column_end":68}},{"value":"/ declaring the DoubleEndedIterator and ExactSizeIterator","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195593,"byte_end":195652,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/ constraints on a required IntoIterator trait, so we inline","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195653,"byte_end":195715,"line_start":54,"line_end":54,"column_start":1,"column_end":63}},{"value":"/ IntoIterator here until that issue is fixed.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195716,"byte_end":195764,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195765,"byte_end":195768,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195769,"byte_end":195851,"line_start":57,"line_end":57,"column_start":1,"column_end":83}},{"value":"/ [20671]: https://github.com/rust-lang/rust/issues/20671","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195852,"byte_end":195911,"line_start":58,"line_end":58,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":1305},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196067,"byte_end":196071,"line_start":62,"line_end":62,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::plumbing::Producer::Item","value":"type Item;","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" The type of item that will be produced by this producer once\n it is converted into an iterator.\n","sig":null,"attributes":[{"value":"/ The type of item that will be produced by this producer once","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195951,"byte_end":196015,"line_start":60,"line_end":60,"column_start":5,"column_end":69}},{"value":"/ it is converted into an iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196020,"byte_end":196057,"line_start":61,"line_end":61,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":1306},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196128,"byte_end":196136,"line_start":65,"line_end":65,"column_start":10,"column_end":18},"name":"IntoIter","qualname":"::iter::plumbing::Producer::IntoIter","value":"type IntoIter: Iterator<Item = Self::Item> + DoubleEndedIterator + ExactSizeIterator;","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" The type of iterator we will become.\n","sig":null,"attributes":[{"value":"/ The type of iterator we will become.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196078,"byte_end":196118,"line_start":64,"line_end":64,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196319,"byte_end":196328,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"into_iter","qualname":"::iter::plumbing::Producer::into_iter","value":"pub fn into_iter(Self) -> Self::IntoIter","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" Convert `self` into an iterator; at this point, no more parallel splits\n are possible.\n","sig":null,"attributes":[{"value":"/ Convert `self` into an iterator; at this point, no more parallel splits","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196214,"byte_end":196289,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ are possible.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196294,"byte_end":196311,"line_start":68,"line_end":68,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196931,"byte_end":196938,"line_start":81,"line_end":81,"column_start":8,"column_end":15},"name":"min_len","qualname":"::iter::plumbing::Producer::min_len","value":"pub fn min_len(&Self) -> usize","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" The minimum number of items that we will process\n sequentially. Defaults to 1, which means that we will split\n all the way down to a single item. This can be raised higher\n using the [`with_min_len`] method, which will force us to\n create sequential tasks at a larger granularity. Note that\n Rayon automatically normally attempts to adjust the size of\n parallel splits to reduce overhead, so this should not be\n needed.","sig":null,"attributes":[{"value":"/ The minimum number of items that we will process","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196359,"byte_end":196411,"line_start":71,"line_end":71,"column_start":5,"column_end":57}},{"value":"/ sequentially. Defaults to 1, which means that we will split","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196416,"byte_end":196479,"line_start":72,"line_end":72,"column_start":5,"column_end":68}},{"value":"/ all the way down to a single item. This can be raised higher","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196484,"byte_end":196548,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ using the [`with_min_len`] method, which will force us to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196553,"byte_end":196614,"line_start":74,"line_end":74,"column_start":5,"column_end":66}},{"value":"/ create sequential tasks at a larger granularity. Note that","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196619,"byte_end":196681,"line_start":75,"line_end":75,"column_start":5,"column_end":67}},{"value":"/ Rayon automatically normally attempts to adjust the size of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196686,"byte_end":196749,"line_start":76,"line_end":76,"column_start":5,"column_end":68}},{"value":"/ parallel splits to reduce overhead, so this should not be","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196754,"byte_end":196815,"line_start":77,"line_end":77,"column_start":5,"column_end":66}},{"value":"/ needed.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196820,"byte_end":196831,"line_start":78,"line_end":78,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196836,"byte_end":196839,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ [`with_min_len`]: ../trait.IndexedParallelIterator.html#method.with_min_len","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196844,"byte_end":196923,"line_start":80,"line_end":80,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197503,"byte_end":197510,"line_start":94,"line_end":94,"column_start":8,"column_end":15},"name":"max_len","qualname":"::iter::plumbing::Producer::max_len","value":"pub fn max_len(&Self) -> usize","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" The maximum number of items that we will process\n sequentially. Defaults to MAX, which means that we can choose\n not to split at all. This can be lowered using the\n [`with_max_len`] method, which will force us to create more\n parallel tasks. Note that Rayon automatically normally\n attempts to adjust the size of parallel splits to reduce\n overhead, so this should not be needed.","sig":null,"attributes":[{"value":"/ The maximum number of items that we will process","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":196978,"byte_end":197030,"line_start":85,"line_end":85,"column_start":5,"column_end":57}},{"value":"/ sequentially. Defaults to MAX, which means that we can choose","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197035,"byte_end":197100,"line_start":86,"line_end":86,"column_start":5,"column_end":70}},{"value":"/ not to split at all. This can be lowered using the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197105,"byte_end":197159,"line_start":87,"line_end":87,"column_start":5,"column_end":59}},{"value":"/ [`with_max_len`] method, which will force us to create more","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197164,"byte_end":197227,"line_start":88,"line_end":88,"column_start":5,"column_end":68}},{"value":"/ parallel tasks. Note that Rayon automatically normally","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197232,"byte_end":197290,"line_start":89,"line_end":89,"column_start":5,"column_end":63}},{"value":"/ attempts to adjust the size of parallel splits to reduce","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197295,"byte_end":197355,"line_start":90,"line_end":90,"column_start":5,"column_end":65}},{"value":"/ overhead, so this should not be needed.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197360,"byte_end":197403,"line_start":91,"line_end":91,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197408,"byte_end":197411,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ [`with_max_len`]: ../trait.IndexedParallelIterator.html#method.with_max_len","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197416,"byte_end":197495,"line_start":93,"line_end":93,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197698,"byte_end":197706,"line_start":100,"line_end":100,"column_start":8,"column_end":16},"name":"split_at","qualname":"::iter::plumbing::Producer::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self)","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" Split into two producers; one produces items `0..index`, the\n other `index..N`. Index must be less than or equal to `N`.\n","sig":null,"attributes":[{"value":"/ Split into two producers; one produces items `0..index`, the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197559,"byte_end":197623,"line_start":98,"line_end":98,"column_start":5,"column_end":69}},{"value":"/ other `index..N`. Index must be less than or equal to `N`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197628,"byte_end":197690,"line_start":99,"line_end":99,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197973,"byte_end":197982,"line_start":106,"line_end":106,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::plumbing::Producer::fold_with","value":"pub fn fold_with<F>(Self, F) -> F where F: Folder<Self::Item>","parent":{"krate":0,"index":1304},"children":[],"decl_id":null,"docs":" Iterate the producer, feeding each element to `folder`, and\n stop when the folder is full (or all elements have been consumed).","sig":null,"attributes":[{"value":"/ Iterate the producer, feeding each element to `folder`, and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197749,"byte_end":197812,"line_start":102,"line_end":102,"column_start":5,"column_end":68}},{"value":"/ stop when the folder is full (or all elements have been consumed).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197817,"byte_end":197887,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197892,"byte_end":197895,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ The provided implementation is sufficient for most iterables.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":197900,"byte_end":197965,"line_start":105,"line_end":105,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1313},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198930,"byte_end":198938,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"name":"Consumer","qualname":"::iter::plumbing::Consumer","value":"Consumer<Item>: Send + Sized","parent":null,"children":[{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320}],"decl_id":null,"docs":" A consumer is effectively a [generalized \"fold\" operation][fold],\n and in fact each consumer will eventually be converted into a\n [`Folder`]. What makes a consumer special is that, like a\n [`Producer`], it can be **split** into multiple consumers using\n the `split_at` method. When a consumer is split, it produces two\n consumers, as well as a **reducer**. The two consumers can be fed\n items independently, and when they are done the reducer is used to\n combine their two results into one. See [the `plumbing`\n README][r] for further details.","sig":null,"attributes":[{"value":"/ A consumer is effectively a [generalized \"fold\" operation][fold],","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198110,"byte_end":198179,"line_start":114,"line_end":114,"column_start":1,"column_end":70}},{"value":"/ and in fact each consumer will eventually be converted into a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198180,"byte_end":198245,"line_start":115,"line_end":115,"column_start":1,"column_end":66}},{"value":"/ [`Folder`]. What makes a consumer special is that, like a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198246,"byte_end":198307,"line_start":116,"line_end":116,"column_start":1,"column_end":62}},{"value":"/ [`Producer`], it can be **split** into multiple consumers using","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198308,"byte_end":198375,"line_start":117,"line_end":117,"column_start":1,"column_end":68}},{"value":"/ the `split_at` method. When a consumer is split, it produces two","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198376,"byte_end":198444,"line_start":118,"line_end":118,"column_start":1,"column_end":69}},{"value":"/ consumers, as well as a **reducer**. The two consumers can be fed","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198445,"byte_end":198514,"line_start":119,"line_end":119,"column_start":1,"column_end":70}},{"value":"/ items independently, and when they are done the reducer is used to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198515,"byte_end":198585,"line_start":120,"line_end":120,"column_start":1,"column_end":71}},{"value":"/ combine their two results into one. See [the `plumbing`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198586,"byte_end":198645,"line_start":121,"line_end":121,"column_start":1,"column_end":60}},{"value":"/ README][r] for further details.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198646,"byte_end":198681,"line_start":122,"line_end":122,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198682,"byte_end":198685,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198686,"byte_end":198768,"line_start":124,"line_end":124,"column_start":1,"column_end":83}},{"value":"/ [fold]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198769,"byte_end":198847,"line_start":125,"line_end":125,"column_start":1,"column_end":79}},{"value":"/ [`Folder`]: trait.Folder.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198848,"byte_end":198881,"line_start":126,"line_end":126,"column_start":1,"column_end":34}},{"value":"/ [`Producer`]: trait.Producer.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198882,"byte_end":198919,"line_start":127,"line_end":127,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1315},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199039,"byte_end":199045,"line_start":130,"line_end":130,"column_start":10,"column_end":16},"name":"Folder","qualname":"::iter::plumbing::Consumer::Folder","value":"type Folder: Folder<Item, Result = Self::Result>;","parent":{"krate":0,"index":1313},"children":[],"decl_id":null,"docs":" The type of folder that this consumer can be converted into.\n","sig":null,"attributes":[{"value":"/ The type of folder that this consumer can be converted into.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198965,"byte_end":199029,"line_start":129,"line_end":129,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1316},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199166,"byte_end":199173,"line_start":133,"line_end":133,"column_start":10,"column_end":17},"name":"Reducer","qualname":"::iter::plumbing::Consumer::Reducer","value":"type Reducer: Reducer<Self::Result>;","parent":{"krate":0,"index":1313},"children":[],"decl_id":null,"docs":" The type of reducer that is produced if this consumer is split.\n","sig":null,"attributes":[{"value":"/ The type of reducer that is produced if this consumer is split.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199089,"byte_end":199156,"line_start":132,"line_end":132,"column_start":5,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":1317},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199279,"byte_end":199285,"line_start":136,"line_end":136,"column_start":10,"column_end":16},"name":"Result","qualname":"::iter::plumbing::Consumer::Result","value":"type Result: Send;","parent":{"krate":0,"index":1313},"children":[],"decl_id":null,"docs":" The type of result that this consumer will ultimately produce.\n","sig":null,"attributes":[{"value":"/ The type of result that this consumer will ultimately produce.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199203,"byte_end":199269,"line_start":135,"line_end":135,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199521,"byte_end":199529,"line_start":142,"line_end":142,"column_start":8,"column_end":16},"name":"split_at","qualname":"::iter::plumbing::Consumer::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self, Self::Reducer)","parent":{"krate":0,"index":1313},"children":[],"decl_id":null,"docs":" Divide the consumer into two consumers, one processing items\n `0..index` and one processing items from `index..`. Also\n produces a reducer that can be used to reduce the results at\n the end.\n","sig":null,"attributes":[{"value":"/ Divide the consumer into two consumers, one processing items","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199298,"byte_end":199362,"line_start":138,"line_end":138,"column_start":5,"column_end":69}},{"value":"/ `0..index` and one processing items from `index..`. Also","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199367,"byte_end":199427,"line_start":139,"line_end":139,"column_start":5,"column_end":65}},{"value":"/ produces a reducer that can be used to reduce the results at","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199432,"byte_end":199496,"line_start":140,"line_end":140,"column_start":5,"column_end":69}},{"value":"/ the end.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199501,"byte_end":199513,"line_start":141,"line_end":141,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199715,"byte_end":199726,"line_start":146,"line_end":146,"column_start":8,"column_end":19},"name":"into_folder","qualname":"::iter::plumbing::Consumer::into_folder","value":"pub fn into_folder(Self) -> Self::Folder","parent":{"krate":0,"index":1313},"children":[],"decl_id":null,"docs":" Convert the consumer into a folder that can consume items\n sequentially, eventually producing a final result.\n","sig":null,"attributes":[{"value":"/ Convert the consumer into a folder that can consume items","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199587,"byte_end":199648,"line_start":144,"line_end":144,"column_start":5,"column_end":66}},{"value":"/ sequentially, eventually producing a final result.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199653,"byte_end":199707,"line_start":145,"line_end":145,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199885,"byte_end":199889,"line_start":150,"line_end":150,"column_start":8,"column_end":12},"name":"full","qualname":"::iter::plumbing::Consumer::full","value":"pub fn full(&Self) -> bool","parent":{"krate":0,"index":1313},"children":[],"decl_id":null,"docs":" Hint whether this `Consumer` would like to stop processing\n further items, e.g. if a search has been completed.\n","sig":null,"attributes":[{"value":"/ Hint whether this `Consumer` would like to stop processing","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199755,"byte_end":199817,"line_start":148,"line_end":148,"column_start":5,"column_end":67}},{"value":"/ further items, e.g. if a search has been completed.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199822,"byte_end":199877,"line_start":149,"line_end":149,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":1321},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200252,"byte_end":200258,"line_start":159,"line_end":159,"column_start":11,"column_end":17},"name":"Folder","qualname":"::iter::plumbing::Folder","value":"Folder<Item>: Sized","parent":null,"children":[{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1327},{"krate":0,"index":1328}],"decl_id":null,"docs":" The `Folder` trait encapsulates [the standard fold\n operation][fold].  It can be fed many items using the `consume`\n method. At the end, once all items have been consumed, it can then\n be converted (using `complete`) into a final value.","sig":null,"attributes":[{"value":"/ The `Folder` trait encapsulates [the standard fold","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199909,"byte_end":199963,"line_start":153,"line_end":153,"column_start":1,"column_end":55}},{"value":"/ operation][fold].  It can be fed many items using the `consume`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":199964,"byte_end":200031,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ method. At the end, once all items have been consumed, it can then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200032,"byte_end":200102,"line_start":155,"line_end":155,"column_start":1,"column_end":71}},{"value":"/ be converted (using `complete`) into a final value.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200103,"byte_end":200158,"line_start":156,"line_end":156,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200159,"byte_end":200162,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ [fold]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200163,"byte_end":200241,"line_start":158,"line_end":158,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":1323},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200358,"byte_end":200364,"line_start":161,"line_end":161,"column_start":10,"column_end":16},"name":"Result","qualname":"::iter::plumbing::Folder::Result","value":"type Result;","parent":{"krate":0,"index":1321},"children":[],"decl_id":null,"docs":" The type of result that will ultimately be produced by the folder.\n","sig":null,"attributes":[{"value":"/ The type of result that will ultimately be produced by the folder.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200278,"byte_end":200348,"line_start":160,"line_end":160,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200433,"byte_end":200440,"line_start":164,"line_end":164,"column_start":8,"column_end":15},"name":"consume","qualname":"::iter::plumbing::Folder::consume","value":"pub fn consume(Self, Item) -> Self","parent":{"krate":0,"index":1321},"children":[],"decl_id":null,"docs":" Consume next item and return new sequential state.\n","sig":null,"attributes":[{"value":"/ Consume next item and return new sequential state.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200371,"byte_end":200425,"line_start":163,"line_end":163,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200869,"byte_end":200881,"line_start":174,"line_end":174,"column_start":8,"column_end":20},"name":"consume_iter","qualname":"::iter::plumbing::Folder::consume_iter","value":"pub fn consume_iter<I>(Self, I) -> Self where I: IntoIterator<Item = Item>","parent":{"krate":0,"index":1321},"children":[],"decl_id":null,"docs":" Consume items from the iterator until full, and return new sequential state.","sig":null,"attributes":[{"value":"/ Consume items from the iterator until full, and return new sequential state.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200473,"byte_end":200553,"line_start":166,"line_end":166,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200558,"byte_end":200561,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ This method is **optional**. The default simply iterates over","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200566,"byte_end":200631,"line_start":168,"line_end":168,"column_start":5,"column_end":70}},{"value":"/ `iter`, invoking `consume` and checking after each iteration","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200636,"byte_end":200700,"line_start":169,"line_end":169,"column_start":5,"column_end":69}},{"value":"/ whether `full` returns false.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200705,"byte_end":200738,"line_start":170,"line_end":170,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200743,"byte_end":200746,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The main reason to override it is if you can provide a more","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200751,"byte_end":200814,"line_start":172,"line_end":172,"column_start":5,"column_end":68}},{"value":"/ specialized, efficient implementation.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200819,"byte_end":200861,"line_start":173,"line_end":173,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201189,"byte_end":201197,"line_start":188,"line_end":188,"column_start":8,"column_end":16},"name":"complete","qualname":"::iter::plumbing::Folder::complete","value":"pub fn complete(Self) -> Self::Result","parent":{"krate":0,"index":1321},"children":[],"decl_id":null,"docs":" Finish consuming items, produce final result.\n","sig":null,"attributes":[{"value":"/ Finish consuming items, produce final result.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201132,"byte_end":201181,"line_start":187,"line_end":187,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201354,"byte_end":201358,"line_start":192,"line_end":192,"column_start":8,"column_end":12},"name":"full","qualname":"::iter::plumbing::Folder::full","value":"pub fn full(&Self) -> bool","parent":{"krate":0,"index":1321},"children":[],"decl_id":null,"docs":" Hint whether this `Folder` would like to stop processing\n further items, e.g. if a search has been completed.\n","sig":null,"attributes":[{"value":"/ Hint whether this `Folder` would like to stop processing","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201226,"byte_end":201286,"line_start":190,"line_end":190,"column_start":5,"column_end":65}},{"value":"/ further items, e.g. if a search has been completed.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201291,"byte_end":201346,"line_start":191,"line_end":191,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":1329},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201788,"byte_end":201795,"line_start":202,"line_end":202,"column_start":11,"column_end":18},"name":"Reducer","qualname":"::iter::plumbing::Reducer","value":"Reducer<Result>","parent":null,"children":[{"krate":0,"index":1331}],"decl_id":null,"docs":" The reducer is the final step of a `Consumer` -- after a consumer\n has been split into two parts, and each of those parts has been\n fully processed, we are left with two results. The reducer is then\n used to combine those two results into one. See [the `plumbing`\n README][r] for further details.","sig":null,"attributes":[{"value":"/ The reducer is the final step of a `Consumer` -- after a consumer","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201378,"byte_end":201447,"line_start":195,"line_end":195,"column_start":1,"column_end":70}},{"value":"/ has been split into two parts, and each of those parts has been","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201448,"byte_end":201515,"line_start":196,"line_end":196,"column_start":1,"column_end":68}},{"value":"/ fully processed, we are left with two results. The reducer is then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201516,"byte_end":201586,"line_start":197,"line_end":197,"column_start":1,"column_end":71}},{"value":"/ used to combine those two results into one. See [the `plumbing`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201587,"byte_end":201654,"line_start":198,"line_end":198,"column_start":1,"column_end":68}},{"value":"/ README][r] for further details.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201655,"byte_end":201690,"line_start":199,"line_end":199,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201691,"byte_end":201694,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201695,"byte_end":201777,"line_start":201,"line_end":201,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201896,"byte_end":201902,"line_start":205,"line_end":205,"column_start":8,"column_end":14},"name":"reduce","qualname":"::iter::plumbing::Reducer::reduce","value":"pub fn reduce(Self, Result, Result) -> Result","parent":{"krate":0,"index":1329},"children":[],"decl_id":null,"docs":" Reduce two final results into one; this is executed after a\n split.\n","sig":null,"attributes":[{"value":"/ Reduce two final results into one; this is executed after a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201810,"byte_end":201873,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/ split.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201878,"byte_end":201888,"line_start":204,"line_end":204,"column_start":5,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":1332},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202264,"byte_end":202281,"line_start":213,"line_end":213,"column_start":11,"column_end":28},"name":"UnindexedConsumer","qualname":"::iter::plumbing::UnindexedConsumer","value":"UnindexedConsumer<I>: Consumer<I>","parent":null,"children":[{"krate":0,"index":1334},{"krate":0,"index":1335}],"decl_id":null,"docs":" A stateless consumer can be freely copied. These consumers can be\n used like regular consumers, but they also support a\n `split_off_left` method that does not take an index to split, but\n simply splits at some arbitrary point (`for_each`, for example,\n produces an unindexed consumer).\n","sig":null,"attributes":[{"value":"/ A stateless consumer can be freely copied. These consumers can be","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":201952,"byte_end":202021,"line_start":208,"line_end":208,"column_start":1,"column_end":70}},{"value":"/ used like regular consumers, but they also support a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202022,"byte_end":202078,"line_start":209,"line_end":209,"column_start":1,"column_end":57}},{"value":"/ `split_off_left` method that does not take an index to split, but","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202079,"byte_end":202148,"line_start":210,"line_end":210,"column_start":1,"column_end":70}},{"value":"/ simply splits at some arbitrary point (`for_each`, for example,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202149,"byte_end":202216,"line_start":211,"line_end":211,"column_start":1,"column_end":68}},{"value":"/ produces an unindexed consumer).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202217,"byte_end":202253,"line_start":212,"line_end":212,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202757,"byte_end":202771,"line_start":221,"line_end":221,"column_start":8,"column_end":22},"name":"split_off_left","qualname":"::iter::plumbing::UnindexedConsumer::split_off_left","value":"pub fn split_off_left(&Self) -> Self","parent":{"krate":0,"index":1332},"children":[],"decl_id":null,"docs":" Splits off a \"left\" consumer and returns it. The `self`\n consumer should then be used to consume the \"right\" portion of\n the data. (The ordering matters for methods like find_first --\n values produced by the returned value are given precedence\n over values produced by `self`.) Once the left and right\n halves have been fully consumed, you should reduce the results\n with the result of `to_reducer`.\n","sig":null,"attributes":[{"value":"/ Splits off a \"left\" consumer and returns it. The `self`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202304,"byte_end":202363,"line_start":214,"line_end":214,"column_start":5,"column_end":64}},{"value":"/ consumer should then be used to consume the \"right\" portion of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202368,"byte_end":202434,"line_start":215,"line_end":215,"column_start":5,"column_end":71}},{"value":"/ the data. (The ordering matters for methods like find_first --","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202439,"byte_end":202505,"line_start":216,"line_end":216,"column_start":5,"column_end":71}},{"value":"/ values produced by the returned value are given precedence","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202510,"byte_end":202572,"line_start":217,"line_end":217,"column_start":5,"column_end":67}},{"value":"/ over values produced by `self`.) Once the left and right","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202577,"byte_end":202637,"line_start":218,"line_end":218,"column_start":5,"column_end":65}},{"value":"/ halves have been fully consumed, you should reduce the results","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202642,"byte_end":202708,"line_start":219,"line_end":219,"column_start":5,"column_end":71}},{"value":"/ with the result of `to_reducer`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202713,"byte_end":202749,"line_start":220,"line_end":220,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202893,"byte_end":202903,"line_start":225,"line_end":225,"column_start":8,"column_end":18},"name":"to_reducer","qualname":"::iter::plumbing::UnindexedConsumer::to_reducer","value":"pub fn to_reducer(&Self) -> Self::Reducer","parent":{"krate":0,"index":1332},"children":[],"decl_id":null,"docs":" Creates a reducer that can be used to combine the results from\n a split consumer.\n","sig":null,"attributes":[{"value":"/ Creates a reducer that can be used to combine the results from","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202793,"byte_end":202859,"line_start":223,"line_end":223,"column_start":5,"column_end":71}},{"value":"/ a split consumer.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202864,"byte_end":202885,"line_start":224,"line_end":224,"column_start":5,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":1336},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203380,"byte_end":203397,"line_start":236,"line_end":236,"column_start":11,"column_end":28},"name":"UnindexedProducer","qualname":"::iter::plumbing::UnindexedProducer","value":"UnindexedProducer: Send + Sized","parent":null,"children":[{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339}],"decl_id":null,"docs":" A variant on `Producer` which does not know its exact length or\n cannot represent it in a `usize`. These producers act like\n ordinary producers except that they cannot be told to split at a\n particular point. Instead, you just ask them to split 'somewhere'.","sig":null,"attributes":[{"value":"/ A variant on `Producer` which does not know its exact length or","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202932,"byte_end":202999,"line_start":228,"line_end":228,"column_start":1,"column_end":68}},{"value":"/ cannot represent it in a `usize`. These producers act like","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203000,"byte_end":203062,"line_start":229,"line_end":229,"column_start":1,"column_end":63}},{"value":"/ ordinary producers except that they cannot be told to split at a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203063,"byte_end":203131,"line_start":230,"line_end":230,"column_start":1,"column_end":69}},{"value":"/ particular point. Instead, you just ask them to split 'somewhere'.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203132,"byte_end":203202,"line_start":231,"line_end":231,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203203,"byte_end":203206,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ (In principle, `Producer` could extend this trait; however, it","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203207,"byte_end":203273,"line_start":233,"line_end":233,"column_start":1,"column_end":67}},{"value":"/ does not because to do so would require producers to carry their","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203274,"byte_end":203342,"line_start":234,"line_end":234,"column_start":1,"column_end":69}},{"value":"/ own length with them.)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203343,"byte_end":203369,"line_start":235,"line_end":235,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":1337},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203475,"byte_end":203479,"line_start":238,"line_end":238,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::plumbing::UnindexedProducer::Item","value":"type Item;","parent":{"krate":0,"index":1336},"children":[],"decl_id":null,"docs":" The type of item returned by this producer.\n","sig":null,"attributes":[{"value":"/ The type of item returned by this producer.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203418,"byte_end":203465,"line_start":237,"line_end":237,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203568,"byte_end":203573,"line_start":241,"line_end":241,"column_start":8,"column_end":13},"name":"split","qualname":"::iter::plumbing::UnindexedProducer::split","value":"pub fn split(Self) -> (Self, Option<Self>)","parent":{"krate":0,"index":1336},"children":[],"decl_id":null,"docs":" Split midway into a new producer if possible, otherwise return `None`.\n","sig":null,"attributes":[{"value":"/ Split midway into a new producer if possible, otherwise return `None`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203486,"byte_end":203560,"line_start":240,"line_end":240,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203756,"byte_end":203765,"line_start":245,"line_end":245,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::plumbing::UnindexedProducer::fold_with","value":"pub fn fold_with<F>(Self, F) -> F where F: Folder<Self::Item>","parent":{"krate":0,"index":1336},"children":[],"decl_id":null,"docs":" Iterate the producer, feeding each element to `folder`, and\n stop when the folder is full (or all elements have been consumed).\n","sig":null,"attributes":[{"value":"/ Iterate the producer, feeding each element to `folder`, and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203610,"byte_end":203673,"line_start":243,"line_end":243,"column_start":5,"column_end":68}},{"value":"/ stop when the folder is full (or all elements have been consumed).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203678,"byte_end":203748,"line_start":244,"line_end":244,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":1347},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207574,"byte_end":207580,"line_start":351,"line_end":351,"column_start":8,"column_end":14},"name":"bridge","qualname":"::iter::plumbing::bridge","value":"pub fn bridge<I, C>(I, C) -> C::Result where I: IndexedParallelIterator,\nC: Consumer<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" This helper function is used to \"connect\" a parallel iterator to a\n consumer. It will convert the `par_iter` into a producer P and\n then pull items from P and feed them to `consumer`, splitting and\n creating parallel threads as needed.","sig":null,"attributes":[{"value":"/ This helper function is used to \"connect\" a parallel iterator to a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":206995,"byte_end":207065,"line_start":340,"line_end":340,"column_start":1,"column_end":71}},{"value":"/ consumer. It will convert the `par_iter` into a producer P and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207066,"byte_end":207132,"line_start":341,"line_end":341,"column_start":1,"column_end":67}},{"value":"/ then pull items from P and feed them to `consumer`, splitting and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207133,"byte_end":207202,"line_start":342,"line_end":342,"column_start":1,"column_end":70}},{"value":"/ creating parallel threads as needed.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207203,"byte_end":207243,"line_start":343,"line_end":343,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207244,"byte_end":207247,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ This is useful when you are implementing your own parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207248,"byte_end":207310,"line_start":345,"line_end":345,"column_start":1,"column_end":63}},{"value":"/ iterators: it is often used as the definition of the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207311,"byte_end":207367,"line_start":346,"line_end":346,"column_start":1,"column_end":57}},{"value":"/ [`drive_unindexed`] or [`drive`] methods.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207368,"byte_end":207413,"line_start":347,"line_end":347,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207414,"byte_end":207417,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ [`drive_unindexed`]: ../trait.ParallelIterator.html#tymethod.drive_unindexed","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207418,"byte_end":207498,"line_start":349,"line_end":349,"column_start":1,"column_end":81}},{"value":"/ [`drive`]: ../trait.IndexedParallelIterator.html#tymethod.drive","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207499,"byte_end":207566,"line_start":350,"line_end":350,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":1360},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208826,"byte_end":208850,"line_start":391,"line_end":391,"column_start":8,"column_end":32},"name":"bridge_producer_consumer","qualname":"::iter::plumbing::bridge_producer_consumer","value":"pub fn bridge_producer_consumer<P, C>(usize, P, C) -> C::Result where\nP: Producer, C: Consumer<P::Item>","parent":null,"children":[],"decl_id":null,"docs":" This helper function is used to \"connect\" a producer and a\n consumer. You may prefer to call [`bridge`], which wraps this\n function. This function will draw items from `producer` and feed\n them to `consumer`, splitting and creating parallel tasks when\n needed.","sig":null,"attributes":[{"value":"/ This helper function is used to \"connect\" a producer and a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208188,"byte_end":208250,"line_start":378,"line_end":378,"column_start":1,"column_end":63}},{"value":"/ consumer. You may prefer to call [`bridge`], which wraps this","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208251,"byte_end":208316,"line_start":379,"line_end":379,"column_start":1,"column_end":66}},{"value":"/ function. This function will draw items from `producer` and feed","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208317,"byte_end":208385,"line_start":380,"line_end":380,"column_start":1,"column_end":69}},{"value":"/ them to `consumer`, splitting and creating parallel tasks when","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208386,"byte_end":208452,"line_start":381,"line_end":381,"column_start":1,"column_end":67}},{"value":"/ needed.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208453,"byte_end":208464,"line_start":382,"line_end":382,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208465,"byte_end":208468,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ This is useful when you are implementing your own parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208469,"byte_end":208531,"line_start":384,"line_end":384,"column_start":1,"column_end":63}},{"value":"/ iterators: it is often used as the definition of the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208532,"byte_end":208588,"line_start":385,"line_end":385,"column_start":1,"column_end":57}},{"value":"/ [`drive_unindexed`] or [`drive`] methods.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208589,"byte_end":208634,"line_start":386,"line_end":386,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208635,"byte_end":208638,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ [`bridge`]: fn.bridge.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208639,"byte_end":208669,"line_start":388,"line_end":388,"column_start":1,"column_end":31}},{"value":"/ [`drive_unindexed`]: ../trait.ParallelIterator.html#tymethod.drive_unindexed","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208670,"byte_end":208750,"line_start":389,"line_end":389,"column_start":1,"column_end":81}},{"value":"/ [`drive`]: ../trait.IndexedParallelIterator.html#tymethod.drive","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":208751,"byte_end":208818,"line_start":390,"line_end":390,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":1368},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":210626,"byte_end":210642,"line_start":446,"line_end":446,"column_start":8,"column_end":24},"name":"bridge_unindexed","qualname":"::iter::plumbing::bridge_unindexed","value":"pub fn bridge_unindexed<P, C>(P, C) -> C::Result where P: UnindexedProducer,\nC: UnindexedConsumer<P::Item>","parent":null,"children":[],"decl_id":null,"docs":" A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.","sig":null,"attributes":[{"value":"/ A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":210457,"byte_end":210547,"line_start":443,"line_end":443,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":210548,"byte_end":210551,"line_start":444,"line_end":444,"column_start":1,"column_end":4}},{"value":"/ [`bridge_producer_consumer`]: fn.bridge_producer_consumer.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":210552,"byte_end":210618,"line_start":445,"line_end":445,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":5994},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":212923,"byte_end":212930,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"TryFold","qualname":"::iter::try_fold::TryFold","value":"TryFold {  }","parent":null,"children":[{"krate":0,"index":5999},{"krate":0,"index":6000},{"krate":0,"index":6001},{"krate":0,"index":6002}],"decl_id":null,"docs":" `TryFold` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`try_fold()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `TryFold` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":212523,"byte_end":212618,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ This struct is created by the [`try_fold()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":212619,"byte_end":212698,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":212699,"byte_end":212702,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`try_fold()`]: trait.ParallelIterator.html#method.try_fold","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":212703,"byte_end":212766,"line_start":28,"line_end":28,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":212767,"byte_end":212820,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":212821,"byte_end":212894,"line_start":30,"line_end":30,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6009},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":216896,"byte_end":216907,"line_start":190,"line_end":190,"column_start":12,"column_end":23},"name":"TryFoldWith","qualname":"::iter::try_fold::TryFoldWith","value":"TryFoldWith {  }","parent":null,"children":[{"krate":0,"index":6013},{"krate":0,"index":6014},{"krate":0,"index":6015}],"decl_id":null,"docs":" `TryFoldWith` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `TryFoldWith` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":216477,"byte_end":216576,"line_start":183,"line_end":183,"column_start":1,"column_end":100}},{"value":"/ This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":216577,"byte_end":216661,"line_start":184,"line_end":184,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":216662,"byte_end":216665,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ [`try_fold_with()`]: trait.ParallelIterator.html#method.try_fold_with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":216666,"byte_end":216739,"line_start":186,"line_end":186,"column_start":1,"column_end":74}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":216740,"byte_end":216793,"line_start":187,"line_end":187,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":216794,"byte_end":216867,"line_start":188,"line_end":188,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6021},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":222157,"byte_end":222161,"line_start":13,"line_end":13,"column_start":12,"column_end":16},"name":"Skip","qualname":"::iter::skip::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":6023},{"krate":0,"index":6024}],"decl_id":null,"docs":" `Skip` is an iterator that skips over the first `n` elements.\n This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Skip` is an iterator that skips over the first `n` elements.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":221764,"byte_end":221829,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":221830,"byte_end":221912,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":221913,"byte_end":221916,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`skip()`]: trait.IndexedParallelIterator.html#method.skip","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":221917,"byte_end":221979,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":221980,"byte_end":222047,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":222048,"byte_end":222121,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1776},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234094,"byte_end":234099,"line_start":106,"line_end":106,"column_start":8,"column_end":13},"name":"split","qualname":"::iter::splitter::split","value":"pub fn split<D, S>(D, S) -> Split<D, S> where D: Send, S: Fn(D) ->\n(D, Option<D>) + Sync","parent":null,"children":[],"decl_id":null,"docs":" The `split` function takes arbitrary data and a closure that knows how to\n split it, and turns this into a `ParallelIterator`.","sig":null,"attributes":[{"value":"/ The `split` function takes arbitrary data and a closure that knows how to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230210,"byte_end":230287,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ split it, and turns this into a `ParallelIterator`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230288,"byte_end":230343,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230344,"byte_end":230347,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230348,"byte_end":230362,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230363,"byte_end":230366,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ As a simple example, Rayon can recursively split ranges of indices","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230367,"byte_end":230437,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230438,"byte_end":230441,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230442,"byte_end":230449,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use rayon::iter;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230450,"byte_end":230470,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230471,"byte_end":230497,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ use std::ops::Range;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230498,"byte_end":230522,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230523,"byte_end":230526,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230527,"byte_end":230530,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // We define a range of indices as follows","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230531,"byte_end":230577,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/ type Range1D = Range<usize>;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230578,"byte_end":230610,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230611,"byte_end":230614,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // Splitting it in two can be done like this","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230615,"byte_end":230663,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/ fn split_range1(r: Range1D) -> (Range1D, Option<Range1D>) {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230664,"byte_end":230727,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/     // We are mathematically unable to split the range if there is only","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230728,"byte_end":230803,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/     // one point inside of it, but we could stop splitting before that.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230804,"byte_end":230879,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/     if r.end - r.start <= 1 { return (r, None); }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230880,"byte_end":230933,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230934,"byte_end":230937,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/     // Here, our range is considered large enough to be splittable","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":230938,"byte_end":231008,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/     let midpoint = r.start + (r.end - r.start) / 2;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231009,"byte_end":231064,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/     (r.start..midpoint, Some(midpoint..r.end))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231065,"byte_end":231115,"line_start":30,"line_end":30,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231116,"byte_end":231121,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231122,"byte_end":231125,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // By using iter::split, Rayon will split the range until it has enough work","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231126,"byte_end":231206,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ // to feed the CPU cores, then give us the resulting sub-ranges","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231207,"byte_end":231274,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/ iter::split(0..4096, split_range1).for_each(|sub_range| {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231275,"byte_end":231336,"line_start":35,"line_end":35,"column_start":1,"column_end":62}},{"value":"/     // As our initial range had a power-of-two size, the final sub-ranges","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231337,"byte_end":231414,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/     // should have power-of-two sizes too","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231415,"byte_end":231460,"line_start":37,"line_end":37,"column_start":1,"column_end":46}},{"value":"/     assert!((sub_range.end - sub_range.start).is_power_of_two());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231461,"byte_end":231530,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/ });","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231531,"byte_end":231538,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231539,"byte_end":231546,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231547,"byte_end":231550,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This recursive splitting can be extended to two or three dimensions,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231551,"byte_end":231623,"line_start":42,"line_end":42,"column_start":1,"column_end":73}},{"value":"/ to reproduce a classic \"block-wise\" parallelization scheme of graphics and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231624,"byte_end":231702,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ numerical simulations:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231703,"byte_end":231729,"line_start":44,"line_end":44,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231730,"byte_end":231733,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231734,"byte_end":231741,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ # use rayon::iter;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231742,"byte_end":231764,"line_start":47,"line_end":47,"column_start":1,"column_end":23}},{"value":"/ # use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231765,"byte_end":231793,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/ # use std::ops::Range;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231794,"byte_end":231820,"line_start":49,"line_end":49,"column_start":1,"column_end":27}},{"value":"/ # type Range1D = Range<usize>;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231821,"byte_end":231855,"line_start":50,"line_end":50,"column_start":1,"column_end":35}},{"value":"/ # fn split_range1(r: Range1D) -> (Range1D, Option<Range1D>) {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231856,"byte_end":231921,"line_start":51,"line_end":51,"column_start":1,"column_end":66}},{"value":"/ #     if r.end - r.start <= 1 { return (r, None); }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231922,"byte_end":231977,"line_start":52,"line_end":52,"column_start":1,"column_end":56}},{"value":"/ #     let midpoint = r.start + (r.end - r.start) / 2;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":231978,"byte_end":232035,"line_start":53,"line_end":53,"column_start":1,"column_end":58}},{"value":"/ #     (r.start..midpoint, Some(midpoint..r.end))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232036,"byte_end":232088,"line_start":54,"line_end":54,"column_start":1,"column_end":53}},{"value":"/ # }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232089,"byte_end":232096,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232097,"byte_end":232102,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/ // A two-dimensional range of indices can be built out of two 1D ones","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232103,"byte_end":232176,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ struct Range2D {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232177,"byte_end":232197,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/     // Range of horizontal indices","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232198,"byte_end":232236,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/     pub rx: Range1D,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232237,"byte_end":232261,"line_start":60,"line_end":60,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232262,"byte_end":232265,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/     // Range of vertical indices","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232266,"byte_end":232302,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/     pub ry: Range1D,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232303,"byte_end":232327,"line_start":63,"line_end":63,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232328,"byte_end":232333,"line_start":64,"line_end":64,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232334,"byte_end":232337,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ // We want to recursively split them by the largest dimension until we have","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232338,"byte_end":232417,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/ // enough sub-ranges to feed our mighty multi-core CPU. This function","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232418,"byte_end":232491,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ // carries out one such split.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232492,"byte_end":232526,"line_start":68,"line_end":68,"column_start":1,"column_end":35}},{"value":"/ fn split_range2(r2: Range2D) -> (Range2D, Option<Range2D>) {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232527,"byte_end":232591,"line_start":69,"line_end":69,"column_start":1,"column_end":65}},{"value":"/     // Decide on which axis (horizontal/vertical) the range should be split","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232592,"byte_end":232671,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/     let width = r2.rx.end - r2.rx.start;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232672,"byte_end":232716,"line_start":71,"line_end":71,"column_start":1,"column_end":45}},{"value":"/     let height = r2.ry.end - r2.ry.start;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232717,"byte_end":232762,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/     if width >= height {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232763,"byte_end":232791,"line_start":73,"line_end":73,"column_start":1,"column_end":29}},{"value":"/         // This is a wide range, split it on the horizontal axis","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232792,"byte_end":232860,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/         let (split_rx, ry) = (split_range1(r2.rx), r2.ry);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232861,"byte_end":232923,"line_start":75,"line_end":75,"column_start":1,"column_end":63}},{"value":"/         let out1 = Range2D {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232924,"byte_end":232956,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/             rx: split_rx.0,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232957,"byte_end":232988,"line_start":77,"line_end":77,"column_start":1,"column_end":32}},{"value":"/             ry: ry.clone(),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":232989,"byte_end":233020,"line_start":78,"line_end":78,"column_start":1,"column_end":32}},{"value":"/         };","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233021,"byte_end":233035,"line_start":79,"line_end":79,"column_start":1,"column_end":15}},{"value":"/         let out2 = split_rx.1.map(|rx| Range2D { rx, ry });","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233036,"byte_end":233099,"line_start":80,"line_end":80,"column_start":1,"column_end":64}},{"value":"/         (out1, out2)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233100,"byte_end":233124,"line_start":81,"line_end":81,"column_start":1,"column_end":25}},{"value":"/     } else {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233125,"byte_end":233141,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/         // This is a tall range, split it on the vertical axis","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233142,"byte_end":233208,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/         let (rx, split_ry) = (r2.rx, split_range1(r2.ry));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233209,"byte_end":233271,"line_start":84,"line_end":84,"column_start":1,"column_end":63}},{"value":"/         let out1 = Range2D {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233272,"byte_end":233304,"line_start":85,"line_end":85,"column_start":1,"column_end":33}},{"value":"/             rx: rx.clone(),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233305,"byte_end":233336,"line_start":86,"line_end":86,"column_start":1,"column_end":32}},{"value":"/             ry: split_ry.0,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233337,"byte_end":233368,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"/         };","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233369,"byte_end":233383,"line_start":88,"line_end":88,"column_start":1,"column_end":15}},{"value":"/         let out2 = split_ry.1.map(|ry| Range2D { rx, ry, });","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233384,"byte_end":233448,"line_start":89,"line_end":89,"column_start":1,"column_end":65}},{"value":"/         (out1, out2)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233449,"byte_end":233473,"line_start":90,"line_end":90,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233474,"byte_end":233483,"line_start":91,"line_end":91,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233484,"byte_end":233489,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233490,"byte_end":233493,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ // Again, rayon can handle the recursive splitting for us","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233494,"byte_end":233555,"line_start":94,"line_end":94,"column_start":1,"column_end":62}},{"value":"/ let range = Range2D { rx: 0..800, ry: 0..600 };","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233556,"byte_end":233607,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ iter::split(range, split_range2).for_each(|sub_range| {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233608,"byte_end":233667,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/     // If the sub-ranges were indeed split by the largest dimension, then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233668,"byte_end":233745,"line_start":97,"line_end":97,"column_start":1,"column_end":78}},{"value":"/     // if no dimension was twice larger than the other initially, this","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233746,"byte_end":233820,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/     // property will remain true in the final sub-ranges.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233821,"byte_end":233882,"line_start":99,"line_end":99,"column_start":1,"column_end":62}},{"value":"/     let width = sub_range.rx.end - sub_range.rx.start;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233883,"byte_end":233941,"line_start":100,"line_end":100,"column_start":1,"column_end":59}},{"value":"/     let height = sub_range.ry.end - sub_range.ry.start;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":233942,"byte_end":234001,"line_start":101,"line_end":101,"column_start":1,"column_end":60}},{"value":"/     assert!((width / 2 <= height) && (height / 2 <= width));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234002,"byte_end":234066,"line_start":102,"line_end":102,"column_start":1,"column_end":65}},{"value":"/ });","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234067,"byte_end":234074,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234075,"byte_end":234082,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234083,"byte_end":234086,"line_start":105,"line_end":105,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6031},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234436,"byte_end":234441,"line_start":119,"line_end":119,"column_start":12,"column_end":17},"name":"Split","qualname":"::iter::splitter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":6034},{"krate":0,"index":6035}],"decl_id":null,"docs":" `Split` is a parallel iterator using arbitrary data and a splitting function.\n This struct is created by the [`split()`] function.","sig":null,"attributes":[{"value":"/ `Split` is a parallel iterator using arbitrary data and a splitting function.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234235,"byte_end":234316,"line_start":114,"line_end":114,"column_start":1,"column_end":82}},{"value":"/ This struct is created by the [`split()`] function.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234317,"byte_end":234372,"line_start":115,"line_end":115,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234373,"byte_end":234376,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ [`split()`]: fn.split.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234377,"byte_end":234407,"line_start":117,"line_end":117,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6040},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":236119,"byte_end":236123,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"Take","qualname":"::iter::take::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":6042},{"krate":0,"index":6043}],"decl_id":null,"docs":" `Take` is an iterator that iterates over the first `n` elements.\n This struct is created by the [`take()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Take` is an iterator that iterates over the first `n` elements.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":235723,"byte_end":235791,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ This struct is created by the [`take()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":235792,"byte_end":235874,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":235875,"byte_end":235878,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`take()`]: trait.IndexedParallelIterator.html#method.take","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":235879,"byte_end":235941,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":235942,"byte_end":236009,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":236010,"byte_end":236083,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6050},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":238147,"byte_end":238150,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"Map","qualname":"::iter::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":6053},{"krate":0,"index":6054}],"decl_id":null,"docs":" `Map` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Map` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":237773,"byte_end":237853,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":237854,"byte_end":237857,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":237858,"byte_end":237932,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":237933,"byte_end":237936,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`map()`]: trait.ParallelIterator.html#method.map","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":237937,"byte_end":237990,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":237991,"byte_end":238044,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":238045,"byte_end":238118,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6059},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":244136,"byte_end":244143,"line_start":14,"line_end":14,"column_start":12,"column_end":19},"name":"MapWith","qualname":"::iter::map_with::MapWith","value":"MapWith {  }","parent":null,"children":[{"krate":0,"index":6063},{"krate":0,"index":6064},{"krate":0,"index":6065}],"decl_id":null,"docs":" `MapWith` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `MapWith` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":243743,"byte_end":243827,"line_start":6,"line_end":6,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":243828,"byte_end":243831,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map_with()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":243832,"byte_end":243911,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":243912,"byte_end":243915,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`map_with()`]: trait.ParallelIterator.html#method.map_with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":243916,"byte_end":243979,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":243980,"byte_end":244033,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":244034,"byte_end":244107,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6071},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":252219,"byte_end":252226,"line_start":346,"line_end":346,"column_start":12,"column_end":19},"name":"MapInit","qualname":"::iter::map_with::MapInit","value":"MapInit {  }","parent":null,"children":[{"krate":0,"index":6075},{"krate":0,"index":6076},{"krate":0,"index":6077}],"decl_id":null,"docs":" `MapInit` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `MapInit` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":251826,"byte_end":251910,"line_start":338,"line_end":338,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":251911,"byte_end":251914,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map_init()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":251915,"byte_end":251994,"line_start":340,"line_end":340,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":251995,"byte_end":251998,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ [`map_init()`]: trait.ParallelIterator.html#method.map_init","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":251999,"byte_end":252062,"line_start":342,"line_end":342,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":252063,"byte_end":252116,"line_start":343,"line_end":343,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":252117,"byte_end":252190,"line_start":344,"line_end":344,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6083},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":258419,"byte_end":258422,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"Zip","qualname":"::iter::zip::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":6086},{"krate":0,"index":6087}],"decl_id":null,"docs":" `Zip` is an iterator that zips up `a` and `b` into a single iterator\n of pairs. This struct is created by the [`zip()`] method on\n [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Zip` is an iterator that zips up `a` and `b` into a single iterator","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":258008,"byte_end":258080,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ of pairs. This struct is created by the [`zip()`] method on","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":258081,"byte_end":258144,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/ [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":258145,"byte_end":258176,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":258177,"byte_end":258180,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`zip()`]: trait.IndexedParallelIterator.html#method.zip","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":258181,"byte_end":258241,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":258242,"byte_end":258309,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":258310,"byte_end":258383,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6096},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":262408,"byte_end":262413,"line_start":14,"line_end":14,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::iter::zip_eq::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":6099}],"decl_id":null,"docs":" An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal\n length simultaneously.","sig":null,"attributes":[{"value":"/ An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":261913,"byte_end":261998,"line_start":4,"line_end":4,"column_start":1,"column_end":86}},{"value":"/ length simultaneously.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":261999,"byte_end":262025,"line_start":5,"line_end":5,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":262026,"byte_end":262029,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`zip_eq`] method on [`IndexedParallelIterator`],","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":262030,"byte_end":262113,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"/ see its documentation for more information.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":262114,"byte_end":262161,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":262162,"byte_end":262165,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`zip_eq`]: trait.IndexedParallelIterator.html#method.zip_eq","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":262166,"byte_end":262230,"line_start":10,"line_end":10,"column_start":1,"column_end":65}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":262231,"byte_end":262298,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":262299,"byte_end":262372,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6108},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":264160,"byte_end":264170,"line_start":14,"line_end":14,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::iter::interleave::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":6111},{"krate":0,"index":6112}],"decl_id":null,"docs":" `Interleave` is an iterator that interleaves elements of iterators\n `i` and `j` in one continuous iterator. This struct is created by\n the [`interleave()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Interleave` is an iterator that interleaves elements of iterators","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":263700,"byte_end":263770,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ `i` and `j` in one continuous iterator. This struct is created by","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":263771,"byte_end":263840,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ the [`interleave()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":263841,"byte_end":263903,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":263904,"byte_end":263907,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`interleave()`]: trait.IndexedParallelIterator.html#method.interleave","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":263908,"byte_end":263982,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":263983,"byte_end":264050,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":264051,"byte_end":264124,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6121},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":273170,"byte_end":273188,"line_start":15,"line_end":15,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::iter::interleave_shortest::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":6124}],"decl_id":null,"docs":" `InterleaveShortest` is an iterator that works similarly to\n `Interleave`, but this version stops returning elements once one\n of the iterators run out.","sig":null,"attributes":[{"value":"/ `InterleaveShortest` is an iterator that works similarly to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":272626,"byte_end":272689,"line_start":4,"line_end":4,"column_start":1,"column_end":64}},{"value":"/ `Interleave`, but this version stops returning elements once one","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":272690,"byte_end":272758,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ of the iterators run out.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":272759,"byte_end":272788,"line_start":6,"line_end":6,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":272789,"byte_end":272792,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`interleave_shortest()`] method on","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":272793,"byte_end":272862,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ [`IndexedParallelIterator`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":272863,"byte_end":272895,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":272896,"byte_end":272899,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`interleave_shortest()`]: trait.IndexedParallelIterator.html#method.interleave_shortest","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":272900,"byte_end":272992,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":272993,"byte_end":273060,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":273061,"byte_end":273134,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6133},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":275406,"byte_end":275417,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::iter::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":6135},{"krate":0,"index":6136}],"decl_id":null,"docs":" `Intersperse` is an iterator that inserts a particular item between each\n item of the adapted iterator.  This struct is created by the\n [`intersperse()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Intersperse` is an iterator that inserts a particular item between each","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":274974,"byte_end":275050,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ item of the adapted iterator.  This struct is created by the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":275051,"byte_end":275115,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ [`intersperse()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":275116,"byte_end":275168,"line_start":8,"line_end":8,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":275169,"byte_end":275172,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`intersperse()`]: trait.ParallelIterator.html#method.intersperse","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":275173,"byte_end":275242,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":275243,"byte_end":275296,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":275297,"byte_end":275370,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6143},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285635,"byte_end":285641,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Update","qualname":"::iter::update::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":6146},{"krate":0,"index":6147}],"decl_id":null,"docs":" `Update` is an iterator that mutates the elements of an\n underlying iterator before they are yielded.","sig":null,"attributes":[{"value":"/ `Update` is an iterator that mutates the elements of an","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285224,"byte_end":285283,"line_start":6,"line_end":6,"column_start":1,"column_end":60}},{"value":"/ underlying iterator before they are yielded.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285284,"byte_end":285332,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285333,"byte_end":285336,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`update()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285337,"byte_end":285414,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285415,"byte_end":285418,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`update()`]: trait.ParallelIterator.html#method.update","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285419,"byte_end":285478,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285479,"byte_end":285532,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285533,"byte_end":285606,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6165},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":294355,"byte_end":294358,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Rev","qualname":"::iter::rev::Rev","value":"Rev {  }","parent":null,"children":[{"krate":0,"index":6167}],"decl_id":null,"docs":" `Rev` is an iterator that produces elements in reverse order. This struct\n is created by the [`rev()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Rev` is an iterator that produces elements in reverse order. This struct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":293965,"byte_end":294042,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ is created by the [`rev()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":294043,"byte_end":294112,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":294113,"byte_end":294116,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`rev()`]: trait.IndexedParallelIterator.html#method.rev","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":294117,"byte_end":294177,"line_start":8,"line_end":8,"column_start":1,"column_end":61}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":294178,"byte_end":294245,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":294246,"byte_end":294319,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6174},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":297184,"byte_end":297190,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"MinLen","qualname":"::iter::len::MinLen","value":"MinLen {  }","parent":null,"children":[{"krate":0,"index":6176},{"krate":0,"index":6177}],"decl_id":null,"docs":" `MinLen` is an iterator that imposes a minimum length on iterator splits.\n This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `MinLen` is an iterator that imposes a minimum length on iterator splits.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":296770,"byte_end":296847,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":296848,"byte_end":296933,"line_start":6,"line_end":6,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":296934,"byte_end":296937,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`min_len()`]: trait.IndexedParallelIterator.html#method.min_len","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":296938,"byte_end":297006,"line_start":8,"line_end":8,"column_start":1,"column_end":69}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":297007,"byte_end":297074,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":297075,"byte_end":297148,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6184},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":300268,"byte_end":300274,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"MaxLen","qualname":"::iter::len::MaxLen","value":"MaxLen {  }","parent":null,"children":[{"krate":0,"index":6186},{"krate":0,"index":6187}],"decl_id":null,"docs":" `MaxLen` is an iterator that imposes a maximum length on iterator splits.\n This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `MaxLen` is an iterator that imposes a maximum length on iterator splits.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":299854,"byte_end":299931,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/ This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":299932,"byte_end":300017,"line_start":140,"line_end":140,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":300018,"byte_end":300021,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ [`max_len()`]: trait.IndexedParallelIterator.html#method.max_len","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":300022,"byte_end":300090,"line_start":142,"line_end":142,"column_start":1,"column_end":69}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":300091,"byte_end":300158,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":300159,"byte_end":300232,"line_start":144,"line_end":144,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6194},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":303382,"byte_end":303388,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Cloned","qualname":"::iter::cloned::Cloned","value":"Cloned {  }","parent":null,"children":[{"krate":0,"index":6196}],"decl_id":null,"docs":" `Cloned` is an iterator that clones the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Cloned` is an iterator that clones the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":302993,"byte_end":303072,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":303073,"byte_end":303076,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`cloned()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":303077,"byte_end":303154,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":303155,"byte_end":303158,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`cloned()`]: trait.ParallelIterator.html#method.cloned","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":303159,"byte_end":303218,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":303219,"byte_end":303272,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":303273,"byte_end":303346,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6203},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":308333,"byte_end":308339,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Copied","qualname":"::iter::copied::Copied","value":"Copied {  }","parent":null,"children":[{"krate":0,"index":6205}],"decl_id":null,"docs":" `Copied` is an iterator that copies the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Copied` is an iterator that copies the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":307944,"byte_end":308023,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":308024,"byte_end":308027,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`copied()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":308028,"byte_end":308105,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":308106,"byte_end":308109,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`copied()`]: trait.ParallelIterator.html#method.copied","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":308110,"byte_end":308169,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":308170,"byte_end":308223,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":308224,"byte_end":308297,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6212},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":317744,"byte_end":317751,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::iter::inspect::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":6215},{"krate":0,"index":6216}],"decl_id":null,"docs":" `Inspect` is an iterator that calls a function with a reference to each\n element before yielding it.","sig":null,"attributes":[{"value":"/ `Inspect` is an iterator that calls a function with a reference to each","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":317331,"byte_end":317406,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ element before yielding it.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":317407,"byte_end":317438,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":317439,"byte_end":317442,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`inspect()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":317443,"byte_end":317521,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":317522,"byte_end":317525,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`inspect()`]: trait.ParallelIterator.html#method.inspect","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":317526,"byte_end":317587,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":317588,"byte_end":317641,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":317642,"byte_end":317715,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6221},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":323916,"byte_end":323925,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"PanicFuse","qualname":"::iter::panic_fuse::PanicFuse","value":"PanicFuse {  }","parent":null,"children":[{"krate":0,"index":6223}],"decl_id":null,"docs":" `PanicFuse` is an adaptor that wraps an iterator with a fuse in case\n of panics, to halt all threads as soon as possible.","sig":null,"attributes":[{"value":"/ `PanicFuse` is an adaptor that wraps an iterator with a fuse in case","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":323466,"byte_end":323538,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ of panics, to halt all threads as soon as possible.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":323539,"byte_end":323594,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":323595,"byte_end":323598,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`panic_fuse()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":323599,"byte_end":323680,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":323681,"byte_end":323684,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`panic_fuse()`]: trait.ParallelIterator.html#method.panic_fuse","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":323685,"byte_end":323752,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":323753,"byte_end":323806,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":323807,"byte_end":323880,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6237},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331595,"byte_end":331604,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::iter::while_some::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":6239}],"decl_id":null,"docs":" `WhileSome` is an iterator that yields the `Some` elements of an iterator,\n halting as soon as any `None` is produced.","sig":null,"attributes":[{"value":"/ `WhileSome` is an iterator that yields the `Some` elements of an iterator,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331148,"byte_end":331226,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ halting as soon as any `None` is produced.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331227,"byte_end":331273,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331274,"byte_end":331277,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`while_some()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331278,"byte_end":331359,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331360,"byte_end":331363,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`while_some()`]: trait.ParallelIterator.html#method.while_some","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331364,"byte_end":331431,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331432,"byte_end":331485,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331486,"byte_end":331559,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6246},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":344814,"byte_end":344820,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"Repeat","qualname":"::iter::repeat::Repeat","value":"Repeat {  }","parent":null,"children":[{"krate":0,"index":6248}],"decl_id":null,"docs":" Iterator adaptor for [the `repeat()` function](fn.repeat.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `repeat()` function](fn.repeat.html).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":344711,"byte_end":344778,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":3692},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345372,"byte_end":345378,"line_start":26,"line_end":26,"column_start":8,"column_end":14},"name":"repeat","qualname":"::iter::repeat::repeat","value":"pub fn repeat<T: Clone + Send>(T) -> Repeat<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that endlessly repeats `elt` (by\n cloning it). Note that this iterator has \"infinite\" length, so\n typically you would want to use `zip` or `take` or some other\n means to shorten it, or consider using\n [the `repeatn()` function](fn.repeatn.html) instead.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that endlessly repeats `elt` (by","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":344859,"byte_end":344923,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/ cloning it). Note that this iterator has \"infinite\" length, so","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":344924,"byte_end":344990,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/ typically you would want to use `zip` or `take` or some other","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":344991,"byte_end":345056,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/ means to shorten it, or consider using","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345057,"byte_end":345099,"line_start":15,"line_end":15,"column_start":1,"column_end":43}},{"value":"/ [the `repeatn()` function](fn.repeatn.html) instead.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345100,"byte_end":345156,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345157,"byte_end":345160,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345161,"byte_end":345175,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345176,"byte_end":345179,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345180,"byte_end":345187,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345188,"byte_end":345214,"line_start":21,"line_end":21,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::repeat;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345215,"byte_end":345243,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ let x: Vec<(i32, i32)> = repeat(22).zip(0..3).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345244,"byte_end":345304,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(x, vec![(22, 0), (22, 1), (22, 2)]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345305,"byte_end":345356,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345357,"byte_end":345364,"line_start":25,"line_end":25,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3696},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345775,"byte_end":345779,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"name":"take","qualname":"<Repeat<T>>::take","value":"pub fn take(Self, usize) -> RepeatN<T>","parent":null,"children":[],"decl_id":null,"docs":" Take only `n` repeats of the element, similar to the general\n [`take()`](trait.IndexedParallelIterator.html#method.take).","sig":null,"attributes":[{"value":"/ Take only `n` repeats of the element, similar to the general","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345501,"byte_end":345565,"line_start":34,"line_end":34,"column_start":5,"column_end":69}},{"value":"/ [`take()`](trait.IndexedParallelIterator.html#method.take).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345570,"byte_end":345633,"line_start":35,"line_end":35,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345638,"byte_end":345641,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The resulting `RepeatN` is an `IndexedParallelIterator`, allowing","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345646,"byte_end":345715,"line_start":37,"line_end":37,"column_start":5,"column_end":74}},{"value":"/ more functionality than `Repeat` alone.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345720,"byte_end":345763,"line_start":38,"line_end":38,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3697},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":346039,"byte_end":346042,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"zip","qualname":"<Repeat<T>>::zip","value":"pub fn zip<Z>(Self, Z) -> Zip<RepeatN<T>, Z::Iter> where\nZ: IntoParallelIterator, Z::Iter: IndexedParallelIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate tuples repeating the element with items from another\n iterator, similar to the general\n [`zip()`](trait.IndexedParallelIterator.html#method.zip).\n","sig":null,"attributes":[{"value":"/ Iterate tuples repeating the element with items from another","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345856,"byte_end":345920,"line_start":43,"line_end":43,"column_start":5,"column_end":69}},{"value":"/ iterator, similar to the general","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345925,"byte_end":345961,"line_start":44,"line_end":44,"column_start":5,"column_end":41}},{"value":"/ [`zip()`](trait.IndexedParallelIterator.html#method.zip).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345966,"byte_end":346027,"line_start":45,"line_end":45,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":6255},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347311,"byte_end":347318,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::iter::repeat::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":6257},{"krate":0,"index":6258}],"decl_id":null,"docs":" Iterator adaptor for [the `repeatn()` function](fn.repeatn.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `repeatn()` function](fn.repeatn.html).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347206,"byte_end":347275,"line_start":101,"line_end":101,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":3713},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347683,"byte_end":347690,"line_start":119,"line_end":119,"column_start":8,"column_end":15},"name":"repeatn","qualname":"::iter::repeat::repeatn","value":"pub fn repeatn<T: Clone + Send>(T, usize) -> RepeatN<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces `n` repeats of `elt`\n (by cloning it).","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces `n` repeats of `elt`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347375,"byte_end":347441,"line_start":108,"line_end":108,"column_start":1,"column_end":67}},{"value":"/ (by cloning it).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347442,"byte_end":347462,"line_start":109,"line_end":109,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347463,"byte_end":347466,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347467,"byte_end":347481,"line_start":111,"line_end":111,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347482,"byte_end":347485,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347486,"byte_end":347493,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347494,"byte_end":347520,"line_start":114,"line_end":114,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::repeatn;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347521,"byte_end":347550,"line_start":115,"line_end":115,"column_start":1,"column_end":30}},{"value":"/ let x: Vec<(i32, i32)> = repeatn(22, 3).zip(0..3).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347551,"byte_end":347615,"line_start":116,"line_end":116,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(x, vec![(22, 0), (22, 1), (22, 2)]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347616,"byte_end":347667,"line_start":117,"line_end":117,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347668,"byte_end":347675,"line_start":118,"line_end":118,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":3758},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":350527,"byte_end":350531,"line_start":9,"line_end":9,"column_start":10,"column_end":14},"name":"Left","qualname":"::iter::unzip::UnzipOp::Left","value":"type Left: Send;","parent":{"krate":0,"index":3756},"children":[],"decl_id":null,"docs":" The type of item expected by the left consumer.\n","sig":null,"attributes":[{"value":"/ The type of item expected by the left consumer.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":350466,"byte_end":350517,"line_start":8,"line_end":8,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":3759},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":350606,"byte_end":350611,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Right","qualname":"::iter::unzip::UnzipOp::Right","value":"type Right: Send;","parent":{"krate":0,"index":3756},"children":[],"decl_id":null,"docs":" The type of item expected by the right consumer.\n","sig":null,"attributes":[{"value":"/ The type of item expected by the right consumer.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":350544,"byte_end":350596,"line_start":11,"line_end":11,"column_start":5,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":3975},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362773,"byte_end":362778,"line_start":25,"line_end":25,"column_start":8,"column_end":13},"name":"empty","qualname":"::iter::empty::empty","value":"pub fn empty<T: Send>() -> Empty<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces nothing.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces nothing.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362355,"byte_end":362409,"line_start":8,"line_end":8,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362410,"byte_end":362413,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This admits no parallelism on its own, but it could be used for code that","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362414,"byte_end":362491,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"/ deals with generic parallel iterators.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362492,"byte_end":362534,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362535,"byte_end":362538,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362539,"byte_end":362553,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362554,"byte_end":362557,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362558,"byte_end":362565,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362566,"byte_end":362592,"line_start":16,"line_end":16,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::empty;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362593,"byte_end":362620,"line_start":17,"line_end":17,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362621,"byte_end":362624,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let pi = (0..1234).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362625,"byte_end":362663,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/     .chain(empty())","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362664,"byte_end":362687,"line_start":20,"line_end":20,"column_start":1,"column_end":24}},{"value":"/     .chain(1234..10_000);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362688,"byte_end":362717,"line_start":21,"line_end":21,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362718,"byte_end":362721,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pi.count(), 10_000);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362722,"byte_end":362757,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362758,"byte_end":362765,"line_start":24,"line_end":24,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3977},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362931,"byte_end":362936,"line_start":32,"line_end":32,"column_start":12,"column_end":17},"name":"Empty","qualname":"::iter::empty::Empty","value":"Empty {  }","parent":null,"children":[{"krate":0,"index":3979}],"decl_id":null,"docs":" Iterator adaptor for [the `empty()` function](fn.empty.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `empty()` function](fn.empty.html).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":362854,"byte_end":362919,"line_start":31,"line_end":31,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":4021},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":365104,"byte_end":365108,"line_start":24,"line_end":24,"column_start":8,"column_end":12},"name":"once","qualname":"::iter::once::once","value":"pub fn once<T: Send>(T) -> Once<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces an element exactly once.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces an element exactly once.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364462,"byte_end":364532,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364533,"byte_end":364536,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This admits no parallelism on its own, but it could be chained to existing","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364537,"byte_end":364615,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ parallel iterators to extend their contents, or otherwise used for any code","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364616,"byte_end":364695,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ that deals with generic parallel iterators.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364696,"byte_end":364743,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364744,"byte_end":364747,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364748,"byte_end":364762,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364763,"byte_end":364766,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364767,"byte_end":364774,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364775,"byte_end":364801,"line_start":13,"line_end":13,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::once;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364802,"byte_end":364828,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364829,"byte_end":364832,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ let pi = (0..1234).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364833,"byte_end":364871,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/     .chain(once(-1))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364872,"byte_end":364896,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/     .chain(1234..10_000);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364897,"byte_end":364926,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364927,"byte_end":364930,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pi.clone().count(), 10_001);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364931,"byte_end":364974,"line_start":20,"line_end":20,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(pi.clone().filter(|&x| x < 0).count(), 1);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":364975,"byte_end":365032,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(pi.position_any(|x| x < 0), Some(1234));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":365033,"byte_end":365088,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":365089,"byte_end":365096,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":6265},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":365260,"byte_end":365264,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Once","qualname":"::iter::once::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":6267}],"decl_id":null,"docs":" Iterator adaptor for [the `once()` function](fn.once.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `once()` function](fn.once.html).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":365161,"byte_end":365224,"line_start":28,"line_end":28,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":4043},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29504,"byte_end":29524,"line_start":195,"line_end":195,"column_start":11,"column_end":31},"name":"IntoParallelIterator","qualname":"::iter::IntoParallelIterator","value":"IntoParallelIterator","parent":null,"children":[{"krate":0,"index":4044},{"krate":0,"index":4045},{"krate":0,"index":4046}],"decl_id":null,"docs":" `IntoParallelIterator` implements the conversion to a [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `IntoParallelIterator` implements the conversion to a [`ParallelIterator`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29056,"byte_end":29135,"line_start":187,"line_end":187,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29136,"byte_end":29139,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ By implementing `IntoParallelIterator` for a type, you define how it will","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29140,"byte_end":29217,"line_start":189,"line_end":189,"column_start":1,"column_end":78}},{"value":"/ transformed into an iterator. This is a parallel version of the standard","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29218,"byte_end":29294,"line_start":190,"line_end":190,"column_start":1,"column_end":77}},{"value":"/ library's [`std::iter::IntoIterator`] trait.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29295,"byte_end":29343,"line_start":191,"line_end":191,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29344,"byte_end":29347,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29348,"byte_end":29401,"line_start":193,"line_end":193,"column_start":1,"column_end":54}},{"value":"/ [`std::iter::IntoIterator`]: https://doc.rust-lang.org/std/iter/trait.IntoIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29402,"byte_end":29493,"line_start":194,"line_end":194,"column_start":1,"column_end":92}}]},{"kind":"Type","id":{"krate":0,"index":4044},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29593,"byte_end":29597,"line_start":197,"line_end":197,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":" The parallel iterator type that will be created.\n","sig":null,"attributes":[{"value":"/ The parallel iterator type that will be created.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29531,"byte_end":29583,"line_start":196,"line_end":196,"column_start":5,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":4045},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29712,"byte_end":29716,"line_start":200,"line_end":200,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelIterator::Item","value":"type Item: Send;","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29641,"byte_end":29702,"line_start":199,"line_end":199,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":4046},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30367,"byte_end":30380,"line_start":224,"line_end":224,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"::iter::IntoParallelIterator::into_par_iter","value":"pub fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":" Converts `self` into a parallel iterator.","sig":null,"attributes":[{"value":"/ Converts `self` into a parallel iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29729,"byte_end":29774,"line_start":202,"line_end":202,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29779,"byte_end":29782,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29787,"byte_end":29801,"line_start":204,"line_end":204,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29806,"byte_end":29809,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29814,"byte_end":29821,"line_start":206,"line_end":206,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29826,"byte_end":29852,"line_start":207,"line_end":207,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29857,"byte_end":29860,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ println!(\"counting in parallel:\");","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29865,"byte_end":29903,"line_start":209,"line_end":209,"column_start":5,"column_end":43}},{"value":"/ (0..100).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29908,"byte_end":29936,"line_start":210,"line_end":210,"column_start":5,"column_end":33}},{"value":"/     .for_each(|i| println!(\"{}\", i));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29941,"byte_end":29982,"line_start":211,"line_end":211,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29987,"byte_end":29994,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":29999,"byte_end":30002,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ This conversion is often implicit for arguments to methods like [`zip`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30007,"byte_end":30083,"line_start":214,"line_end":214,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30088,"byte_end":30091,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30096,"byte_end":30103,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30108,"byte_end":30134,"line_start":217,"line_end":217,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30139,"byte_end":30142,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_> = (0..5).into_par_iter().zip(5..10).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30147,"byte_end":30211,"line_start":219,"line_end":219,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(v, [(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30216,"byte_end":30276,"line_start":220,"line_end":220,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30281,"byte_end":30288,"line_start":221,"line_end":221,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30293,"byte_end":30296,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ [`zip`]: trait.IndexedParallelIterator.html#method.zip","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30301,"byte_end":30359,"line_start":223,"line_end":223,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":4047},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30969,"byte_end":30992,"line_start":240,"line_end":240,"column_start":11,"column_end":34},"name":"IntoParallelRefIterator","qualname":"::iter::IntoParallelRefIterator","value":"IntoParallelRefIterator<'data>","parent":null,"children":[{"krate":0,"index":4049},{"krate":0,"index":4050},{"krate":0,"index":4051}],"decl_id":null,"docs":" `IntoParallelRefIterator` implements the conversion to a\n [`ParallelIterator`], providing shared references to the data.","sig":null,"attributes":[{"value":"/ `IntoParallelRefIterator` implements the conversion to a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30405,"byte_end":30465,"line_start":227,"line_end":227,"column_start":1,"column_end":61}},{"value":"/ [`ParallelIterator`], providing shared references to the data.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30466,"byte_end":30532,"line_start":228,"line_end":228,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30533,"byte_end":30536,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ This is a parallel version of the `iter()` method","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30537,"byte_end":30590,"line_start":230,"line_end":230,"column_start":1,"column_end":54}},{"value":"/ defined by various collections.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30591,"byte_end":30626,"line_start":231,"line_end":231,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30627,"byte_end":30630,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30631,"byte_end":30674,"line_start":233,"line_end":233,"column_start":1,"column_end":44}},{"value":"/ `for I where &I: IntoParallelIterator`. In most cases, users","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30675,"byte_end":30739,"line_start":234,"line_end":234,"column_start":1,"column_end":65}},{"value":"/ will want to implement [`IntoParallelIterator`] rather than implement","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30740,"byte_end":30813,"line_start":235,"line_end":235,"column_start":1,"column_end":74}},{"value":"/ this trait directly.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30814,"byte_end":30838,"line_start":236,"line_end":236,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30839,"byte_end":30842,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30843,"byte_end":30896,"line_start":238,"line_end":238,"column_start":1,"column_end":54}},{"value":"/ [`IntoParallelIterator`]: trait.IntoParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":30897,"byte_end":30958,"line_start":239,"line_end":239,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":4049},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31076,"byte_end":31080,"line_start":242,"line_end":242,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelRefIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":4047},"children":[],"decl_id":null,"docs":" The type of the parallel iterator that will be returned.\n","sig":null,"attributes":[{"value":"/ The type of the parallel iterator that will be returned.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31006,"byte_end":31066,"line_start":241,"line_end":241,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":4050},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31256,"byte_end":31260,"line_start":246,"line_end":246,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelRefIterator::Item","value":"type Item: Send + 'data;","parent":{"krate":0,"index":4047},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n This will typically be an `&'data T` reference type.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31124,"byte_end":31185,"line_start":244,"line_end":244,"column_start":5,"column_end":66}},{"value":"/ This will typically be an `&'data T` reference type.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31190,"byte_end":31246,"line_start":245,"line_end":245,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":4051},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31750,"byte_end":31758,"line_start":263,"line_end":263,"column_start":8,"column_end":16},"name":"par_iter","qualname":"::iter::IntoParallelRefIterator::par_iter","value":"pub fn par_iter(&'data Self) -> Self::Iter","parent":{"krate":0,"index":4047},"children":[],"decl_id":null,"docs":" Converts `self` into a parallel iterator.","sig":null,"attributes":[{"value":"/ Converts `self` into a parallel iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31281,"byte_end":31326,"line_start":248,"line_end":248,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31331,"byte_end":31334,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31339,"byte_end":31353,"line_start":250,"line_end":250,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31358,"byte_end":31361,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31366,"byte_end":31373,"line_start":252,"line_end":252,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31378,"byte_end":31404,"line_start":253,"line_end":253,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31409,"byte_end":31412,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_> = (0..100).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31417,"byte_end":31456,"line_start":255,"line_end":255,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(v.par_iter().sum::<i32>(), 100 * 99 / 2);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31461,"byte_end":31517,"line_start":256,"line_end":256,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31522,"byte_end":31525,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ // `v.par_iter()` is shorthand for `(&v).into_par_iter()`,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31530,"byte_end":31592,"line_start":258,"line_end":258,"column_start":5,"column_end":67}},{"value":"/ // producing the exact same references.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31597,"byte_end":31640,"line_start":259,"line_end":259,"column_start":5,"column_end":48}},{"value":"/ assert!(v.par_iter().zip(&v)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31645,"byte_end":31677,"line_start":260,"line_end":260,"column_start":5,"column_end":37}},{"value":"/          .all(|(a, b)| std::ptr::eq(a, b)));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31682,"byte_end":31730,"line_start":261,"line_end":261,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31735,"byte_end":31742,"line_start":262,"line_end":262,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4058},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32678,"byte_end":32704,"line_start":291,"line_end":291,"column_start":11,"column_end":37},"name":"IntoParallelRefMutIterator","qualname":"::iter::IntoParallelRefMutIterator","value":"IntoParallelRefMutIterator<'data>","parent":null,"children":[{"krate":0,"index":4060},{"krate":0,"index":4061},{"krate":0,"index":4062}],"decl_id":null,"docs":" `IntoParallelRefMutIterator` implements the conversion to a\n [`ParallelIterator`], providing mutable references to the data.","sig":null,"attributes":[{"value":"/ `IntoParallelRefMutIterator` implements the conversion to a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32102,"byte_end":32165,"line_start":278,"line_end":278,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`], providing mutable references to the data.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32166,"byte_end":32233,"line_start":279,"line_end":279,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32234,"byte_end":32237,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ This is a parallel version of the `iter_mut()` method","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32238,"byte_end":32295,"line_start":281,"line_end":281,"column_start":1,"column_end":58}},{"value":"/ defined by various collections.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32296,"byte_end":32331,"line_start":282,"line_end":282,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32332,"byte_end":32335,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32336,"byte_end":32379,"line_start":284,"line_end":284,"column_start":1,"column_end":44}},{"value":"/ `for I where &mut I: IntoParallelIterator`. In most cases, users","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32380,"byte_end":32448,"line_start":285,"line_end":285,"column_start":1,"column_end":69}},{"value":"/ will want to implement [`IntoParallelIterator`] rather than implement","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32449,"byte_end":32522,"line_start":286,"line_end":286,"column_start":1,"column_end":74}},{"value":"/ this trait directly.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32523,"byte_end":32547,"line_start":287,"line_end":287,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32548,"byte_end":32551,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32552,"byte_end":32605,"line_start":289,"line_end":289,"column_start":1,"column_end":54}},{"value":"/ [`IntoParallelIterator`]: trait.IntoParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32606,"byte_end":32667,"line_start":290,"line_end":290,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":4060},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32774,"byte_end":32778,"line_start":293,"line_end":293,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelRefMutIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":4058},"children":[],"decl_id":null,"docs":" The type of iterator that will be created.\n","sig":null,"attributes":[{"value":"/ The type of iterator that will be created.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32718,"byte_end":32764,"line_start":292,"line_end":292,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":4061},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32930,"byte_end":32934,"line_start":297,"line_end":297,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelRefMutIterator::Item","value":"type Item: Send + 'data;","parent":{"krate":0,"index":4058},"children":[],"decl_id":null,"docs":" The type of item that will be produced; this is typically an\n `&'data mut T` reference.\n","sig":null,"attributes":[{"value":"/ The type of item that will be produced; this is typically an","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32822,"byte_end":32886,"line_start":295,"line_end":295,"column_start":5,"column_end":69}},{"value":"/ `&'data mut T` reference.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32891,"byte_end":32920,"line_start":296,"line_end":296,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":4062},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33248,"byte_end":33260,"line_start":310,"line_end":310,"column_start":8,"column_end":20},"name":"par_iter_mut","qualname":"::iter::IntoParallelRefMutIterator::par_iter_mut","value":"pub fn par_iter_mut(&'data mut Self) -> Self::Iter","parent":{"krate":0,"index":4058},"children":[],"decl_id":null,"docs":" Creates the parallel iterator from `self`.","sig":null,"attributes":[{"value":"/ Creates the parallel iterator from `self`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":32955,"byte_end":33001,"line_start":299,"line_end":299,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33006,"byte_end":33009,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33014,"byte_end":33028,"line_start":301,"line_end":301,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33033,"byte_end":33036,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33041,"byte_end":33048,"line_start":303,"line_end":303,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33053,"byte_end":33079,"line_start":304,"line_end":304,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33084,"byte_end":33087,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0usize; 5];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33092,"byte_end":33124,"line_start":306,"line_end":306,"column_start":5,"column_end":37}},{"value":"/ v.par_iter_mut().enumerate().for_each(|(i, x)| *x = i);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33129,"byte_end":33188,"line_start":307,"line_end":307,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(v, [0, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33193,"byte_end":33228,"line_start":308,"line_end":308,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33233,"byte_end":33240,"line_start":309,"line_end":309,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4069},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34237,"byte_end":34253,"line_start":339,"line_end":339,"column_start":11,"column_end":27},"name":"ParallelIterator","qualname":"::iter::ParallelIterator","value":"ParallelIterator: Sized + Send","parent":null,"children":[{"krate":0,"index":4070},{"krate":0,"index":4071},{"krate":0,"index":4073},{"krate":0,"index":4076},{"krate":0,"index":4080},{"krate":0,"index":4085},{"krate":0,"index":4091},{"krate":0,"index":4098},{"krate":0,"index":4101},{"krate":0,"index":4104},{"krate":0,"index":4108},{"krate":0,"index":4113},{"krate":0,"index":4116},{"krate":0,"index":4119},{"krate":0,"index":4121},{"krate":0,"index":4123},{"krate":0,"index":4125},{"krate":0,"index":4128},{"krate":0,"index":4131},{"krate":0,"index":4132},{"krate":0,"index":4135},{"krate":0,"index":4147},{"krate":0,"index":4151},{"krate":0,"index":4154},{"krate":0,"index":4158},{"krate":0,"index":4161},{"krate":0,"index":4166},{"krate":0,"index":4170},{"krate":0,"index":4172},{"krate":0,"index":4174},{"krate":0,"index":4175},{"krate":0,"index":4182},{"krate":0,"index":4194},{"krate":0,"index":4195},{"krate":0,"index":4202},{"krate":0,"index":4214},{"krate":0,"index":4216},{"krate":0,"index":4218},{"krate":0,"index":4220},{"krate":0,"index":4222},{"krate":0,"index":4227},{"krate":0,"index":4232},{"krate":0,"index":4237},{"krate":0,"index":4239},{"krate":0,"index":4241},{"krate":0,"index":4244},{"krate":0,"index":4246},{"krate":0,"index":4247},{"krate":0,"index":4249},{"krate":0,"index":4254},{"krate":0,"index":4258},{"krate":0,"index":4264},{"krate":0,"index":4265},{"krate":0,"index":4267}],"decl_id":null,"docs":" Parallel version of the standard iterator trait.","sig":null,"attributes":[{"value":"/ Parallel version of the standard iterator trait.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33631,"byte_end":33683,"line_start":325,"line_end":325,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33684,"byte_end":33687,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ The combinators on this trait are available on **all** parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33688,"byte_end":33755,"line_start":327,"line_end":327,"column_start":1,"column_end":68}},{"value":"/ iterators.  Additional methods can be found on the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33756,"byte_end":33810,"line_start":328,"line_end":328,"column_start":1,"column_end":55}},{"value":"/ [`IndexedParallelIterator`] trait: those methods are only","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33811,"byte_end":33872,"line_start":329,"line_end":329,"column_start":1,"column_end":62}},{"value":"/ available for parallel iterators where the number of items is","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33873,"byte_end":33938,"line_start":330,"line_end":330,"column_start":1,"column_end":66}},{"value":"/ known in advance (so, e.g., after invoking `filter`, those methods","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33939,"byte_end":34009,"line_start":331,"line_end":331,"column_start":1,"column_end":71}},{"value":"/ become unavailable).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34010,"byte_end":34034,"line_start":332,"line_end":332,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34035,"byte_end":34038,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ For examples of using parallel iterators, see [the docs on the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34039,"byte_end":34105,"line_start":334,"line_end":334,"column_start":1,"column_end":67}},{"value":"/ `iter` module][iter].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34106,"byte_end":34131,"line_start":335,"line_end":335,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34132,"byte_end":34135,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ [iter]: index.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34136,"byte_end":34158,"line_start":337,"line_end":337,"column_start":1,"column_end":23}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34159,"byte_end":34226,"line_start":338,"line_end":338,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":4070},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34519,"byte_end":34523,"line_start":345,"line_end":345,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ParallelIterator::Item","value":"type Item: Send;","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" The type of item that this parallel iterator produces.\n For example, if you use the [`for_each`] method, this is the type of\n item that your closure will be invoked with.","sig":null,"attributes":[{"value":"/ The type of item that this parallel iterator produces.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34274,"byte_end":34332,"line_start":340,"line_end":340,"column_start":5,"column_end":63}},{"value":"/ For example, if you use the [`for_each`] method, this is the type of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34337,"byte_end":34409,"line_start":341,"line_end":341,"column_start":5,"column_end":77}},{"value":"/ item that your closure will be invoked with.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34414,"byte_end":34462,"line_start":342,"line_end":342,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34467,"byte_end":34470,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ [`for_each`]: #method.for_each","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34475,"byte_end":34509,"line_start":344,"line_end":344,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":4071},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34779,"byte_end":34787,"line_start":356,"line_end":356,"column_start":8,"column_end":16},"name":"for_each","qualname":"::iter::ParallelIterator::for_each","value":"pub fn for_each<OP>(Self, OP) where OP: Fn(Self::Item) -> () + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Executes `OP` on each item produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on each item produced by the iterator, in parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34536,"byte_end":34605,"line_start":347,"line_end":347,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34610,"byte_end":34613,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34618,"byte_end":34632,"line_start":349,"line_end":349,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34637,"byte_end":34640,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34645,"byte_end":34652,"line_start":351,"line_end":351,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34657,"byte_end":34683,"line_start":352,"line_end":352,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34688,"byte_end":34691,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ (0..100).into_par_iter().for_each(|x| println!(\"{:?}\", x));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34696,"byte_end":34759,"line_start":354,"line_end":354,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34764,"byte_end":34771,"line_start":355,"line_end":355,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4073},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35622,"byte_end":35635,"line_start":386,"line_end":386,"column_start":8,"column_end":21},"name":"for_each_with","qualname":"::iter::ParallelIterator::for_each_with","value":"pub fn for_each_with<OP, T>(Self, T, OP) where OP: Fn(&mut T, Self::Item) ->\n() + Sync + Send, T: Send + Clone","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Executes `OP` on the given `init` value with each item produced by\n the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on the given `init` value with each item produced by","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34913,"byte_end":34983,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/ the iterator, in parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34988,"byte_end":35018,"line_start":364,"line_end":364,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35023,"byte_end":35026,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ The `init` value will be cloned only as needed to be paired with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35031,"byte_end":35099,"line_start":366,"line_end":366,"column_start":5,"column_end":73}},{"value":"/ the group of items in each rayon job.  It does not require the type","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35104,"byte_end":35175,"line_start":367,"line_end":367,"column_start":5,"column_end":76}},{"value":"/ to be `Sync`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35180,"byte_end":35197,"line_start":368,"line_end":368,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35202,"byte_end":35205,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35210,"byte_end":35224,"line_start":370,"line_end":370,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35229,"byte_end":35232,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35237,"byte_end":35244,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35249,"byte_end":35282,"line_start":373,"line_end":373,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35287,"byte_end":35313,"line_start":374,"line_end":374,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35318,"byte_end":35321,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35326,"byte_end":35365,"line_start":376,"line_end":376,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35370,"byte_end":35373,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter().for_each_with(sender, |s, x| s.send(x).unwrap());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35378,"byte_end":35454,"line_start":378,"line_end":378,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35459,"byte_end":35462,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ let mut res: Vec<_> = receiver.iter().collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35467,"byte_end":35519,"line_start":380,"line_end":380,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35524,"byte_end":35527,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ res.sort();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35532,"byte_end":35547,"line_start":382,"line_end":382,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35552,"byte_end":35555,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&res[..], &[0, 1, 2, 3, 4])","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35560,"byte_end":35602,"line_start":384,"line_end":384,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35607,"byte_end":35614,"line_start":385,"line_end":385,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4076},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36666,"byte_end":36679,"line_start":423,"line_end":423,"column_start":8,"column_end":21},"name":"for_each_init","qualname":"::iter::ParallelIterator::for_each_init","value":"pub fn for_each_init<OP, INIT, T>(Self, INIT, OP) where\nOP: Fn(&mut T, Self::Item) -> () + Sync + Send, INIT: Fn() -> T + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Executes `OP` on a value returned by `init` with each item produced by\n the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on a value returned by `init` with each item produced by","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35810,"byte_end":35884,"line_start":394,"line_end":394,"column_start":5,"column_end":79}},{"value":"/ the iterator, in parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35889,"byte_end":35919,"line_start":395,"line_end":395,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35924,"byte_end":35927,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ The `init` function will be called only as needed for a value to be","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":35932,"byte_end":36003,"line_start":397,"line_end":397,"column_start":5,"column_end":76}},{"value":"/ paired with the group of items in each rayon job.  There is no","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36008,"byte_end":36074,"line_start":398,"line_end":398,"column_start":5,"column_end":71}},{"value":"/ constraint on that returned type at all!","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36079,"byte_end":36123,"line_start":399,"line_end":399,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36128,"byte_end":36131,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36136,"byte_end":36150,"line_start":401,"line_end":401,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36155,"byte_end":36158,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36163,"byte_end":36170,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"/ extern crate rand;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36175,"byte_end":36197,"line_start":404,"line_end":404,"column_start":5,"column_end":27}},{"value":"/ extern crate rayon;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36202,"byte_end":36225,"line_start":405,"line_end":405,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36230,"byte_end":36233,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36238,"byte_end":36256,"line_start":407,"line_end":407,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36261,"byte_end":36287,"line_start":408,"line_end":408,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36292,"byte_end":36295,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0u8; 1_000_000];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36300,"byte_end":36337,"line_start":410,"line_end":410,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36342,"byte_end":36345,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ v.par_chunks_mut(1000)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36350,"byte_end":36376,"line_start":412,"line_end":412,"column_start":5,"column_end":31}},{"value":"/     .for_each_init(","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36381,"byte_end":36404,"line_start":413,"line_end":413,"column_start":5,"column_end":28}},{"value":"/         || rand::thread_rng(),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36409,"byte_end":36443,"line_start":414,"line_end":414,"column_start":5,"column_end":39}},{"value":"/         |rng, chunk| rng.fill(chunk),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36448,"byte_end":36489,"line_start":415,"line_end":415,"column_start":5,"column_end":46}},{"value":"/     );","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36494,"byte_end":36504,"line_start":416,"line_end":416,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36509,"byte_end":36512,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36517,"byte_end":36570,"line_start":418,"line_end":418,"column_start":5,"column_end":58}},{"value":"/ for i in 0u8..=255 {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36575,"byte_end":36599,"line_start":419,"line_end":419,"column_start":5,"column_end":29}},{"value":"/     assert!(v.contains(&i));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36604,"byte_end":36636,"line_start":420,"line_end":420,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36641,"byte_end":36646,"line_start":421,"line_end":421,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36651,"byte_end":36658,"line_start":422,"line_end":422,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4080},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37782,"byte_end":37794,"line_start":451,"line_end":451,"column_start":8,"column_end":20},"name":"try_for_each","qualname":"::iter::ParallelIterator::try_for_each","value":"pub fn try_for_each<OP, R>(Self, OP) -> R where OP: Fn(Self::Item) -> R +\nSync + Send, R: Try<Ok = ()> + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on each item produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on each item produced by the iterator, in parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36877,"byte_end":36957,"line_start":431,"line_end":431,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36962,"byte_end":36965,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ If the `OP` returns `Result::Err` or `Option::None`, we will attempt to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":36970,"byte_end":37045,"line_start":433,"line_end":433,"column_start":5,"column_end":80}},{"value":"/ stop processing the rest of the items in the iterator as soon as","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37050,"byte_end":37118,"line_start":434,"line_end":434,"column_start":5,"column_end":73}},{"value":"/ possible, and we will return that terminating value.  Otherwise, we will","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37123,"byte_end":37199,"line_start":435,"line_end":435,"column_start":5,"column_end":81}},{"value":"/ return an empty `Result::Ok(())` or `Option::Some(())`.  If there are","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37204,"byte_end":37277,"line_start":436,"line_end":436,"column_start":5,"column_end":78}},{"value":"/ multiple errors in parallel, it is not specified which will be returned.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37282,"byte_end":37358,"line_start":437,"line_end":437,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37363,"byte_end":37366,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37371,"byte_end":37385,"line_start":439,"line_end":439,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37390,"byte_end":37393,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37398,"byte_end":37405,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37410,"byte_end":37436,"line_start":442,"line_end":442,"column_start":5,"column_end":31}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37441,"byte_end":37472,"line_start":443,"line_end":443,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37477,"byte_end":37480,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ // This will stop iteration early if there's any write error, like","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37485,"byte_end":37555,"line_start":445,"line_end":445,"column_start":5,"column_end":75}},{"value":"/ // having piped output get closed on the other end.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37560,"byte_end":37615,"line_start":446,"line_end":446,"column_start":5,"column_end":60}},{"value":"/ (0..100).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37620,"byte_end":37648,"line_start":447,"line_end":447,"column_start":5,"column_end":33}},{"value":"/     .try_for_each(|x| writeln!(io::stdout(), \"{:?}\", x))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37653,"byte_end":37713,"line_start":448,"line_end":448,"column_start":5,"column_end":65}},{"value":"/     .expect(\"expected no write errors\");","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37718,"byte_end":37762,"line_start":449,"line_end":449,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":37767,"byte_end":37774,"line_start":450,"line_end":450,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4085},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38903,"byte_end":38920,"line_start":490,"line_end":490,"column_start":8,"column_end":25},"name":"try_for_each_with","qualname":"::iter::ParallelIterator::try_for_each_with","value":"pub fn try_for_each_with<OP, T, R>(Self, T, OP) -> R where\nOP: Fn(&mut T, Self::Item) -> R + Sync + Send, T: Send + Clone, R: Try<Ok =\n()> + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on the given `init` value with each item\n produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on the given `init` value with each item","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38068,"byte_end":38137,"line_start":463,"line_end":463,"column_start":5,"column_end":74}},{"value":"/ produced by the iterator, in parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38142,"byte_end":38184,"line_start":464,"line_end":464,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38189,"byte_end":38192,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`for_each_with()`] and the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38197,"byte_end":38266,"line_start":466,"line_end":466,"column_start":5,"column_end":74}},{"value":"/ failure semantics of [`try_for_each()`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38271,"byte_end":38315,"line_start":467,"line_end":467,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38320,"byte_end":38323,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ [`for_each_with()`]: #method.for_each_with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38328,"byte_end":38374,"line_start":469,"line_end":469,"column_start":5,"column_end":51}},{"value":"/ [`try_for_each()`]: #method.try_for_each","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38379,"byte_end":38423,"line_start":470,"line_end":470,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38428,"byte_end":38431,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38436,"byte_end":38450,"line_start":472,"line_end":472,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38455,"byte_end":38458,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38463,"byte_end":38470,"line_start":474,"line_end":474,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38475,"byte_end":38508,"line_start":475,"line_end":475,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38513,"byte_end":38539,"line_start":476,"line_end":476,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38544,"byte_end":38547,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38552,"byte_end":38591,"line_start":478,"line_end":478,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38596,"byte_end":38599,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38604,"byte_end":38630,"line_start":480,"line_end":480,"column_start":5,"column_end":31}},{"value":"/     .try_for_each_with(sender, |s, x| s.send(x))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38635,"byte_end":38687,"line_start":481,"line_end":481,"column_start":5,"column_end":57}},{"value":"/     .expect(\"expected no send errors\");","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38692,"byte_end":38735,"line_start":482,"line_end":482,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38740,"byte_end":38743,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ let mut res: Vec<_> = receiver.iter().collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38748,"byte_end":38800,"line_start":484,"line_end":484,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38805,"byte_end":38808,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ res.sort();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38813,"byte_end":38828,"line_start":486,"line_end":486,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38833,"byte_end":38836,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&res[..], &[0, 1, 2, 3, 4])","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38841,"byte_end":38883,"line_start":488,"line_end":488,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":38888,"byte_end":38895,"line_start":489,"line_end":489,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4091},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40207,"byte_end":40224,"line_start":535,"line_end":535,"column_start":8,"column_end":25},"name":"try_for_each_init","qualname":"::iter::ParallelIterator::try_for_each_init","value":"pub fn try_for_each_init<OP, INIT, T, R>(Self, INIT, OP) -> R where\nOP: Fn(&mut T, Self::Item) -> R + Sync + Send, INIT: Fn() -> T + Sync + Send,\nR: Try<Ok = ()> + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on a value returned by `init` with each item\n produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on a value returned by `init` with each item","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39250,"byte_end":39323,"line_start":503,"line_end":503,"column_start":5,"column_end":78}},{"value":"/ produced by the iterator, in parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39328,"byte_end":39370,"line_start":504,"line_end":504,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39375,"byte_end":39378,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`for_each_init()`] and the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39383,"byte_end":39452,"line_start":506,"line_end":506,"column_start":5,"column_end":74}},{"value":"/ failure semantics of [`try_for_each()`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39457,"byte_end":39501,"line_start":507,"line_end":507,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39506,"byte_end":39509,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ [`for_each_init()`]: #method.for_each_init","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39514,"byte_end":39560,"line_start":509,"line_end":509,"column_start":5,"column_end":51}},{"value":"/ [`try_for_each()`]: #method.try_for_each","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39565,"byte_end":39609,"line_start":510,"line_end":510,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39614,"byte_end":39617,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39622,"byte_end":39636,"line_start":512,"line_end":512,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39641,"byte_end":39644,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39649,"byte_end":39656,"line_start":514,"line_end":514,"column_start":5,"column_end":12}},{"value":"/ extern crate rand;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39661,"byte_end":39683,"line_start":515,"line_end":515,"column_start":5,"column_end":27}},{"value":"/ extern crate rayon;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39688,"byte_end":39711,"line_start":516,"line_end":516,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39716,"byte_end":39719,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39724,"byte_end":39742,"line_start":518,"line_end":518,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39747,"byte_end":39773,"line_start":519,"line_end":519,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39778,"byte_end":39781,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0u8; 1_000_000];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39786,"byte_end":39823,"line_start":521,"line_end":521,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39828,"byte_end":39831,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ v.par_chunks_mut(1000)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39836,"byte_end":39862,"line_start":523,"line_end":523,"column_start":5,"column_end":31}},{"value":"/     .try_for_each_init(","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39867,"byte_end":39894,"line_start":524,"line_end":524,"column_start":5,"column_end":32}},{"value":"/         || rand::thread_rng(),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39899,"byte_end":39933,"line_start":525,"line_end":525,"column_start":5,"column_end":39}},{"value":"/         |rng, chunk| rng.try_fill(chunk),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39938,"byte_end":39983,"line_start":526,"line_end":526,"column_start":5,"column_end":50}},{"value":"/     )","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":39988,"byte_end":39997,"line_start":527,"line_end":527,"column_start":5,"column_end":14}},{"value":"/     .expect(\"expected no rand errors\");","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40002,"byte_end":40045,"line_start":528,"line_end":528,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40050,"byte_end":40053,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40058,"byte_end":40111,"line_start":530,"line_end":530,"column_start":5,"column_end":58}},{"value":"/ for i in 0u8..=255 {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40116,"byte_end":40140,"line_start":531,"line_end":531,"column_start":5,"column_end":29}},{"value":"/     assert!(v.contains(&i));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40145,"byte_end":40177,"line_start":532,"line_end":532,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40182,"byte_end":40187,"line_start":533,"line_end":533,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40192,"byte_end":40199,"line_start":534,"line_end":534,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4098},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40834,"byte_end":40839,"line_start":559,"line_end":559,"column_start":8,"column_end":13},"name":"count","qualname":"::iter::ParallelIterator::count","value":"pub fn count(Self) -> usize","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Counts the number of items in this parallel iterator.","sig":null,"attributes":[{"value":"/ Counts the number of items in this parallel iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40577,"byte_end":40634,"line_start":548,"line_end":548,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40639,"byte_end":40642,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40647,"byte_end":40661,"line_start":550,"line_end":550,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40666,"byte_end":40669,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40674,"byte_end":40681,"line_start":552,"line_end":552,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40686,"byte_end":40712,"line_start":553,"line_end":553,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40717,"byte_end":40720,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ let count = (0..100).into_par_iter().count();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40725,"byte_end":40774,"line_start":555,"line_end":555,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40779,"byte_end":40782,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(count, 100);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40787,"byte_end":40814,"line_start":557,"line_end":557,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40819,"byte_end":40826,"line_start":558,"line_end":558,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4101},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41348,"byte_end":41351,"line_start":581,"line_end":581,"column_start":8,"column_end":11},"name":"map","qualname":"::iter::ParallelIterator::map","value":"pub fn map<F, R>(Self, F) -> Map<Self, F> where F: Fn(Self::Item) -> R +\nSync + Send, R: Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator, producing a new\n iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator, producing a new","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":40956,"byte_end":41023,"line_start":567,"line_end":567,"column_start":5,"column_end":72}},{"value":"/ iterator with the results.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41028,"byte_end":41058,"line_start":568,"line_end":568,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41063,"byte_end":41066,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41071,"byte_end":41085,"line_start":570,"line_end":570,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41090,"byte_end":41093,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41098,"byte_end":41105,"line_start":572,"line_end":572,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41110,"byte_end":41136,"line_start":573,"line_end":573,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41141,"byte_end":41144,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..5).into_par_iter().map(|x| x * 2);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41149,"byte_end":41210,"line_start":575,"line_end":575,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41215,"byte_end":41218,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ let doubles: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41223,"byte_end":41268,"line_start":577,"line_end":577,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41273,"byte_end":41276,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&doubles[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41281,"byte_end":41328,"line_start":579,"line_end":579,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41333,"byte_end":41340,"line_start":580,"line_end":580,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4104},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42694,"byte_end":42702,"line_start":618,"line_end":618,"column_start":8,"column_end":16},"name":"map_with","qualname":"::iter::ParallelIterator::map_with","value":"pub fn map_with<F, T, R>(Self, T, F) -> MapWith<Self, T, F> where\nF: Fn(&mut T, Self::Item) -> R + Sync + Send, T: Send + Clone, R: Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Applies `map_op` to the given `init` value with each item of this\n iterator, producing a new iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to the given `init` value with each item of this","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41512,"byte_end":41581,"line_start":589,"line_end":589,"column_start":5,"column_end":74}},{"value":"/ iterator, producing a new iterator with the results.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41586,"byte_end":41642,"line_start":590,"line_end":590,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41647,"byte_end":41650,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ The `init` value will be cloned only as needed to be paired with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41655,"byte_end":41723,"line_start":592,"line_end":592,"column_start":5,"column_end":73}},{"value":"/ the group of items in each rayon job.  It does not require the type","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41728,"byte_end":41799,"line_start":593,"line_end":593,"column_start":5,"column_end":76}},{"value":"/ to be `Sync`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41804,"byte_end":41821,"line_start":594,"line_end":594,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41826,"byte_end":41829,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41834,"byte_end":41848,"line_start":596,"line_end":596,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41853,"byte_end":41856,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41861,"byte_end":41868,"line_start":598,"line_end":598,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41873,"byte_end":41906,"line_start":599,"line_end":599,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41911,"byte_end":41937,"line_start":600,"line_end":600,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41942,"byte_end":41945,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41950,"byte_end":41989,"line_start":602,"line_end":602,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":41994,"byte_end":41997,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ let a: Vec<_> = (0..5)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42002,"byte_end":42028,"line_start":604,"line_end":604,"column_start":5,"column_end":31}},{"value":"/                 .into_par_iter()            // iterating over i32","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42033,"byte_end":42102,"line_start":605,"line_end":605,"column_start":5,"column_end":74}},{"value":"/                 .map_with(sender, |s, x| {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42107,"byte_end":42153,"line_start":606,"line_end":606,"column_start":5,"column_end":51}},{"value":"/                     s.send(x).unwrap();     // sending i32 values through the channel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42158,"byte_end":42247,"line_start":607,"line_end":607,"column_start":5,"column_end":94}},{"value":"/                     x                       // returning i32","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42252,"byte_end":42316,"line_start":608,"line_end":608,"column_start":5,"column_end":69}},{"value":"/                 })","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42321,"byte_end":42343,"line_start":609,"line_end":609,"column_start":5,"column_end":27}},{"value":"/                 .collect();                 // collecting the returned values into a vector","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42348,"byte_end":42443,"line_start":610,"line_end":610,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42448,"byte_end":42451,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ let mut b: Vec<_> = receiver.iter()         // iterating over the values in the channel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42456,"byte_end":42547,"line_start":612,"line_end":612,"column_start":5,"column_end":96}},{"value":"/                             .collect();     // and collecting them","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42552,"byte_end":42622,"line_start":613,"line_end":613,"column_start":5,"column_end":75}},{"value":"/ b.sort();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42627,"byte_end":42640,"line_start":614,"line_end":614,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42645,"byte_end":42648,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42653,"byte_end":42674,"line_start":616,"line_end":616,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42679,"byte_end":42686,"line_start":617,"line_end":617,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4108},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43948,"byte_end":43956,"line_start":658,"line_end":658,"column_start":8,"column_end":16},"name":"map_init","qualname":"::iter::ParallelIterator::map_init","value":"pub fn map_init<F, INIT, T, R>(Self, INIT, F) -> MapInit<Self, INIT, F> where\nF: Fn(&mut T, Self::Item) -> R + Sync + Send, INIT: Fn() -> T + Sync + Send,\nR: Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Applies `map_op` to a value returned by `init` with each item of this\n iterator, producing a new iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to a value returned by `init` with each item of this","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":42925,"byte_end":42998,"line_start":627,"line_end":627,"column_start":5,"column_end":78}},{"value":"/ iterator, producing a new iterator with the results.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43003,"byte_end":43059,"line_start":628,"line_end":628,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43064,"byte_end":43067,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ The `init` function will be called only as needed for a value to be","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43072,"byte_end":43143,"line_start":630,"line_end":630,"column_start":5,"column_end":76}},{"value":"/ paired with the group of items in each rayon job.  There is no","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43148,"byte_end":43214,"line_start":631,"line_end":631,"column_start":5,"column_end":71}},{"value":"/ constraint on that returned type at all!","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43219,"byte_end":43263,"line_start":632,"line_end":632,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43268,"byte_end":43271,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43276,"byte_end":43290,"line_start":634,"line_end":634,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43295,"byte_end":43298,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43303,"byte_end":43310,"line_start":636,"line_end":636,"column_start":5,"column_end":12}},{"value":"/ extern crate rand;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43315,"byte_end":43337,"line_start":637,"line_end":637,"column_start":5,"column_end":27}},{"value":"/ extern crate rayon;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43342,"byte_end":43365,"line_start":638,"line_end":638,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43370,"byte_end":43373,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43378,"byte_end":43396,"line_start":640,"line_end":640,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43401,"byte_end":43427,"line_start":641,"line_end":641,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43432,"byte_end":43435,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ let a: Vec<_> = (1i32..1_000_000)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43440,"byte_end":43477,"line_start":643,"line_end":643,"column_start":5,"column_end":42}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43482,"byte_end":43506,"line_start":644,"line_end":644,"column_start":5,"column_end":29}},{"value":"/     .map_init(","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43511,"byte_end":43529,"line_start":645,"line_end":645,"column_start":5,"column_end":23}},{"value":"/         || rand::thread_rng(),  // get the thread-local RNG","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43534,"byte_end":43597,"line_start":646,"line_end":646,"column_start":5,"column_end":68}},{"value":"/         |rng, x| if rng.gen() { // randomly negate items","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43602,"byte_end":43662,"line_start":647,"line_end":647,"column_start":5,"column_end":65}},{"value":"/             -x","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43667,"byte_end":43685,"line_start":648,"line_end":648,"column_start":5,"column_end":23}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43690,"byte_end":43710,"line_start":649,"line_end":649,"column_start":5,"column_end":25}},{"value":"/             x","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43715,"byte_end":43732,"line_start":650,"line_end":650,"column_start":5,"column_end":22}},{"value":"/         },","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43737,"byte_end":43751,"line_start":651,"line_end":651,"column_start":5,"column_end":19}},{"value":"/     ).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43756,"byte_end":43776,"line_start":652,"line_end":652,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43781,"byte_end":43784,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43789,"byte_end":43842,"line_start":654,"line_end":654,"column_start":5,"column_end":58}},{"value":"/ assert!(a.iter().any(|&x| x < 0));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43847,"byte_end":43885,"line_start":655,"line_end":655,"column_start":5,"column_end":43}},{"value":"/ assert!(a.iter().any(|&x| x > 0));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43890,"byte_end":43928,"line_start":656,"line_end":656,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":43933,"byte_end":43940,"line_start":657,"line_end":657,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4113},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44887,"byte_end":44893,"line_start":688,"line_end":688,"column_start":8,"column_end":14},"name":"cloned","qualname":"::iter::ParallelIterator::cloned","value":"pub fn cloned<'a, T>(Self) -> Cloned<Self> where T: 'a + Clone + Send,\nSelf: ParallelIterator<Item = &'a T>","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Creates an iterator which clones all of its elements.  This may be\n useful when you have an iterator over `&T`, but you need `T`, and\n that type implements `Clone`. See also [`copied()`].","sig":null,"attributes":[{"value":"/ Creates an iterator which clones all of its elements.  This may be","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44205,"byte_end":44275,"line_start":667,"line_end":667,"column_start":5,"column_end":75}},{"value":"/ useful when you have an iterator over `&T`, but you need `T`, and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44280,"byte_end":44349,"line_start":668,"line_end":668,"column_start":5,"column_end":74}},{"value":"/ that type implements `Clone`. See also [`copied()`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44354,"byte_end":44410,"line_start":669,"line_end":669,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44415,"byte_end":44418,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ [`copied()`]: #method.copied","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44423,"byte_end":44455,"line_start":671,"line_end":671,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44460,"byte_end":44463,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44468,"byte_end":44482,"line_start":673,"line_end":673,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44487,"byte_end":44490,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44495,"byte_end":44502,"line_start":675,"line_end":675,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44507,"byte_end":44533,"line_start":676,"line_end":676,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44538,"byte_end":44541,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44546,"byte_end":44568,"line_start":678,"line_end":678,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44573,"byte_end":44576,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ let v_cloned: Vec<_> = a.par_iter().cloned().collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44581,"byte_end":44640,"line_start":680,"line_end":680,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44645,"byte_end":44648,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ // cloned is the same as .map(|&x| x), for integers","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44653,"byte_end":44708,"line_start":682,"line_end":682,"column_start":5,"column_end":60}},{"value":"/ let v_map: Vec<_> = a.par_iter().map(|&x| x).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44713,"byte_end":44772,"line_start":683,"line_end":683,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44777,"byte_end":44780,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v_cloned, vec![1, 2, 3]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44785,"byte_end":44825,"line_start":685,"line_end":685,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v_map, vec![1, 2, 3]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44830,"byte_end":44867,"line_start":686,"line_end":686,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":44872,"byte_end":44879,"line_start":687,"line_end":687,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4116},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45733,"byte_end":45739,"line_start":717,"line_end":717,"column_start":8,"column_end":14},"name":"copied","qualname":"::iter::ParallelIterator::copied","value":"pub fn copied<'a, T>(Self) -> Copied<Self> where T: 'a + Copy + Send,\nSelf: ParallelIterator<Item = &'a T>","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Creates an iterator which copies all of its elements.  This may be\n useful when you have an iterator over `&T`, but you need `T`, and\n that type implements `Copy`. See also [`cloned()`].","sig":null,"attributes":[{"value":"/ Creates an iterator which copies all of its elements.  This may be","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45052,"byte_end":45122,"line_start":696,"line_end":696,"column_start":5,"column_end":75}},{"value":"/ useful when you have an iterator over `&T`, but you need `T`, and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45127,"byte_end":45196,"line_start":697,"line_end":697,"column_start":5,"column_end":74}},{"value":"/ that type implements `Copy`. See also [`cloned()`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45201,"byte_end":45256,"line_start":698,"line_end":698,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45261,"byte_end":45264,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ [`cloned()`]: #method.cloned","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45269,"byte_end":45301,"line_start":700,"line_end":700,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45306,"byte_end":45309,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45314,"byte_end":45328,"line_start":702,"line_end":702,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45333,"byte_end":45336,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45341,"byte_end":45348,"line_start":704,"line_end":704,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45353,"byte_end":45379,"line_start":705,"line_end":705,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45384,"byte_end":45387,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45392,"byte_end":45414,"line_start":707,"line_end":707,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45419,"byte_end":45422,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ let v_copied: Vec<_> = a.par_iter().copied().collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45427,"byte_end":45486,"line_start":709,"line_end":709,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45491,"byte_end":45494,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ // copied is the same as .map(|&x| x), for integers","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45499,"byte_end":45554,"line_start":711,"line_end":711,"column_start":5,"column_end":60}},{"value":"/ let v_map: Vec<_> = a.par_iter().map(|&x| x).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45559,"byte_end":45618,"line_start":712,"line_end":712,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45623,"byte_end":45626,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v_copied, vec![1, 2, 3]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45631,"byte_end":45671,"line_start":714,"line_end":714,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v_map, vec![1, 2, 3]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45676,"byte_end":45713,"line_start":715,"line_end":715,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45718,"byte_end":45725,"line_start":716,"line_end":716,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4119},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46933,"byte_end":46940,"line_start":754,"line_end":754,"column_start":8,"column_end":15},"name":"inspect","qualname":"::iter::ParallelIterator::inspect","value":"pub fn inspect<OP>(Self, OP) -> Inspect<Self, OP> where OP: Fn(&Self::Item) ->\n() + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Applies `inspect_op` to a reference to each item of this iterator,\n producing a new iterator passing through the original items.  This is\n often useful for debugging to see what's happening in iterator stages.","sig":null,"attributes":[{"value":"/ Applies `inspect_op` to a reference to each item of this iterator,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45897,"byte_end":45967,"line_start":725,"line_end":725,"column_start":5,"column_end":75}},{"value":"/ producing a new iterator passing through the original items.  This is","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":45972,"byte_end":46045,"line_start":726,"line_end":726,"column_start":5,"column_end":78}},{"value":"/ often useful for debugging to see what's happening in iterator stages.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46050,"byte_end":46124,"line_start":727,"line_end":727,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46129,"byte_end":46132,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46137,"byte_end":46151,"line_start":729,"line_end":729,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46156,"byte_end":46159,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46164,"byte_end":46171,"line_start":731,"line_end":731,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46176,"byte_end":46202,"line_start":732,"line_end":732,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46207,"byte_end":46210,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 4, 2, 3];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46215,"byte_end":46240,"line_start":734,"line_end":734,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46245,"byte_end":46248,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ // this iterator sequence is complex.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46253,"byte_end":46294,"line_start":736,"line_end":736,"column_start":5,"column_end":46}},{"value":"/ let sum = a.par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46299,"byte_end":46325,"line_start":737,"line_end":737,"column_start":5,"column_end":31}},{"value":"/             .cloned()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46330,"byte_end":46355,"line_start":738,"line_end":738,"column_start":5,"column_end":30}},{"value":"/             .filter(|&x| x % 2 == 0)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46360,"byte_end":46400,"line_start":739,"line_end":739,"column_start":5,"column_end":45}},{"value":"/             .reduce(|| 0, |sum, i| sum + i);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46405,"byte_end":46453,"line_start":740,"line_end":740,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46458,"byte_end":46461,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46466,"byte_end":46490,"line_start":742,"line_end":742,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46495,"byte_end":46498,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ // let's add some inspect() calls to investigate what's happening","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46503,"byte_end":46572,"line_start":744,"line_end":744,"column_start":5,"column_end":74}},{"value":"/ let sum = a.par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46577,"byte_end":46603,"line_start":745,"line_end":745,"column_start":5,"column_end":31}},{"value":"/             .cloned()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46608,"byte_end":46633,"line_start":746,"line_end":746,"column_start":5,"column_end":30}},{"value":"/             .inspect(|x| println!(\"about to filter: {}\", x))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46638,"byte_end":46702,"line_start":747,"line_end":747,"column_start":5,"column_end":69}},{"value":"/             .filter(|&x| x % 2 == 0)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46707,"byte_end":46747,"line_start":748,"line_end":748,"column_start":5,"column_end":45}},{"value":"/             .inspect(|x| println!(\"made it through filter: {}\", x))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46752,"byte_end":46823,"line_start":749,"line_end":749,"column_start":5,"column_end":76}},{"value":"/             .reduce(|| 0, |sum, i| sum + i);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46828,"byte_end":46876,"line_start":750,"line_end":750,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46881,"byte_end":46884,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46889,"byte_end":46913,"line_start":752,"line_end":752,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":46918,"byte_end":46925,"line_start":753,"line_end":753,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4121},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47449,"byte_end":47455,"line_start":774,"line_end":774,"column_start":8,"column_end":14},"name":"update","qualname":"::iter::ParallelIterator::update","value":"pub fn update<F>(Self, F) -> Update<Self, F> where F: Fn(&mut Self::Item) ->\n() + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Mutates each item of this iterator before yielding it.","sig":null,"attributes":[{"value":"/ Mutates each item of this iterator before yielding it.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47097,"byte_end":47155,"line_start":761,"line_end":761,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47160,"byte_end":47163,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47168,"byte_end":47182,"line_start":763,"line_end":763,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47187,"byte_end":47190,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47195,"byte_end":47202,"line_start":765,"line_end":765,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47207,"byte_end":47233,"line_start":766,"line_end":766,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47238,"byte_end":47241,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ let par_iter = (0..5).into_par_iter().update(|x| {*x *= 2;});","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47246,"byte_end":47311,"line_start":768,"line_end":768,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47316,"byte_end":47319,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ let doubles: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47324,"byte_end":47369,"line_start":770,"line_end":770,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47374,"byte_end":47377,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&doubles[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47382,"byte_end":47429,"line_start":772,"line_end":772,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47434,"byte_end":47441,"line_start":773,"line_end":773,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4123},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48050,"byte_end":48056,"line_start":795,"line_end":795,"column_start":8,"column_end":14},"name":"filter","qualname":"::iter::ParallelIterator::filter","value":"pub fn filter<P>(Self, P) -> Filter<Self, P> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Applies `filter_op` to each item of this iterator, producing a new\n iterator with only the items that gave `true` results.","sig":null,"attributes":[{"value":"/ Applies `filter_op` to each item of this iterator, producing a new","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47608,"byte_end":47678,"line_start":781,"line_end":781,"column_start":5,"column_end":75}},{"value":"/ iterator with only the items that gave `true` results.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47683,"byte_end":47741,"line_start":782,"line_end":782,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47746,"byte_end":47749,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47754,"byte_end":47768,"line_start":784,"line_end":784,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47773,"byte_end":47776,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47781,"byte_end":47788,"line_start":786,"line_end":786,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47793,"byte_end":47819,"line_start":787,"line_end":787,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47824,"byte_end":47827,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..10).into_par_iter().filter(|x| x % 2 == 0);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47832,"byte_end":47902,"line_start":789,"line_end":789,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47907,"byte_end":47910,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ let even_numbers: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47915,"byte_end":47965,"line_start":791,"line_end":791,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47970,"byte_end":47973,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&even_numbers[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":47978,"byte_end":48030,"line_start":793,"line_end":793,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48035,"byte_end":48042,"line_start":794,"line_end":794,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4125},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48850,"byte_end":48860,"line_start":820,"line_end":820,"column_start":8,"column_end":18},"name":"filter_map","qualname":"::iter::ParallelIterator::filter_map","value":"pub fn filter_map<P, R>(Self, P) -> FilterMap<Self, P> where P: Fn(Self::Item)\n-> Option<R> + Sync + Send, R: Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Applies `filter_op` to each item of this iterator to get an `Option`,\n producing a new iterator with only the items from `Some` results.","sig":null,"attributes":[{"value":"/ Applies `filter_op` to each item of this iterator to get an `Option`,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48213,"byte_end":48286,"line_start":802,"line_end":802,"column_start":5,"column_end":78}},{"value":"/ producing a new iterator with only the items from `Some` results.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48291,"byte_end":48360,"line_start":803,"line_end":803,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48365,"byte_end":48368,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48373,"byte_end":48387,"line_start":805,"line_end":805,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48392,"byte_end":48395,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48400,"byte_end":48407,"line_start":807,"line_end":807,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48412,"byte_end":48438,"line_start":808,"line_end":808,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48443,"byte_end":48446,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..10).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48451,"byte_end":48497,"line_start":810,"line_end":810,"column_start":5,"column_end":51}},{"value":"/                         .filter_map(|x| {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48502,"byte_end":48547,"line_start":811,"line_end":811,"column_start":5,"column_end":50}},{"value":"/                             if x % 2 == 0 { Some(x * 3) }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48552,"byte_end":48613,"line_start":812,"line_end":812,"column_start":5,"column_end":66}},{"value":"/                             else { None }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48618,"byte_end":48663,"line_start":813,"line_end":813,"column_start":5,"column_end":50}},{"value":"/                         });","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48668,"byte_end":48699,"line_start":814,"line_end":814,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48704,"byte_end":48707,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ let even_numbers: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48712,"byte_end":48762,"line_start":816,"line_end":816,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48767,"byte_end":48770,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&even_numbers[..], &[0, 6, 12, 18, 24]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48775,"byte_end":48830,"line_start":818,"line_end":818,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":48835,"byte_end":48842,"line_start":819,"line_end":819,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4128},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49544,"byte_end":49552,"line_start":844,"line_end":844,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::iter::ParallelIterator::flat_map","value":"pub fn flat_map<F, PI>(Self, F) -> FlatMap<Self, F> where F: Fn(Self::Item) ->\nPI + Sync + Send, PI: IntoParallelIterator","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator to get nested iterators,\n producing a new iterator that flattens these back into one.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator to get nested iterators,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49047,"byte_end":49122,"line_start":828,"line_end":828,"column_start":5,"column_end":80}},{"value":"/ producing a new iterator that flattens these back into one.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49127,"byte_end":49190,"line_start":829,"line_end":829,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49195,"byte_end":49198,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49203,"byte_end":49217,"line_start":831,"line_end":831,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49222,"byte_end":49225,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49230,"byte_end":49237,"line_start":833,"line_end":833,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49242,"byte_end":49268,"line_start":834,"line_end":834,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49273,"byte_end":49276,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ let a = [[1, 2], [3, 4], [5, 6], [7, 8]];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49281,"byte_end":49326,"line_start":836,"line_end":836,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49331,"byte_end":49334,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().cloned().flat_map(|a| a.to_vec());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49339,"byte_end":49405,"line_start":838,"line_end":838,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49410,"byte_end":49413,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49418,"byte_end":49459,"line_start":840,"line_end":840,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49464,"byte_end":49467,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&vec[..], &[1, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49472,"byte_end":49524,"line_start":842,"line_end":842,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49529,"byte_end":49536,"line_start":843,"line_end":843,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4131},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50086,"byte_end":50093,"line_start":864,"line_end":864,"column_start":8,"column_end":15},"name":"flatten","qualname":"::iter::ParallelIterator::flatten","value":"pub fn flatten(Self) -> Flatten<Self> where Self::Item: IntoParallelIterator","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" An adaptor that flattens iterable `Item`s into one large iterator","sig":null,"attributes":[{"value":"/ An adaptor that flattens iterable `Item`s into one large iterator","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49740,"byte_end":49809,"line_start":852,"line_end":852,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49814,"byte_end":49817,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49822,"byte_end":49836,"line_start":854,"line_end":854,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49841,"byte_end":49844,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49849,"byte_end":49856,"line_start":856,"line_end":856,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49861,"byte_end":49887,"line_start":857,"line_end":857,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49892,"byte_end":49895,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<Vec<_>> = vec![vec![1, 2], vec![3, 4]];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49900,"byte_end":49954,"line_start":859,"line_end":859,"column_start":5,"column_end":59}},{"value":"/ let y: Vec<_> = x.into_par_iter().flatten().collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":49959,"byte_end":50017,"line_start":860,"line_end":860,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50022,"byte_end":50025,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(y, vec![1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50030,"byte_end":50066,"line_start":862,"line_end":862,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50071,"byte_end":50078,"line_start":863,"line_end":863,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4132},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51778,"byte_end":51784,"line_start":901,"line_end":901,"column_start":8,"column_end":14},"name":"reduce","qualname":"::iter::ParallelIterator::reduce","value":"pub fn reduce<OP, ID>(Self, ID, OP) -> Self::Item where\nOP: Fn(Self::Item, Self::Item) -> Self::Item + Sync + Send, ID: Fn() ->\nSelf::Item + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using `op`.\n The argument `identity` should be a closure that can produce\n \"identity\" value which may be inserted into the sequence as\n needed to create opportunities for parallel execution. So, for\n example, if you are doing a summation, then `identity()` ought\n to produce something that represents the zero for your type\n (but consider just calling `sum()` in that case).","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using `op`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50213,"byte_end":50276,"line_start":871,"line_end":871,"column_start":5,"column_end":68}},{"value":"/ The argument `identity` should be a closure that can produce","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50281,"byte_end":50345,"line_start":872,"line_end":872,"column_start":5,"column_end":69}},{"value":"/ \"identity\" value which may be inserted into the sequence as","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50350,"byte_end":50413,"line_start":873,"line_end":873,"column_start":5,"column_end":68}},{"value":"/ needed to create opportunities for parallel execution. So, for","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50418,"byte_end":50484,"line_start":874,"line_end":874,"column_start":5,"column_end":71}},{"value":"/ example, if you are doing a summation, then `identity()` ought","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50489,"byte_end":50555,"line_start":875,"line_end":875,"column_start":5,"column_end":71}},{"value":"/ to produce something that represents the zero for your type","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50560,"byte_end":50623,"line_start":876,"line_end":876,"column_start":5,"column_end":68}},{"value":"/ (but consider just calling `sum()` in that case).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50628,"byte_end":50681,"line_start":877,"line_end":877,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50686,"byte_end":50689,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50694,"byte_end":50708,"line_start":879,"line_end":879,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50713,"byte_end":50716,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50721,"byte_end":50728,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/ // Iterate over a sequence of pairs `(x0, y0), ..., (xN, yN)`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50733,"byte_end":50798,"line_start":882,"line_end":882,"column_start":5,"column_end":70}},{"value":"/ // and use reduce to compute one pair `(x0 + ... + xN, y0 + ... + yN)`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50803,"byte_end":50877,"line_start":883,"line_end":883,"column_start":5,"column_end":79}},{"value":"/ // where the first/second elements are summed separately.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50882,"byte_end":50943,"line_start":884,"line_end":884,"column_start":5,"column_end":66}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50948,"byte_end":50974,"line_start":885,"line_end":885,"column_start":5,"column_end":31}},{"value":"/ let sums = [(0, 1), (5, 6), (16, 2), (8, 9)]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":50979,"byte_end":51027,"line_start":886,"line_end":886,"column_start":5,"column_end":53}},{"value":"/            .par_iter()        // iterating over &(i32, i32)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51032,"byte_end":51095,"line_start":887,"line_end":887,"column_start":5,"column_end":68}},{"value":"/            .cloned()          // iterating over (i32, i32)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51100,"byte_end":51162,"line_start":888,"line_end":888,"column_start":5,"column_end":67}},{"value":"/            .reduce(|| (0, 0), // the \"identity\" is 0 in both columns","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51167,"byte_end":51239,"line_start":889,"line_end":889,"column_start":5,"column_end":77}},{"value":"/                    |a, b| (a.0 + b.0, a.1 + b.1));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51244,"byte_end":51298,"line_start":890,"line_end":890,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(sums, (0 + 5 + 16 + 8, 1 + 6 + 2 + 9));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51303,"byte_end":51357,"line_start":891,"line_end":891,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51362,"byte_end":51369,"line_start":892,"line_end":892,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51374,"byte_end":51377,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ **Note:** unlike a sequential `fold` operation, the order in","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51382,"byte_end":51446,"line_start":894,"line_end":894,"column_start":5,"column_end":69}},{"value":"/ which `op` will be applied to reduce the result is not fully","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51451,"byte_end":51515,"line_start":895,"line_end":895,"column_start":5,"column_end":69}},{"value":"/ specified. So `op` should be [associative] or else the results","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51520,"byte_end":51586,"line_start":896,"line_end":896,"column_start":5,"column_end":71}},{"value":"/ will be non-deterministic. And of course `identity()` should","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51591,"byte_end":51655,"line_start":897,"line_end":897,"column_start":5,"column_end":69}},{"value":"/ produce a true identity.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51660,"byte_end":51688,"line_start":898,"line_end":898,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51693,"byte_end":51696,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":51701,"byte_end":51770,"line_start":900,"line_end":900,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4135},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":53125,"byte_end":53136,"line_start":935,"line_end":935,"column_start":8,"column_end":19},"name":"reduce_with","qualname":"::iter::ParallelIterator::reduce_with","value":"pub fn reduce_with<OP>(Self, OP) -> Option<Self::Item> where\nOP: Fn(Self::Item, Self::Item) -> Self::Item + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using `op`.\n If the iterator is empty, `None` is returned; otherwise,\n `Some` is returned.","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using `op`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52019,"byte_end":52082,"line_start":909,"line_end":909,"column_start":5,"column_end":68}},{"value":"/ If the iterator is empty, `None` is returned; otherwise,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52087,"byte_end":52147,"line_start":910,"line_end":910,"column_start":5,"column_end":65}},{"value":"/ `Some` is returned.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52152,"byte_end":52175,"line_start":911,"line_end":911,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52180,"byte_end":52183,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ This version of `reduce` is simple but somewhat less","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52188,"byte_end":52244,"line_start":913,"line_end":913,"column_start":5,"column_end":61}},{"value":"/ efficient. If possible, it is better to call `reduce()`, which","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52249,"byte_end":52315,"line_start":914,"line_end":914,"column_start":5,"column_end":71}},{"value":"/ requires an identity element.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52320,"byte_end":52353,"line_start":915,"line_end":915,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52358,"byte_end":52361,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52366,"byte_end":52380,"line_start":917,"line_end":917,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52385,"byte_end":52388,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52393,"byte_end":52400,"line_start":919,"line_end":919,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52405,"byte_end":52431,"line_start":920,"line_end":920,"column_start":5,"column_end":31}},{"value":"/ let sums = [(0, 1), (5, 6), (16, 2), (8, 9)]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52436,"byte_end":52484,"line_start":921,"line_end":921,"column_start":5,"column_end":53}},{"value":"/            .par_iter()        // iterating over &(i32, i32)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52489,"byte_end":52552,"line_start":922,"line_end":922,"column_start":5,"column_end":68}},{"value":"/            .cloned()          // iterating over (i32, i32)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52557,"byte_end":52619,"line_start":923,"line_end":923,"column_start":5,"column_end":67}},{"value":"/            .reduce_with(|a, b| (a.0 + b.0, a.1 + b.1))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52624,"byte_end":52682,"line_start":924,"line_end":924,"column_start":5,"column_end":63}},{"value":"/            .unwrap();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52687,"byte_end":52712,"line_start":925,"line_end":925,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(sums, (0 + 5 + 16 + 8, 1 + 6 + 2 + 9));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52717,"byte_end":52771,"line_start":926,"line_end":926,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52776,"byte_end":52783,"line_start":927,"line_end":927,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52788,"byte_end":52791,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ **Note:** unlike a sequential `fold` operation, the order in","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52796,"byte_end":52860,"line_start":929,"line_end":929,"column_start":5,"column_end":69}},{"value":"/ which `op` will be applied to reduce the result is not fully","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52865,"byte_end":52929,"line_start":930,"line_end":930,"column_start":5,"column_end":69}},{"value":"/ specified. So `op` should be [associative] or else the results","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":52934,"byte_end":53000,"line_start":931,"line_end":931,"column_start":5,"column_end":71}},{"value":"/ will be non-deterministic.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":53005,"byte_end":53035,"line_start":932,"line_end":932,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":53040,"byte_end":53043,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":53048,"byte_end":53117,"line_start":934,"line_end":934,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4147},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55320,"byte_end":55330,"line_start":989,"line_end":989,"column_start":8,"column_end":18},"name":"try_reduce","qualname":"::iter::ParallelIterator::try_reduce","value":"pub fn try_reduce<T, OP, ID>(Self, ID, OP) -> Self::Item where OP: Fn(T, T) ->\nSelf::Item + Sync + Send, ID: Fn() -> T + Sync + Send, Self::Item: Try<Ok = T>","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using a fallible `op`.\n The `identity` argument is used the same way as in [`reduce()`].","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using a fallible `op`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":53931,"byte_end":54005,"line_start":958,"line_end":958,"column_start":5,"column_end":79}},{"value":"/ The `identity` argument is used the same way as in [`reduce()`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54010,"byte_end":54078,"line_start":959,"line_end":959,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54083,"byte_end":54086,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ [`reduce()`]: #method.reduce","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54091,"byte_end":54123,"line_start":961,"line_end":961,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54128,"byte_end":54131,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ If a `Result::Err` or `Option::None` item is found, or if `op` reduces","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54136,"byte_end":54210,"line_start":963,"line_end":963,"column_start":5,"column_end":79}},{"value":"/ to one, we will attempt to stop processing the rest of the items in the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54215,"byte_end":54290,"line_start":964,"line_end":964,"column_start":5,"column_end":80}},{"value":"/ iterator as soon as possible, and we will return that terminating value.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54295,"byte_end":54371,"line_start":965,"line_end":965,"column_start":5,"column_end":81}},{"value":"/ Otherwise, we will return the final reduced `Result::Ok(T)` or","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54376,"byte_end":54442,"line_start":966,"line_end":966,"column_start":5,"column_end":71}},{"value":"/ `Option::Some(T)`.  If there are multiple errors in parallel, it is not","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54447,"byte_end":54522,"line_start":967,"line_end":967,"column_start":5,"column_end":80}},{"value":"/ specified which will be returned.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54527,"byte_end":54564,"line_start":968,"line_end":968,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54569,"byte_end":54572,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54577,"byte_end":54591,"line_start":970,"line_end":970,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54596,"byte_end":54599,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54604,"byte_end":54611,"line_start":972,"line_end":972,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54616,"byte_end":54642,"line_start":973,"line_end":973,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54647,"byte_end":54650,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ // Compute the sum of squares, being careful about overflow.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54655,"byte_end":54719,"line_start":975,"line_end":975,"column_start":5,"column_end":69}},{"value":"/ fn sum_squares<I: IntoParallelIterator<Item = i32>>(iter: I) -> Option<i32> {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54724,"byte_end":54805,"line_start":976,"line_end":976,"column_start":5,"column_end":86}},{"value":"/     iter.into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54810,"byte_end":54838,"line_start":977,"line_end":977,"column_start":5,"column_end":33}},{"value":"/         .map(|i| i.checked_mul(i))            // square each item,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54843,"byte_end":54913,"line_start":978,"line_end":978,"column_start":5,"column_end":75}},{"value":"/         .try_reduce(|| 0, i32::checked_add)   // and add them up!","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54918,"byte_end":54987,"line_start":979,"line_end":979,"column_start":5,"column_end":74}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":54992,"byte_end":54997,"line_start":980,"line_end":980,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(sum_squares(0..5), Some(0 + 1 + 4 + 9 + 16));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55002,"byte_end":55062,"line_start":981,"line_end":981,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55067,"byte_end":55070,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ // The sum might overflow","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55075,"byte_end":55104,"line_start":983,"line_end":983,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(sum_squares(0..10_000), None);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55109,"byte_end":55154,"line_start":984,"line_end":984,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55159,"byte_end":55162,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ // Or the squares might overflow before it even reaches `try_reduce`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55167,"byte_end":55239,"line_start":986,"line_end":986,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(sum_squares(1_000_000..1_000_001), None);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55244,"byte_end":55300,"line_start":987,"line_end":987,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55305,"byte_end":55312,"line_start":988,"line_end":988,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4151},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56957,"byte_end":56972,"line_start":1033,"line_end":1033,"column_start":8,"column_end":23},"name":"try_reduce_with","qualname":"::iter::ParallelIterator::try_reduce_with","value":"pub fn try_reduce_with<T, OP>(Self, OP) -> Option<Self::Item> where\nOP: Fn(T, T) -> Self::Item + Sync + Send, Self::Item: Try<Ok = T>","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using a fallible `op`.","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using a fallible `op`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55582,"byte_end":55656,"line_start":998,"line_end":998,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55661,"byte_end":55664,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ Like [`reduce_with()`], if the iterator is empty, `None` is returned;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55669,"byte_end":55742,"line_start":1000,"line_end":1000,"column_start":5,"column_end":78}},{"value":"/ otherwise, `Some` is returned.  Beyond that, it behaves like","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55747,"byte_end":55811,"line_start":1001,"line_end":1001,"column_start":5,"column_end":69}},{"value":"/ [`try_reduce()`] for handling `Err`/`None`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55816,"byte_end":55863,"line_start":1002,"line_end":1002,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55868,"byte_end":55871,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ [`reduce_with()`]: #method.reduce_with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55876,"byte_end":55918,"line_start":1004,"line_end":1004,"column_start":5,"column_end":47}},{"value":"/ [`try_reduce()`]: #method.try_reduce","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55923,"byte_end":55963,"line_start":1005,"line_end":1005,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55968,"byte_end":55971,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ For instance, with `Option` items, the return value may be:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":55976,"byte_end":56039,"line_start":1007,"line_end":1007,"column_start":5,"column_end":68}},{"value":"/ - `None`, the iterator was empty","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56044,"byte_end":56080,"line_start":1008,"line_end":1008,"column_start":5,"column_end":41}},{"value":"/ - `Some(None)`, we stopped after encountering `None`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56085,"byte_end":56142,"line_start":1009,"line_end":1009,"column_start":5,"column_end":62}},{"value":"/ - `Some(Some(x))`, the entire iterator reduced to `x`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56147,"byte_end":56205,"line_start":1010,"line_end":1010,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56210,"byte_end":56213,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ With `Result` items, the nesting is more obvious:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56218,"byte_end":56271,"line_start":1012,"line_end":1012,"column_start":5,"column_end":58}},{"value":"/ - `None`, the iterator was empty","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56276,"byte_end":56312,"line_start":1013,"line_end":1013,"column_start":5,"column_end":41}},{"value":"/ - `Some(Err(e))`, we stopped after encountering an error `e`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56317,"byte_end":56382,"line_start":1014,"line_end":1014,"column_start":5,"column_end":70}},{"value":"/ - `Some(Ok(x))`, the entire iterator reduced to `x`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56387,"byte_end":56443,"line_start":1015,"line_end":1015,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56448,"byte_end":56451,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56456,"byte_end":56470,"line_start":1017,"line_end":1017,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56475,"byte_end":56478,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56483,"byte_end":56490,"line_start":1019,"line_end":1019,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56495,"byte_end":56521,"line_start":1020,"line_end":1020,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56526,"byte_end":56529,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ let files = [\"/dev/null\", \"/does/not/exist\"];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56534,"byte_end":56583,"line_start":1022,"line_end":1022,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56588,"byte_end":56591,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ // Find the biggest file","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56596,"byte_end":56624,"line_start":1024,"line_end":1024,"column_start":5,"column_end":33}},{"value":"/ files.into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56629,"byte_end":56654,"line_start":1025,"line_end":1025,"column_start":5,"column_end":30}},{"value":"/     .map(|path| std::fs::metadata(path).map(|m| (path, m.len())))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56659,"byte_end":56728,"line_start":1026,"line_end":1026,"column_start":5,"column_end":74}},{"value":"/     .try_reduce_with(|a, b| {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56733,"byte_end":56766,"line_start":1027,"line_end":1027,"column_start":5,"column_end":38}},{"value":"/         Ok(if a.1 >= b.1 { a } else { b })","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56771,"byte_end":56817,"line_start":1028,"line_end":1028,"column_start":5,"column_end":51}},{"value":"/     })","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56822,"byte_end":56832,"line_start":1029,"line_end":1029,"column_start":5,"column_end":15}},{"value":"/     .expect(\"Some value, since the iterator is not empty\")","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56837,"byte_end":56899,"line_start":1030,"line_end":1030,"column_start":5,"column_end":67}},{"value":"/     .expect_err(\"not found\");","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56904,"byte_end":56937,"line_start":1031,"line_end":1031,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":56942,"byte_end":56949,"line_start":1032,"line_end":1032,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4154},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62750,"byte_end":62754,"line_start":1174,"line_end":1174,"column_start":8,"column_end":12},"name":"fold","qualname":"::iter::ParallelIterator::fold","value":"pub fn fold<T, ID, F>(Self, ID, F) -> Fold<Self, ID, F> where\nF: Fn(T, Self::Item) -> T + Sync + Send, ID: Fn() -> T + Sync + Send, T: Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Parallel fold is similar to sequential fold except that the\n sequence of items may be subdivided before it is\n folded. Consider a list of numbers like `22 3 77 89 46`. If\n you used sequential fold to add them (`fold(0, |a,b| a+b)`,\n you would wind up first adding 0 + 22, then 22 + 3, then 25 +\n 77, and so forth. The **parallel fold** works similarly except\n that it first breaks up your list into sublists, and hence\n instead of yielding up a single sum at the end, it yields up\n multiple sums. The number of results is nondeterministic, as\n is the point where the breaks occur.","sig":null,"attributes":[{"value":"/ Parallel fold is similar to sequential fold except that the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57177,"byte_end":57240,"line_start":1041,"line_end":1041,"column_start":5,"column_end":68}},{"value":"/ sequence of items may be subdivided before it is","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57245,"byte_end":57297,"line_start":1042,"line_end":1042,"column_start":5,"column_end":57}},{"value":"/ folded. Consider a list of numbers like `22 3 77 89 46`. If","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57302,"byte_end":57365,"line_start":1043,"line_end":1043,"column_start":5,"column_end":68}},{"value":"/ you used sequential fold to add them (`fold(0, |a,b| a+b)`,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57370,"byte_end":57433,"line_start":1044,"line_end":1044,"column_start":5,"column_end":68}},{"value":"/ you would wind up first adding 0 + 22, then 22 + 3, then 25 +","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57438,"byte_end":57503,"line_start":1045,"line_end":1045,"column_start":5,"column_end":70}},{"value":"/ 77, and so forth. The **parallel fold** works similarly except","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57508,"byte_end":57574,"line_start":1046,"line_end":1046,"column_start":5,"column_end":71}},{"value":"/ that it first breaks up your list into sublists, and hence","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57579,"byte_end":57641,"line_start":1047,"line_end":1047,"column_start":5,"column_end":67}},{"value":"/ instead of yielding up a single sum at the end, it yields up","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57646,"byte_end":57710,"line_start":1048,"line_end":1048,"column_start":5,"column_end":69}},{"value":"/ multiple sums. The number of results is nondeterministic, as","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57715,"byte_end":57779,"line_start":1049,"line_end":1049,"column_start":5,"column_end":69}},{"value":"/ is the point where the breaks occur.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57784,"byte_end":57824,"line_start":1050,"line_end":1050,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57829,"byte_end":57832,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ So if did the same parallel fold (`fold(0, |a,b| a+b)`) on","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57837,"byte_end":57899,"line_start":1052,"line_end":1052,"column_start":5,"column_end":67}},{"value":"/ our example list, we might wind up with a sequence of two numbers,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57904,"byte_end":57974,"line_start":1053,"line_end":1053,"column_start":5,"column_end":75}},{"value":"/ like so:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57979,"byte_end":57991,"line_start":1054,"line_end":1054,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":57996,"byte_end":57999,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58004,"byte_end":58018,"line_start":1056,"line_end":1056,"column_start":5,"column_end":19}},{"value":"/ 22 3 77 89 46","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58023,"byte_end":58040,"line_start":1057,"line_end":1057,"column_start":5,"column_end":22}},{"value":"/       |     |","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58045,"byte_end":58062,"line_start":1058,"line_end":1058,"column_start":5,"column_end":22}},{"value":"/     102   135","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58067,"byte_end":58084,"line_start":1059,"line_end":1059,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58089,"byte_end":58096,"line_start":1060,"line_end":1060,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58101,"byte_end":58104,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ Or perhaps these three numbers:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58109,"byte_end":58144,"line_start":1062,"line_end":1062,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58149,"byte_end":58152,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58157,"byte_end":58171,"line_start":1064,"line_end":1064,"column_start":5,"column_end":19}},{"value":"/ 22 3 77 89 46","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58176,"byte_end":58193,"line_start":1065,"line_end":1065,"column_start":5,"column_end":22}},{"value":"/       |  |  |","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58198,"byte_end":58215,"line_start":1066,"line_end":1066,"column_start":5,"column_end":22}},{"value":"/     102 89 46","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58220,"byte_end":58237,"line_start":1067,"line_end":1067,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58242,"byte_end":58249,"line_start":1068,"line_end":1068,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58254,"byte_end":58257,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ In general, Rayon will attempt to find good breaking points","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58262,"byte_end":58325,"line_start":1070,"line_end":1070,"column_start":5,"column_end":68}},{"value":"/ that keep all of your cores busy.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58330,"byte_end":58367,"line_start":1071,"line_end":1071,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58372,"byte_end":58375,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ ### Fold versus reduce","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58380,"byte_end":58406,"line_start":1073,"line_end":1073,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58411,"byte_end":58414,"line_start":1074,"line_end":1074,"column_start":5,"column_end":8}},{"value":"/ The `fold()` and `reduce()` methods each take an identity element","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58419,"byte_end":58488,"line_start":1075,"line_end":1075,"column_start":5,"column_end":74}},{"value":"/ and a combining function, but they operate rather differently.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58493,"byte_end":58559,"line_start":1076,"line_end":1076,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58564,"byte_end":58567,"line_start":1077,"line_end":1077,"column_start":5,"column_end":8}},{"value":"/ `reduce()` requires that the identity function has the same","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58572,"byte_end":58635,"line_start":1078,"line_end":1078,"column_start":5,"column_end":68}},{"value":"/ type as the things you are iterating over, and it fully","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58640,"byte_end":58699,"line_start":1079,"line_end":1079,"column_start":5,"column_end":64}},{"value":"/ reduces the list of items into a single item. So, for example,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58704,"byte_end":58770,"line_start":1080,"line_end":1080,"column_start":5,"column_end":71}},{"value":"/ imagine we are iterating over a list of bytes `bytes: [128_u8,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58775,"byte_end":58841,"line_start":1081,"line_end":1081,"column_start":5,"column_end":71}},{"value":"/ 64_u8, 64_u8]`. If we used `bytes.reduce(|| 0_u8, |a: u8, b:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58846,"byte_end":58910,"line_start":1082,"line_end":1082,"column_start":5,"column_end":69}},{"value":"/ u8| a + b)`, we would get an overflow. This is because `0`,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58915,"byte_end":58978,"line_start":1083,"line_end":1083,"column_start":5,"column_end":68}},{"value":"/ `a`, and `b` here are all bytes, just like the numbers in the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":58983,"byte_end":59048,"line_start":1084,"line_end":1084,"column_start":5,"column_end":70}},{"value":"/ list (I wrote the types explicitly above, but those are the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59053,"byte_end":59116,"line_start":1085,"line_end":1085,"column_start":5,"column_end":68}},{"value":"/ only types you can use). To avoid the overflow, we would need","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59121,"byte_end":59186,"line_start":1086,"line_end":1086,"column_start":5,"column_end":70}},{"value":"/ to do something like `bytes.map(|b| b as u32).reduce(|| 0, |a,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59191,"byte_end":59257,"line_start":1087,"line_end":1087,"column_start":5,"column_end":71}},{"value":"/ b| a + b)`, in which case our result would be `256`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59262,"byte_end":59318,"line_start":1088,"line_end":1088,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59323,"byte_end":59326,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ In contrast, with `fold()`, the identity function does not","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59331,"byte_end":59393,"line_start":1090,"line_end":1090,"column_start":5,"column_end":67}},{"value":"/ have to have the same type as the things you are iterating","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59398,"byte_end":59460,"line_start":1091,"line_end":1091,"column_start":5,"column_end":67}},{"value":"/ over, and you potentially get back many results. So, if we","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59465,"byte_end":59527,"line_start":1092,"line_end":1092,"column_start":5,"column_end":67}},{"value":"/ continue with the `bytes` example from the previous paragraph,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59532,"byte_end":59598,"line_start":1093,"line_end":1093,"column_start":5,"column_end":71}},{"value":"/ we could do `bytes.fold(|| 0_u32, |a, b| a + (b as u32))` to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59603,"byte_end":59667,"line_start":1094,"line_end":1094,"column_start":5,"column_end":69}},{"value":"/ convert our bytes into `u32`. And of course we might not get","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59672,"byte_end":59736,"line_start":1095,"line_end":1095,"column_start":5,"column_end":69}},{"value":"/ back a single sum.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59741,"byte_end":59763,"line_start":1096,"line_end":1096,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59768,"byte_end":59771,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ There is a more subtle distinction as well, though it's","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59776,"byte_end":59835,"line_start":1098,"line_end":1098,"column_start":5,"column_end":64}},{"value":"/ actually implied by the above points. When you use `reduce()`,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59840,"byte_end":59906,"line_start":1099,"line_end":1099,"column_start":5,"column_end":71}},{"value":"/ your reduction function is sometimes called with values that","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59911,"byte_end":59975,"line_start":1100,"line_end":1100,"column_start":5,"column_end":69}},{"value":"/ were never part of your original parallel iterator (for","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":59980,"byte_end":60039,"line_start":1101,"line_end":1101,"column_start":5,"column_end":64}},{"value":"/ example, both the left and right might be a partial sum). With","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60044,"byte_end":60110,"line_start":1102,"line_end":1102,"column_start":5,"column_end":71}},{"value":"/ `fold()`, in contrast, the left value in the fold function is","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60115,"byte_end":60180,"line_start":1103,"line_end":1103,"column_start":5,"column_end":70}},{"value":"/ always the accumulator, and the right value is always from","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60185,"byte_end":60247,"line_start":1104,"line_end":1104,"column_start":5,"column_end":67}},{"value":"/ your original sequence.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60252,"byte_end":60279,"line_start":1105,"line_end":1105,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60284,"byte_end":60287,"line_start":1106,"line_end":1106,"column_start":5,"column_end":8}},{"value":"/ ### Fold vs Map/Reduce","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60292,"byte_end":60318,"line_start":1107,"line_end":1107,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60323,"byte_end":60326,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ Fold makes sense if you have some operation where it is","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60331,"byte_end":60390,"line_start":1109,"line_end":1109,"column_start":5,"column_end":64}},{"value":"/ cheaper to create groups of elements at a time. For example,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60395,"byte_end":60459,"line_start":1110,"line_end":1110,"column_start":5,"column_end":69}},{"value":"/ imagine collecting characters into a string. If you were going","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60464,"byte_end":60530,"line_start":1111,"line_end":1111,"column_start":5,"column_end":71}},{"value":"/ to use map/reduce, you might try this:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60535,"byte_end":60577,"line_start":1112,"line_end":1112,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60582,"byte_end":60585,"line_start":1113,"line_end":1113,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60590,"byte_end":60597,"line_start":1114,"line_end":1114,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60602,"byte_end":60628,"line_start":1115,"line_end":1115,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60633,"byte_end":60636,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ let s =","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60641,"byte_end":60652,"line_start":1117,"line_end":1117,"column_start":5,"column_end":16}},{"value":"/     ['a', 'b', 'c', 'd', 'e']","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60657,"byte_end":60690,"line_start":1118,"line_end":1118,"column_start":5,"column_end":38}},{"value":"/     .par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60695,"byte_end":60714,"line_start":1119,"line_end":1119,"column_start":5,"column_end":24}},{"value":"/     .map(|c: &char| format!(\"{}\", c))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60719,"byte_end":60760,"line_start":1120,"line_end":1120,"column_start":5,"column_end":46}},{"value":"/     .reduce(|| String::new(),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60765,"byte_end":60798,"line_start":1121,"line_end":1121,"column_start":5,"column_end":38}},{"value":"/             |mut a: String, b: String| { a.push_str(&b); a });","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60803,"byte_end":60869,"line_start":1122,"line_end":1122,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60874,"byte_end":60877,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"abcde\");","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60882,"byte_end":60909,"line_start":1124,"line_end":1124,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60914,"byte_end":60921,"line_start":1125,"line_end":1125,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60926,"byte_end":60929,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ Because reduce produces the same type of element as its input,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":60934,"byte_end":61000,"line_start":1127,"line_end":1127,"column_start":5,"column_end":71}},{"value":"/ you have to first map each character into a string, and then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61005,"byte_end":61069,"line_start":1128,"line_end":1128,"column_start":5,"column_end":69}},{"value":"/ you can reduce them. This means we create one string per","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61074,"byte_end":61134,"line_start":1129,"line_end":1129,"column_start":5,"column_end":65}},{"value":"/ element in our iterator -- not so great. Using `fold`, we can","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61139,"byte_end":61204,"line_start":1130,"line_end":1130,"column_start":5,"column_end":70}},{"value":"/ do this instead:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61209,"byte_end":61229,"line_start":1131,"line_end":1131,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61234,"byte_end":61237,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61242,"byte_end":61249,"line_start":1133,"line_end":1133,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61254,"byte_end":61280,"line_start":1134,"line_end":1134,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61285,"byte_end":61288,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ let s =","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61293,"byte_end":61304,"line_start":1136,"line_end":1136,"column_start":5,"column_end":16}},{"value":"/     ['a', 'b', 'c', 'd', 'e']","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61309,"byte_end":61342,"line_start":1137,"line_end":1137,"column_start":5,"column_end":38}},{"value":"/     .par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61347,"byte_end":61366,"line_start":1138,"line_end":1138,"column_start":5,"column_end":24}},{"value":"/     .fold(|| String::new(),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61371,"byte_end":61402,"line_start":1139,"line_end":1139,"column_start":5,"column_end":36}},{"value":"/             |mut s: String, c: &char| { s.push(*c); s })","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61407,"byte_end":61467,"line_start":1140,"line_end":1140,"column_start":5,"column_end":65}},{"value":"/     .reduce(|| String::new(),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61472,"byte_end":61505,"line_start":1141,"line_end":1141,"column_start":5,"column_end":38}},{"value":"/             |mut a: String, b: String| { a.push_str(&b); a });","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61510,"byte_end":61576,"line_start":1142,"line_end":1142,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61581,"byte_end":61584,"line_start":1143,"line_end":1143,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"abcde\");","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61589,"byte_end":61616,"line_start":1144,"line_end":1144,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61621,"byte_end":61628,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61633,"byte_end":61636,"line_start":1146,"line_end":1146,"column_start":5,"column_end":8}},{"value":"/ Now `fold` will process groups of our characters at a time,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61641,"byte_end":61704,"line_start":1147,"line_end":1147,"column_start":5,"column_end":68}},{"value":"/ and we only make one string per group. We should wind up with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61709,"byte_end":61774,"line_start":1148,"line_end":1148,"column_start":5,"column_end":70}},{"value":"/ some small-ish number of strings roughly proportional to the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61779,"byte_end":61843,"line_start":1149,"line_end":1149,"column_start":5,"column_end":69}},{"value":"/ number of CPUs you have (it will ultimately depend on how busy","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61848,"byte_end":61914,"line_start":1150,"line_end":1150,"column_start":5,"column_end":71}},{"value":"/ your processors are). Note that we still need to do a reduce","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61919,"byte_end":61983,"line_start":1151,"line_end":1151,"column_start":5,"column_end":69}},{"value":"/ afterwards to combine those groups of strings into a single","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":61988,"byte_end":62051,"line_start":1152,"line_end":1152,"column_start":5,"column_end":68}},{"value":"/ string.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62056,"byte_end":62067,"line_start":1153,"line_end":1153,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62072,"byte_end":62075,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ You could use a similar trick to save partial results (e.g., a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62080,"byte_end":62146,"line_start":1155,"line_end":1155,"column_start":5,"column_end":71}},{"value":"/ cache) or something similar.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62151,"byte_end":62183,"line_start":1156,"line_end":1156,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62188,"byte_end":62191,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ ### Combining fold with other operations","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62196,"byte_end":62240,"line_start":1158,"line_end":1158,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62245,"byte_end":62248,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/ You can combine `fold` with `reduce` if you want to produce a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62253,"byte_end":62318,"line_start":1160,"line_end":1160,"column_start":5,"column_end":70}},{"value":"/ single value. This is then roughly equivalent to a map/reduce","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62323,"byte_end":62388,"line_start":1161,"line_end":1161,"column_start":5,"column_end":70}},{"value":"/ combination in effect:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62393,"byte_end":62419,"line_start":1162,"line_end":1162,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62424,"byte_end":62427,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62432,"byte_end":62439,"line_start":1164,"line_end":1164,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62444,"byte_end":62470,"line_start":1165,"line_end":1165,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62475,"byte_end":62478,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62483,"byte_end":62508,"line_start":1167,"line_end":1167,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62513,"byte_end":62548,"line_start":1168,"line_end":1168,"column_start":5,"column_end":40}},{"value":"/                .fold(|| 0_u32, |a: u32, b: u8| a + (b as u32))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62553,"byte_end":62619,"line_start":1169,"line_end":1169,"column_start":5,"column_end":71}},{"value":"/                .sum::<u32>();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62624,"byte_end":62657,"line_start":1170,"line_end":1170,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62662,"byte_end":62665,"line_start":1171,"line_end":1171,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, (0..22).sum()); // compare to sequential","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62670,"byte_end":62730,"line_start":1172,"line_end":1172,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62735,"byte_end":62742,"line_start":1173,"line_end":1173,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4158},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63679,"byte_end":63688,"line_start":1202,"line_end":1202,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::ParallelIterator::fold_with","value":"pub fn fold_with<F, T>(Self, T, F) -> FoldWith<Self, T, F> where\nF: Fn(T, Self::Item) -> T + Sync + Send, T: Send + Clone","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Applies `fold_op` to the given `init` value with each item of this\n iterator, finally producing the value for further use.","sig":null,"attributes":[{"value":"/ Applies `fold_op` to the given `init` value with each item of this","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":62991,"byte_end":63061,"line_start":1183,"line_end":1183,"column_start":5,"column_end":75}},{"value":"/ iterator, finally producing the value for further use.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63066,"byte_end":63124,"line_start":1184,"line_end":1184,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63129,"byte_end":63132,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ This works essentially like `fold(|| init.clone(), fold_op)`, except","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63137,"byte_end":63209,"line_start":1186,"line_end":1186,"column_start":5,"column_end":77}},{"value":"/ it doesn't require the `init` type to be `Sync`, nor any other form","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63214,"byte_end":63285,"line_start":1187,"line_end":1187,"column_start":5,"column_end":76}},{"value":"/ of added synchronization.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63290,"byte_end":63319,"line_start":1188,"line_end":1188,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63324,"byte_end":63327,"line_start":1189,"line_end":1189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63332,"byte_end":63346,"line_start":1190,"line_end":1190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63351,"byte_end":63354,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63359,"byte_end":63366,"line_start":1192,"line_end":1192,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63371,"byte_end":63397,"line_start":1193,"line_end":1193,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63402,"byte_end":63405,"line_start":1194,"line_end":1194,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63410,"byte_end":63435,"line_start":1195,"line_end":1195,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63440,"byte_end":63475,"line_start":1196,"line_end":1196,"column_start":5,"column_end":40}},{"value":"/                .fold_with(0_u32, |a: u32, b: u8| a + (b as u32))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63480,"byte_end":63548,"line_start":1197,"line_end":1197,"column_start":5,"column_end":73}},{"value":"/                .sum::<u32>();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63553,"byte_end":63586,"line_start":1198,"line_end":1198,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63591,"byte_end":63594,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, (0..22).sum()); // compare to sequential","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63599,"byte_end":63659,"line_start":1200,"line_end":1200,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63664,"byte_end":63671,"line_start":1201,"line_end":1201,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4161},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64820,"byte_end":64828,"line_start":1235,"line_end":1235,"column_start":8,"column_end":16},"name":"try_fold","qualname":"::iter::ParallelIterator::try_fold","value":"pub fn try_fold<T, R, ID, F>(Self, ID, F) -> TryFold<Self, R, ID, F> where\nF: Fn(T, Self::Item) -> R + Sync + Send, ID: Fn() -> T + Sync + Send,\nR: Try<Ok = T> + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Perform a fallible parallel fold.","sig":null,"attributes":[{"value":"/ Perform a fallible parallel fold.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63890,"byte_end":63927,"line_start":1210,"line_end":1210,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63932,"byte_end":63935,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ This is a variation of [`fold()`] for operations which can fail with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":63940,"byte_end":64012,"line_start":1212,"line_end":1212,"column_start":5,"column_end":77}},{"value":"/ `Option::None` or `Result::Err`.  The first such failure stops","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64017,"byte_end":64083,"line_start":1213,"line_end":1213,"column_start":5,"column_end":71}},{"value":"/ processing the local set of items, without affecting other folds in the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64088,"byte_end":64163,"line_start":1214,"line_end":1214,"column_start":5,"column_end":80}},{"value":"/ iterator's subdivisions.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64168,"byte_end":64196,"line_start":1215,"line_end":1215,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64201,"byte_end":64204,"line_start":1216,"line_end":1216,"column_start":5,"column_end":8}},{"value":"/ Often, `try_fold()` will be followed by [`try_reduce()`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64209,"byte_end":64269,"line_start":1217,"line_end":1217,"column_start":5,"column_end":65}},{"value":"/ for a final reduction and global short-circuiting effect.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64274,"byte_end":64335,"line_start":1218,"line_end":1218,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64340,"byte_end":64343,"line_start":1219,"line_end":1219,"column_start":5,"column_end":8}},{"value":"/ [`fold()`]: #method.fold","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64348,"byte_end":64376,"line_start":1220,"line_end":1220,"column_start":5,"column_end":33}},{"value":"/ [`try_reduce()`]: #method.try_reduce","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64381,"byte_end":64421,"line_start":1221,"line_end":1221,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64426,"byte_end":64429,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64434,"byte_end":64448,"line_start":1223,"line_end":1223,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64453,"byte_end":64456,"line_start":1224,"line_end":1224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64461,"byte_end":64468,"line_start":1225,"line_end":1225,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64473,"byte_end":64499,"line_start":1226,"line_end":1226,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64504,"byte_end":64507,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64512,"byte_end":64537,"line_start":1228,"line_end":1228,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64542,"byte_end":64577,"line_start":1229,"line_end":1229,"column_start":5,"column_end":40}},{"value":"/                .try_fold(|| 0_u32, |a: u32, b: u8| a.checked_add(b as u32))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64582,"byte_end":64661,"line_start":1230,"line_end":1230,"column_start":5,"column_end":84}},{"value":"/                .try_reduce(|| 0, u32::checked_add);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64666,"byte_end":64721,"line_start":1231,"line_end":1231,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64726,"byte_end":64729,"line_start":1232,"line_end":1232,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, Some((0..22).sum())); // compare to sequential","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64734,"byte_end":64800,"line_start":1233,"line_end":1233,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":64805,"byte_end":64812,"line_start":1234,"line_end":1234,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4166},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65747,"byte_end":65760,"line_start":1262,"line_end":1262,"column_start":8,"column_end":21},"name":"try_fold_with","qualname":"::iter::ParallelIterator::try_fold_with","value":"pub fn try_fold_with<F, T, R>(Self, T, F) -> TryFoldWith<Self, R, F> where\nF: Fn(T, Self::Item) -> R + Sync + Send, R: Try<Ok = T> + Send, T: Clone +\nSend","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Perform a fallible parallel fold with a cloneable `init` value.","sig":null,"attributes":[{"value":"/ Perform a fallible parallel fold with a cloneable `init` value.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65091,"byte_end":65158,"line_start":1244,"line_end":1244,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65163,"byte_end":65166,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`fold_with()`] and the failure","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65171,"byte_end":65244,"line_start":1246,"line_end":1246,"column_start":5,"column_end":78}},{"value":"/ semantics of [`try_fold()`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65249,"byte_end":65281,"line_start":1247,"line_end":1247,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65286,"byte_end":65289,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ [`fold_with()`]: #method.fold_with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65294,"byte_end":65332,"line_start":1249,"line_end":1249,"column_start":5,"column_end":43}},{"value":"/ [`try_fold()`]: #method.try_fold","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65337,"byte_end":65373,"line_start":1250,"line_end":1250,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65378,"byte_end":65381,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65386,"byte_end":65393,"line_start":1252,"line_end":1252,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65398,"byte_end":65424,"line_start":1253,"line_end":1253,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65429,"byte_end":65432,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65437,"byte_end":65462,"line_start":1255,"line_end":1255,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65467,"byte_end":65502,"line_start":1256,"line_end":1256,"column_start":5,"column_end":40}},{"value":"/                .try_fold_with(0_u32, |a: u32, b: u8| a.checked_add(b as u32))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65507,"byte_end":65588,"line_start":1257,"line_end":1257,"column_start":5,"column_end":86}},{"value":"/                .try_reduce(|| 0, u32::checked_add);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65593,"byte_end":65648,"line_start":1258,"line_end":1258,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65653,"byte_end":65656,"line_start":1259,"line_end":1259,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, Some((0..22).sum())); // compare to sequential","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65661,"byte_end":65727,"line_start":1260,"line_end":1260,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":65732,"byte_end":65739,"line_start":1261,"line_end":1261,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4170},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66785,"byte_end":66788,"line_start":1295,"line_end":1295,"column_start":8,"column_end":11},"name":"sum","qualname":"::iter::ParallelIterator::sum","value":"pub fn sum<S>(Self) -> S where S: Send + Sum<Self::Item> + Sum<S>","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Sums up the items in the iterator.","sig":null,"attributes":[{"value":"/ Sums up the items in the iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66002,"byte_end":66040,"line_start":1271,"line_end":1271,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66045,"byte_end":66048,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ Note that the order in items will be reduced is not specified,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66053,"byte_end":66119,"line_start":1273,"line_end":1273,"column_start":5,"column_end":71}},{"value":"/ so if the `+` operator is not truly [associative] \\(as is the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66124,"byte_end":66189,"line_start":1274,"line_end":1274,"column_start":5,"column_end":70}},{"value":"/ case for floating point numbers), then the results are not","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66194,"byte_end":66256,"line_start":1275,"line_end":1275,"column_start":5,"column_end":67}},{"value":"/ fully deterministic.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66261,"byte_end":66285,"line_start":1276,"line_end":1276,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66290,"byte_end":66293,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66298,"byte_end":66367,"line_start":1278,"line_end":1278,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66372,"byte_end":66375,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce(|| 0, |a, b| a + b)`,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66380,"byte_end":66442,"line_start":1280,"line_end":1280,"column_start":5,"column_end":67}},{"value":"/ except that the type of `0` and the `+` operation may vary","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66447,"byte_end":66509,"line_start":1281,"line_end":1281,"column_start":5,"column_end":67}},{"value":"/ depending on the type of value being produced.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66514,"byte_end":66564,"line_start":1282,"line_end":1282,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66569,"byte_end":66572,"line_start":1283,"line_end":1283,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66577,"byte_end":66591,"line_start":1284,"line_end":1284,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66596,"byte_end":66599,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66604,"byte_end":66611,"line_start":1286,"line_end":1286,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66616,"byte_end":66642,"line_start":1287,"line_end":1287,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66647,"byte_end":66650,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 5, 7];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66655,"byte_end":66677,"line_start":1289,"line_end":1289,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66682,"byte_end":66685,"line_start":1290,"line_end":1290,"column_start":5,"column_end":8}},{"value":"/ let sum: i32 = a.par_iter().sum();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66690,"byte_end":66728,"line_start":1291,"line_end":1291,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66733,"byte_end":66736,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, 13);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66741,"byte_end":66765,"line_start":1293,"line_end":1293,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66770,"byte_end":66777,"line_start":1294,"line_end":1294,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4172},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67787,"byte_end":67794,"line_start":1328,"line_end":1328,"column_start":8,"column_end":15},"name":"product","qualname":"::iter::ParallelIterator::product","value":"pub fn product<P>(Self) -> P where P: Send + Product<Self::Item> + Product<P>","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Multiplies all the items in the iterator.","sig":null,"attributes":[{"value":"/ Multiplies all the items in the iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66897,"byte_end":66942,"line_start":1302,"line_end":1302,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66947,"byte_end":66950,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ Note that the order in items will be reduced is not specified,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":66955,"byte_end":67021,"line_start":1304,"line_end":1304,"column_start":5,"column_end":71}},{"value":"/ so if the `*` operator is not truly [associative] \\(as is the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67026,"byte_end":67091,"line_start":1305,"line_end":1305,"column_start":5,"column_end":70}},{"value":"/ case for floating point numbers), then the results are not","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67096,"byte_end":67158,"line_start":1306,"line_end":1306,"column_start":5,"column_end":67}},{"value":"/ fully deterministic.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67163,"byte_end":67187,"line_start":1307,"line_end":1307,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67192,"byte_end":67195,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67200,"byte_end":67269,"line_start":1309,"line_end":1309,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67274,"byte_end":67277,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce(|| 1, |a, b| a * b)`,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67282,"byte_end":67344,"line_start":1311,"line_end":1311,"column_start":5,"column_end":67}},{"value":"/ except that the type of `1` and the `*` operation may vary","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67349,"byte_end":67411,"line_start":1312,"line_end":1312,"column_start":5,"column_end":67}},{"value":"/ depending on the type of value being produced.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67416,"byte_end":67466,"line_start":1313,"line_end":1313,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67471,"byte_end":67474,"line_start":1314,"line_end":1314,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67479,"byte_end":67493,"line_start":1315,"line_end":1315,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67498,"byte_end":67501,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67506,"byte_end":67513,"line_start":1317,"line_end":1317,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67518,"byte_end":67544,"line_start":1318,"line_end":1318,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67549,"byte_end":67552,"line_start":1319,"line_end":1319,"column_start":5,"column_end":8}},{"value":"/ fn factorial(n: u32) -> u32 {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67557,"byte_end":67590,"line_start":1320,"line_end":1320,"column_start":5,"column_end":38}},{"value":"/    (1..n+1).into_par_iter().product()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67595,"byte_end":67636,"line_start":1321,"line_end":1321,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67641,"byte_end":67646,"line_start":1322,"line_end":1322,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67651,"byte_end":67654,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(factorial(0), 1);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67659,"byte_end":67691,"line_start":1324,"line_end":1324,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(factorial(1), 1);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67696,"byte_end":67728,"line_start":1325,"line_end":1325,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(factorial(5), 120);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67733,"byte_end":67767,"line_start":1326,"line_end":1326,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67772,"byte_end":67779,"line_start":1327,"line_end":1327,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4174},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68637,"byte_end":68640,"line_start":1358,"line_end":1358,"column_start":8,"column_end":11},"name":"min","qualname":"::iter::ParallelIterator::min","value":"pub fn min(Self) -> Option<Self::Item> where Self::Item: Ord","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Computes the minimum of all the items in the iterator. If the\n iterator is empty, `None` is returned; otherwise, `Some(min)`\n is returned.","sig":null,"attributes":[{"value":"/ Computes the minimum of all the items in the iterator. If the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67919,"byte_end":67984,"line_start":1335,"line_end":1335,"column_start":5,"column_end":70}},{"value":"/ iterator is empty, `None` is returned; otherwise, `Some(min)`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":67989,"byte_end":68054,"line_start":1336,"line_end":1336,"column_start":5,"column_end":70}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68059,"byte_end":68075,"line_start":1337,"line_end":1337,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68080,"byte_end":68083,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68088,"byte_end":68153,"line_start":1339,"line_end":1339,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68158,"byte_end":68224,"line_start":1340,"line_end":1340,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68229,"byte_end":68267,"line_start":1341,"line_end":1341,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68272,"byte_end":68275,"line_start":1342,"line_end":1342,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce_with(|a, b| cmp::min(a, b))`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68280,"byte_end":68350,"line_start":1343,"line_end":1343,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68355,"byte_end":68358,"line_start":1344,"line_end":1344,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68363,"byte_end":68377,"line_start":1345,"line_end":1345,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68382,"byte_end":68385,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68390,"byte_end":68397,"line_start":1347,"line_end":1347,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68402,"byte_end":68428,"line_start":1348,"line_end":1348,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68433,"byte_end":68436,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ let a = [45, 74, 32];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68441,"byte_end":68466,"line_start":1350,"line_end":1350,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68471,"byte_end":68474,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min(), Some(&32));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68479,"byte_end":68525,"line_start":1352,"line_end":1352,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68530,"byte_end":68533,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ let b: [i32; 0] = [];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68538,"byte_end":68563,"line_start":1354,"line_end":1354,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68568,"byte_end":68571,"line_start":1355,"line_end":1355,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b.par_iter().min(), None);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68576,"byte_end":68617,"line_start":1356,"line_end":1356,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68622,"byte_end":68629,"line_start":1357,"line_end":1357,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4175},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69379,"byte_end":69385,"line_start":1382,"line_end":1382,"column_start":8,"column_end":14},"name":"min_by","qualname":"::iter::ParallelIterator::min_by","value":"pub fn min_by<F>(Self, F) -> Option<Self::Item> where F: Sync + Send +\nFn(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Computes the minimum of all the items in the iterator with respect to\n the given comparison function. If the iterator is empty, `None` is\n returned; otherwise, `Some(min)` is returned.","sig":null,"attributes":[{"value":"/ Computes the minimum of all the items in the iterator with respect to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68756,"byte_end":68829,"line_start":1365,"line_end":1365,"column_start":5,"column_end":78}},{"value":"/ the given comparison function. If the iterator is empty, `None` is","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68834,"byte_end":68904,"line_start":1366,"line_end":1366,"column_start":5,"column_end":75}},{"value":"/ returned; otherwise, `Some(min)` is returned.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68909,"byte_end":68958,"line_start":1367,"line_end":1367,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68963,"byte_end":68966,"line_start":1368,"line_end":1368,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":68971,"byte_end":69036,"line_start":1369,"line_end":1369,"column_start":5,"column_end":70}},{"value":"/ specified, so if the comparison function is not associative, then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69041,"byte_end":69110,"line_start":1370,"line_end":1370,"column_start":5,"column_end":74}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69115,"byte_end":69153,"line_start":1371,"line_end":1371,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69158,"byte_end":69161,"line_start":1372,"line_end":1372,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69166,"byte_end":69180,"line_start":1373,"line_end":1373,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69185,"byte_end":69188,"line_start":1374,"line_end":1374,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69193,"byte_end":69200,"line_start":1375,"line_end":1375,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69205,"byte_end":69231,"line_start":1376,"line_end":1376,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69236,"byte_end":69239,"line_start":1377,"line_end":1377,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 77, 53, 240, -1];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69244,"byte_end":69282,"line_start":1378,"line_end":1378,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69287,"byte_end":69290,"line_start":1379,"line_end":1379,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min_by(|x, y| x.cmp(y)), Some(&-3));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69295,"byte_end":69359,"line_start":1380,"line_end":1380,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69364,"byte_end":69371,"line_start":1381,"line_end":1381,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4182},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70353,"byte_end":70363,"line_start":1413,"line_end":1413,"column_start":8,"column_end":18},"name":"min_by_key","qualname":"::iter::ParallelIterator::min_by_key","value":"pub fn min_by_key<K, F>(Self, F) -> Option<Self::Item> where K: Ord + Send,\nF: Sync + Send + Fn(&Self::Item) -> K","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Computes the item that yields the minimum value for the given\n function. If the iterator is empty, `None` is returned;\n otherwise, `Some(item)` is returned.","sig":null,"attributes":[{"value":"/ Computes the item that yields the minimum value for the given","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69755,"byte_end":69820,"line_start":1396,"line_end":1396,"column_start":5,"column_end":70}},{"value":"/ function. If the iterator is empty, `None` is returned;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69825,"byte_end":69884,"line_start":1397,"line_end":1397,"column_start":5,"column_end":64}},{"value":"/ otherwise, `Some(item)` is returned.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69889,"byte_end":69929,"line_start":1398,"line_end":1398,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69934,"byte_end":69937,"line_start":1399,"line_end":1399,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":69942,"byte_end":70007,"line_start":1400,"line_end":1400,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70012,"byte_end":70078,"line_start":1401,"line_end":1401,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70083,"byte_end":70121,"line_start":1402,"line_end":1402,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70126,"byte_end":70129,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70134,"byte_end":70148,"line_start":1404,"line_end":1404,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70153,"byte_end":70156,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70161,"byte_end":70168,"line_start":1406,"line_end":1406,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70173,"byte_end":70199,"line_start":1407,"line_end":1407,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70204,"byte_end":70207,"line_start":1408,"line_end":1408,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 34, 2, 5, -10, -3, -23];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70212,"byte_end":70257,"line_start":1409,"line_end":1409,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70262,"byte_end":70265,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min_by_key(|x| x.abs()), Some(&2));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70270,"byte_end":70333,"line_start":1411,"line_end":1411,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70338,"byte_end":70345,"line_start":1412,"line_end":1412,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4194},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71596,"byte_end":71599,"line_start":1456,"line_end":1456,"column_start":8,"column_end":11},"name":"max","qualname":"::iter::ParallelIterator::max","value":"pub fn max(Self) -> Option<Self::Item> where Self::Item: Ord","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Computes the maximum of all the items in the iterator. If the\n iterator is empty, `None` is returned; otherwise, `Some(max)`\n is returned.","sig":null,"attributes":[{"value":"/ Computes the maximum of all the items in the iterator. If the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70878,"byte_end":70943,"line_start":1433,"line_end":1433,"column_start":5,"column_end":70}},{"value":"/ iterator is empty, `None` is returned; otherwise, `Some(max)`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":70948,"byte_end":71013,"line_start":1434,"line_end":1434,"column_start":5,"column_end":70}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71018,"byte_end":71034,"line_start":1435,"line_end":1435,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71039,"byte_end":71042,"line_start":1436,"line_end":1436,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71047,"byte_end":71112,"line_start":1437,"line_end":1437,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71117,"byte_end":71183,"line_start":1438,"line_end":1438,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71188,"byte_end":71226,"line_start":1439,"line_end":1439,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71231,"byte_end":71234,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce_with(|a, b| cmp::max(a, b))`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71239,"byte_end":71309,"line_start":1441,"line_end":1441,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71314,"byte_end":71317,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71322,"byte_end":71336,"line_start":1443,"line_end":1443,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71341,"byte_end":71344,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71349,"byte_end":71356,"line_start":1445,"line_end":1445,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71361,"byte_end":71387,"line_start":1446,"line_end":1446,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71392,"byte_end":71395,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ let a = [45, 74, 32];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71400,"byte_end":71425,"line_start":1448,"line_end":1448,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71430,"byte_end":71433,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max(), Some(&74));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71438,"byte_end":71484,"line_start":1450,"line_end":1450,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71489,"byte_end":71492,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ let b: [i32; 0] = [];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71497,"byte_end":71522,"line_start":1452,"line_end":1452,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71527,"byte_end":71530,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b.par_iter().max(), None);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71535,"byte_end":71576,"line_start":1454,"line_end":1454,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71581,"byte_end":71588,"line_start":1455,"line_end":1455,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4195},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72352,"byte_end":72358,"line_start":1480,"line_end":1480,"column_start":8,"column_end":14},"name":"max_by","qualname":"::iter::ParallelIterator::max_by","value":"pub fn max_by<F>(Self, F) -> Option<Self::Item> where F: Sync + Send +\nFn(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Computes the maximum of all the items in the iterator with respect to\n the given comparison function. If the iterator is empty, `None` is\n returned; otherwise, `Some(min)` is returned.","sig":null,"attributes":[{"value":"/ Computes the maximum of all the items in the iterator with respect to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71715,"byte_end":71788,"line_start":1463,"line_end":1463,"column_start":5,"column_end":78}},{"value":"/ the given comparison function. If the iterator is empty, `None` is","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71793,"byte_end":71863,"line_start":1464,"line_end":1464,"column_start":5,"column_end":75}},{"value":"/ returned; otherwise, `Some(min)` is returned.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71868,"byte_end":71917,"line_start":1465,"line_end":1465,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71922,"byte_end":71925,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":71930,"byte_end":71995,"line_start":1467,"line_end":1467,"column_start":5,"column_end":70}},{"value":"/ specified, so if the comparison function is not associative, then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72000,"byte_end":72069,"line_start":1468,"line_end":1468,"column_start":5,"column_end":74}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72074,"byte_end":72112,"line_start":1469,"line_end":1469,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72117,"byte_end":72120,"line_start":1470,"line_end":1470,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72125,"byte_end":72139,"line_start":1471,"line_end":1471,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72144,"byte_end":72147,"line_start":1472,"line_end":1472,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72152,"byte_end":72159,"line_start":1473,"line_end":1473,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72164,"byte_end":72190,"line_start":1474,"line_end":1474,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72195,"byte_end":72198,"line_start":1475,"line_end":1475,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 77, 53, 240, -1];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72203,"byte_end":72241,"line_start":1476,"line_end":1476,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72246,"byte_end":72249,"line_start":1477,"line_end":1477,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max_by(|x, y| x.abs().cmp(&y.abs())), Some(&240));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72254,"byte_end":72332,"line_start":1478,"line_end":1478,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72337,"byte_end":72344,"line_start":1479,"line_end":1479,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4202},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73327,"byte_end":73337,"line_start":1511,"line_end":1511,"column_start":8,"column_end":18},"name":"max_by_key","qualname":"::iter::ParallelIterator::max_by_key","value":"pub fn max_by_key<K, F>(Self, F) -> Option<Self::Item> where K: Ord + Send,\nF: Sync + Send + Fn(&Self::Item) -> K","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Computes the item that yields the maximum value for the given\n function. If the iterator is empty, `None` is returned;\n otherwise, `Some(item)` is returned.","sig":null,"attributes":[{"value":"/ Computes the item that yields the maximum value for the given","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72728,"byte_end":72793,"line_start":1494,"line_end":1494,"column_start":5,"column_end":70}},{"value":"/ function. If the iterator is empty, `None` is returned;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72798,"byte_end":72857,"line_start":1495,"line_end":1495,"column_start":5,"column_end":64}},{"value":"/ otherwise, `Some(item)` is returned.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72862,"byte_end":72902,"line_start":1496,"line_end":1496,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72907,"byte_end":72910,"line_start":1497,"line_end":1497,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72915,"byte_end":72980,"line_start":1498,"line_end":1498,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":72985,"byte_end":73051,"line_start":1499,"line_end":1499,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73056,"byte_end":73094,"line_start":1500,"line_end":1500,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73099,"byte_end":73102,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73107,"byte_end":73121,"line_start":1502,"line_end":1502,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73126,"byte_end":73129,"line_start":1503,"line_end":1503,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73134,"byte_end":73141,"line_start":1504,"line_end":1504,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73146,"byte_end":73172,"line_start":1505,"line_end":1505,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73177,"byte_end":73180,"line_start":1506,"line_end":1506,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 34, 2, 5, -10, -3, -23];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73185,"byte_end":73230,"line_start":1507,"line_end":1507,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73235,"byte_end":73238,"line_start":1508,"line_end":1508,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max_by_key(|x| x.abs()), Some(&34));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73243,"byte_end":73307,"line_start":1509,"line_end":1509,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73312,"byte_end":73319,"line_start":1510,"line_end":1510,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4214},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74268,"byte_end":74273,"line_start":1547,"line_end":1547,"column_start":8,"column_end":13},"name":"chain","qualname":"::iter::ParallelIterator::chain","value":"pub fn chain<C>(Self, C) -> Chain<Self, C::Iter> where\nC: IntoParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Takes two iterators and creates a new iterator over both.","sig":null,"attributes":[{"value":"/ Takes two iterators and creates a new iterator over both.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73852,"byte_end":73913,"line_start":1531,"line_end":1531,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73918,"byte_end":73921,"line_start":1532,"line_end":1532,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73926,"byte_end":73940,"line_start":1533,"line_end":1533,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73945,"byte_end":73948,"line_start":1534,"line_end":1534,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73953,"byte_end":73960,"line_start":1535,"line_end":1535,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73965,"byte_end":73991,"line_start":1536,"line_end":1536,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":73996,"byte_end":73999,"line_start":1537,"line_end":1537,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 1, 2];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74004,"byte_end":74026,"line_start":1538,"line_end":1538,"column_start":5,"column_end":27}},{"value":"/ let b = [9, 8, 7];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74031,"byte_end":74053,"line_start":1539,"line_end":1539,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74058,"byte_end":74061,"line_start":1540,"line_end":1540,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().chain(b.par_iter());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74066,"byte_end":74118,"line_start":1541,"line_end":1541,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74123,"byte_end":74126,"line_start":1542,"line_end":1542,"column_start":5,"column_end":8}},{"value":"/ let chained: Vec<_> = par_iter.cloned().collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74131,"byte_end":74185,"line_start":1543,"line_end":1543,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74190,"byte_end":74193,"line_start":1544,"line_end":1544,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&chained[..], &[0, 1, 2, 9, 8, 7]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74198,"byte_end":74248,"line_start":1545,"line_end":1545,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74253,"byte_end":74260,"line_start":1546,"line_end":1546,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4216},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75367,"byte_end":75375,"line_start":1577,"line_end":1577,"column_start":8,"column_end":16},"name":"find_any","qualname":"::iter::ParallelIterator::find_any","value":"pub fn find_any<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate and returns it. This operation\n is similar to [`find` on sequential iterators][find] but\n the item returned may not be the **first** one in the parallel\n sequence which matches, since we search the entire sequence in parallel.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74444,"byte_end":74504,"line_start":1554,"line_end":1554,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate and returns it. This operation","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74509,"byte_end":74571,"line_start":1555,"line_end":1555,"column_start":5,"column_end":67}},{"value":"/ is similar to [`find` on sequential iterators][find] but","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74576,"byte_end":74636,"line_start":1556,"line_end":1556,"column_start":5,"column_end":65}},{"value":"/ the item returned may not be the **first** one in the parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74641,"byte_end":74707,"line_start":1557,"line_end":1557,"column_start":5,"column_end":71}},{"value":"/ sequence which matches, since we search the entire sequence in parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74712,"byte_end":74788,"line_start":1558,"line_end":1558,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74793,"byte_end":74796,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, we will attempt to stop processing","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74801,"byte_end":74862,"line_start":1560,"line_end":1560,"column_start":5,"column_end":66}},{"value":"/ the rest of the items in the iterator as soon as possible","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74867,"byte_end":74928,"line_start":1561,"line_end":1561,"column_start":5,"column_end":66}},{"value":"/ (just as `find` stops iterating once a match is found).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74933,"byte_end":74992,"line_start":1562,"line_end":1562,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":74997,"byte_end":75000,"line_start":1563,"line_end":1563,"column_start":5,"column_end":8}},{"value":"/ [find]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75005,"byte_end":75083,"line_start":1564,"line_end":1564,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75088,"byte_end":75091,"line_start":1565,"line_end":1565,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75096,"byte_end":75110,"line_start":1566,"line_end":1566,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75115,"byte_end":75118,"line_start":1567,"line_end":1567,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75123,"byte_end":75130,"line_start":1568,"line_end":1568,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75135,"byte_end":75161,"line_start":1569,"line_end":1569,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75166,"byte_end":75169,"line_start":1570,"line_end":1570,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75174,"byte_end":75199,"line_start":1571,"line_end":1571,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75204,"byte_end":75207,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_any(|&&x| x == 3), Some(&3));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75212,"byte_end":75274,"line_start":1573,"line_end":1573,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75279,"byte_end":75282,"line_start":1574,"line_end":1574,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_any(|&&x| x == 100), None);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75287,"byte_end":75347,"line_start":1575,"line_end":1575,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75352,"byte_end":75359,"line_start":1576,"line_end":1576,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4218},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76414,"byte_end":76424,"line_start":1607,"line_end":1607,"column_start":8,"column_end":18},"name":"find_first","qualname":"::iter::ParallelIterator::find_first","value":"pub fn find_first<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item)\n-> bool + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Searches for the sequentially **first** item in the parallel iterator\n that matches the given predicate and returns it.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **first** item in the parallel iterator","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75534,"byte_end":75607,"line_start":1584,"line_end":1584,"column_start":5,"column_end":78}},{"value":"/ that matches the given predicate and returns it.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75612,"byte_end":75664,"line_start":1585,"line_end":1585,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75669,"byte_end":75672,"line_start":1586,"line_end":1586,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, all attempts to the right of the match","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75677,"byte_end":75742,"line_start":1587,"line_end":1587,"column_start":5,"column_end":70}},{"value":"/ will be stopped, while attempts to the left must continue in case","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75747,"byte_end":75816,"line_start":1588,"line_end":1588,"column_start":5,"column_end":74}},{"value":"/ an earlier match is found.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75821,"byte_end":75851,"line_start":1589,"line_end":1589,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75856,"byte_end":75859,"line_start":1590,"line_end":1590,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75864,"byte_end":75935,"line_start":1591,"line_end":1591,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous.  If you","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":75940,"byte_end":76011,"line_start":1592,"line_end":1592,"column_start":5,"column_end":76}},{"value":"/ just want the first match that discovered anywhere in the iterator,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76016,"byte_end":76087,"line_start":1593,"line_end":1593,"column_start":5,"column_end":76}},{"value":"/ `find_any` is a better choice.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76092,"byte_end":76126,"line_start":1594,"line_end":1594,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76131,"byte_end":76134,"line_start":1595,"line_end":1595,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76139,"byte_end":76153,"line_start":1596,"line_end":1596,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76158,"byte_end":76161,"line_start":1597,"line_end":1597,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76166,"byte_end":76173,"line_start":1598,"line_end":1598,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76178,"byte_end":76204,"line_start":1599,"line_end":1599,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76209,"byte_end":76212,"line_start":1600,"line_end":1600,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76217,"byte_end":76242,"line_start":1601,"line_end":1601,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76247,"byte_end":76250,"line_start":1602,"line_end":1602,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_first(|&&x| x == 3), Some(&3));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76255,"byte_end":76319,"line_start":1603,"line_end":1603,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76324,"byte_end":76327,"line_start":1604,"line_end":1604,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_first(|&&x| x == 100), None);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76332,"byte_end":76394,"line_start":1605,"line_end":1605,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76399,"byte_end":76406,"line_start":1606,"line_end":1606,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4220},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77437,"byte_end":77446,"line_start":1636,"line_end":1636,"column_start":8,"column_end":17},"name":"find_last","qualname":"::iter::ParallelIterator::find_last","value":"pub fn find_last<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Searches for the sequentially **last** item in the parallel iterator\n that matches the given predicate and returns it.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **last** item in the parallel iterator","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76600,"byte_end":76672,"line_start":1614,"line_end":1614,"column_start":5,"column_end":77}},{"value":"/ that matches the given predicate and returns it.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76677,"byte_end":76729,"line_start":1615,"line_end":1615,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76734,"byte_end":76737,"line_start":1616,"line_end":1616,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, all attempts to the left of the match","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76742,"byte_end":76806,"line_start":1617,"line_end":1617,"column_start":5,"column_end":69}},{"value":"/ will be stopped, while attempts to the right must continue in case","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76811,"byte_end":76881,"line_start":1618,"line_end":1618,"column_start":5,"column_end":75}},{"value":"/ a later match is found.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76886,"byte_end":76913,"line_start":1619,"line_end":1619,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76918,"byte_end":76921,"line_start":1620,"line_end":1620,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":76926,"byte_end":76997,"line_start":1621,"line_end":1621,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"last\" may be nebulous.  When the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77002,"byte_end":77074,"line_start":1622,"line_end":1622,"column_start":5,"column_end":77}},{"value":"/ order doesn't actually matter to you, `find_any` is a better choice.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77079,"byte_end":77151,"line_start":1623,"line_end":1623,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77156,"byte_end":77159,"line_start":1624,"line_end":1624,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77164,"byte_end":77178,"line_start":1625,"line_end":1625,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77183,"byte_end":77186,"line_start":1626,"line_end":1626,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77191,"byte_end":77198,"line_start":1627,"line_end":1627,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77203,"byte_end":77229,"line_start":1628,"line_end":1628,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77234,"byte_end":77237,"line_start":1629,"line_end":1629,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77242,"byte_end":77267,"line_start":1630,"line_end":1630,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77272,"byte_end":77275,"line_start":1631,"line_end":1631,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_last(|&&x| x == 3), Some(&3));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77280,"byte_end":77343,"line_start":1632,"line_end":1632,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77348,"byte_end":77351,"line_start":1633,"line_end":1633,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_last(|&&x| x == 100), None);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77356,"byte_end":77417,"line_start":1634,"line_end":1634,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77422,"byte_end":77429,"line_start":1635,"line_end":1635,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4222},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78525,"byte_end":78537,"line_start":1666,"line_end":1666,"column_start":8,"column_end":20},"name":"find_map_any","qualname":"::iter::ParallelIterator::find_map_any","value":"pub fn find_map_any<P, R>(Self, P) -> Option<R> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator\n and returns **any** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77621,"byte_end":77690,"line_start":1643,"line_end":1643,"column_start":5,"column_end":74}},{"value":"/ and returns **any** non-None result of the map operation.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77695,"byte_end":77756,"line_start":1644,"line_end":1644,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77761,"byte_end":77764,"line_start":1645,"line_end":1645,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, we will","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77769,"byte_end":77838,"line_start":1646,"line_end":1646,"column_start":5,"column_end":74}},{"value":"/ attempt to stop processing the rest of the items in the iterator","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77843,"byte_end":77911,"line_start":1647,"line_end":1647,"column_start":5,"column_end":73}},{"value":"/ as soon as possible.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77916,"byte_end":77940,"line_start":1648,"line_end":1648,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77945,"byte_end":77948,"line_start":1649,"line_end":1649,"column_start":5,"column_end":8}},{"value":"/ Note that this method only returns **some** item in the parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":77953,"byte_end":78021,"line_start":1650,"line_end":1650,"column_start":5,"column_end":73}},{"value":"/ iterator that is not None from the map predicate. The item returned","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78026,"byte_end":78097,"line_start":1651,"line_end":1651,"column_start":5,"column_end":76}},{"value":"/ may not be the **first** non-None value produced in the parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78102,"byte_end":78170,"line_start":1652,"line_end":1652,"column_start":5,"column_end":73}},{"value":"/ sequence, since the entire sequence is mapped over in parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78175,"byte_end":78242,"line_start":1653,"line_end":1653,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78247,"byte_end":78250,"line_start":1654,"line_end":1654,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78255,"byte_end":78269,"line_start":1655,"line_end":1655,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78274,"byte_end":78277,"line_start":1656,"line_end":1656,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78282,"byte_end":78289,"line_start":1657,"line_end":1657,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78294,"byte_end":78320,"line_start":1658,"line_end":1658,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78325,"byte_end":78328,"line_start":1659,"line_end":1659,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"5\", \"5\"];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78333,"byte_end":78370,"line_start":1660,"line_end":1660,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78375,"byte_end":78378,"line_start":1661,"line_end":1661,"column_start":5,"column_end":8}},{"value":"/ let first_number = c.par_iter().find_map_first(|s| s.parse().ok());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78383,"byte_end":78454,"line_start":1662,"line_end":1662,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78459,"byte_end":78462,"line_start":1663,"line_end":1663,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(first_number, Some(5));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78467,"byte_end":78505,"line_start":1664,"line_end":1664,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78510,"byte_end":78517,"line_start":1665,"line_end":1665,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4227},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79727,"byte_end":79741,"line_start":1700,"line_end":1700,"column_start":8,"column_end":22},"name":"find_map_first","qualname":"::iter::ParallelIterator::find_map_first","value":"pub fn find_map_first<P, R>(Self, P) -> Option<R> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator and\n returns the sequentially **first** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78786,"byte_end":78859,"line_start":1677,"line_end":1677,"column_start":5,"column_end":78}},{"value":"/ returns the sequentially **first** non-None result of the map operation.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78864,"byte_end":78940,"line_start":1678,"line_end":1678,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78945,"byte_end":78948,"line_start":1679,"line_end":1679,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, all attempts","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":78953,"byte_end":79027,"line_start":1680,"line_end":1680,"column_start":5,"column_end":79}},{"value":"/ to the right of the match will be stopped, while attempts to the left","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79032,"byte_end":79105,"line_start":1681,"line_end":1681,"column_start":5,"column_end":78}},{"value":"/ must continue in case an earlier match is found.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79110,"byte_end":79162,"line_start":1682,"line_end":1682,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79167,"byte_end":79170,"line_start":1683,"line_end":1683,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79175,"byte_end":79246,"line_start":1684,"line_end":1684,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous. If you","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79251,"byte_end":79321,"line_start":1685,"line_end":1685,"column_start":5,"column_end":75}},{"value":"/ just want the first non-None value discovered anywhere in the iterator,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79326,"byte_end":79401,"line_start":1686,"line_end":1686,"column_start":5,"column_end":80}},{"value":"/ `find_map_any` is a better choice.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79406,"byte_end":79444,"line_start":1687,"line_end":1687,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79449,"byte_end":79452,"line_start":1688,"line_end":1688,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79457,"byte_end":79471,"line_start":1689,"line_end":1689,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79476,"byte_end":79479,"line_start":1690,"line_end":1690,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79484,"byte_end":79491,"line_start":1691,"line_end":1691,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79496,"byte_end":79522,"line_start":1692,"line_end":1692,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79527,"byte_end":79530,"line_start":1693,"line_end":1693,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"2\", \"5\"];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79535,"byte_end":79572,"line_start":1694,"line_end":1694,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79577,"byte_end":79580,"line_start":1695,"line_end":1695,"column_start":5,"column_end":8}},{"value":"/ let first_number = c.par_iter().find_map_first(|s| s.parse().ok());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79585,"byte_end":79656,"line_start":1696,"line_end":1696,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79661,"byte_end":79664,"line_start":1697,"line_end":1697,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(first_number, Some(2));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79669,"byte_end":79707,"line_start":1698,"line_end":1698,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79712,"byte_end":79719,"line_start":1699,"line_end":1699,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4232},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80928,"byte_end":80941,"line_start":1734,"line_end":1734,"column_start":8,"column_end":21},"name":"find_map_last","qualname":"::iter::ParallelIterator::find_map_last","value":"pub fn find_map_last<P, R>(Self, P) -> Option<R> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator and\n returns the sequentially **last** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":79992,"byte_end":80065,"line_start":1711,"line_end":1711,"column_start":5,"column_end":78}},{"value":"/ returns the sequentially **last** non-None result of the map operation.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80070,"byte_end":80145,"line_start":1712,"line_end":1712,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80150,"byte_end":80153,"line_start":1713,"line_end":1713,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, all attempts","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80158,"byte_end":80232,"line_start":1714,"line_end":1714,"column_start":5,"column_end":79}},{"value":"/ to the left of the match will be stopped, while attempts to the right","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80237,"byte_end":80310,"line_start":1715,"line_end":1715,"column_start":5,"column_end":78}},{"value":"/ must continue in case a later match is found.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80315,"byte_end":80364,"line_start":1716,"line_end":1716,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80369,"byte_end":80372,"line_start":1717,"line_end":1717,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80377,"byte_end":80448,"line_start":1718,"line_end":1718,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous. If you","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80453,"byte_end":80523,"line_start":1719,"line_end":1719,"column_start":5,"column_end":75}},{"value":"/ just want the first non-None value discovered anywhere in the iterator,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80528,"byte_end":80603,"line_start":1720,"line_end":1720,"column_start":5,"column_end":80}},{"value":"/ `find_map_any` is a better choice.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80608,"byte_end":80646,"line_start":1721,"line_end":1721,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80651,"byte_end":80654,"line_start":1722,"line_end":1722,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80659,"byte_end":80673,"line_start":1723,"line_end":1723,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80678,"byte_end":80681,"line_start":1724,"line_end":1724,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80686,"byte_end":80693,"line_start":1725,"line_end":1725,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80698,"byte_end":80724,"line_start":1726,"line_end":1726,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80729,"byte_end":80732,"line_start":1727,"line_end":1727,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"2\", \"5\"];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80737,"byte_end":80774,"line_start":1728,"line_end":1728,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80779,"byte_end":80782,"line_start":1729,"line_end":1729,"column_start":5,"column_end":8}},{"value":"/ let first_number = c.par_iter().find_map_last(|s| s.parse().ok());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80787,"byte_end":80857,"line_start":1730,"line_end":1730,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80862,"byte_end":80865,"line_start":1731,"line_end":1731,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(first_number, Some(5));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80870,"byte_end":80908,"line_start":1732,"line_end":1732,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":80913,"byte_end":80920,"line_start":1733,"line_end":1733,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4237},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81358,"byte_end":81362,"line_start":1748,"line_end":1748,"column_start":8,"column_end":12},"name":"find","qualname":"::iter::ParallelIterator::find","value":"pub fn find<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note =\n             \"parallel `find` does not search in order -- use `find_any`, \\\\\n                         `find_first`, or `find_last`\")","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81210,"byte_end":81350,"line_start":1746,"line_end":1747,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4239},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82067,"byte_end":82070,"line_start":1772,"line_end":1772,"column_start":8,"column_end":11},"name":"any","qualname":"::iter::ParallelIterator::any","value":"pub fn any<P>(Self, P) -> bool where P: Fn(Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate, and if so returns true.  Once\n a match is found, we'll attempt to stop process the rest\n of the items.  Proving that there's no match, returning false,\n does require visiting every item.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81518,"byte_end":81578,"line_start":1755,"line_end":1755,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate, and if so returns true.  Once","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81583,"byte_end":81645,"line_start":1756,"line_end":1756,"column_start":5,"column_end":67}},{"value":"/ a match is found, we'll attempt to stop process the rest","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81650,"byte_end":81710,"line_start":1757,"line_end":1757,"column_start":5,"column_end":65}},{"value":"/ of the items.  Proving that there's no match, returning false,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81715,"byte_end":81781,"line_start":1758,"line_end":1758,"column_start":5,"column_end":71}},{"value":"/ does require visiting every item.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81786,"byte_end":81823,"line_start":1759,"line_end":1759,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81828,"byte_end":81831,"line_start":1760,"line_end":1760,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81836,"byte_end":81850,"line_start":1761,"line_end":1761,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81855,"byte_end":81858,"line_start":1762,"line_end":1762,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81863,"byte_end":81870,"line_start":1763,"line_end":1763,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81875,"byte_end":81901,"line_start":1764,"line_end":1764,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81906,"byte_end":81909,"line_start":1765,"line_end":1765,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 12, 3, 4, 0, 23, 0];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81914,"byte_end":81950,"line_start":1766,"line_end":1766,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81955,"byte_end":81958,"line_start":1767,"line_end":1767,"column_start":5,"column_end":8}},{"value":"/ let is_valid = a.par_iter().any(|&x| x > 10);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":81963,"byte_end":82012,"line_start":1768,"line_end":1768,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82017,"byte_end":82020,"line_start":1769,"line_end":1769,"column_start":5,"column_end":8}},{"value":"/ assert!(is_valid);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82025,"byte_end":82047,"line_start":1770,"line_end":1770,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82052,"byte_end":82059,"line_start":1771,"line_end":1771,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4241},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82698,"byte_end":82701,"line_start":1794,"line_end":1794,"column_start":8,"column_end":11},"name":"all","qualname":"::iter::ParallelIterator::all","value":"pub fn all<P>(Self, P) -> bool where P: Fn(Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Tests that every item in the parallel iterator matches the given\n predicate, and if so returns true.  If a counter-example is found,\n we'll attempt to stop processing more items, then return false.","sig":null,"attributes":[{"value":"/ Tests that every item in the parallel iterator matches the given","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82238,"byte_end":82306,"line_start":1779,"line_end":1779,"column_start":5,"column_end":73}},{"value":"/ predicate, and if so returns true.  If a counter-example is found,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82311,"byte_end":82381,"line_start":1780,"line_end":1780,"column_start":5,"column_end":75}},{"value":"/ we'll attempt to stop processing more items, then return false.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82386,"byte_end":82453,"line_start":1781,"line_end":1781,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82458,"byte_end":82461,"line_start":1782,"line_end":1782,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82466,"byte_end":82480,"line_start":1783,"line_end":1783,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82485,"byte_end":82488,"line_start":1784,"line_end":1784,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82493,"byte_end":82500,"line_start":1785,"line_end":1785,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82505,"byte_end":82531,"line_start":1786,"line_end":1786,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82536,"byte_end":82539,"line_start":1787,"line_end":1787,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 12, 3, 4, 0, 23, 0];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82544,"byte_end":82580,"line_start":1788,"line_end":1788,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82585,"byte_end":82588,"line_start":1789,"line_end":1789,"column_start":5,"column_end":8}},{"value":"/ let is_valid = a.par_iter().all(|&x| x > 10);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82593,"byte_end":82642,"line_start":1790,"line_end":1790,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82647,"byte_end":82650,"line_start":1791,"line_end":1791,"column_start":5,"column_end":8}},{"value":"/ assert!(!is_valid);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82655,"byte_end":82678,"line_start":1792,"line_end":1792,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82683,"byte_end":82690,"line_start":1793,"line_end":1793,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4244},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83683,"byte_end":83693,"line_start":1828,"line_end":1828,"column_start":8,"column_end":18},"name":"while_some","qualname":"::iter::ParallelIterator::while_some","value":"pub fn while_some<T>(Self) -> WhileSome<Self> where\nSelf: ParallelIterator<Item = Option<T>>, T: Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Creates an iterator over the `Some` items of this iterator, halting\n as soon as any `None` is found.","sig":null,"attributes":[{"value":"/ Creates an iterator over the `Some` items of this iterator, halting","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":82950,"byte_end":83021,"line_start":1806,"line_end":1806,"column_start":5,"column_end":76}},{"value":"/ as soon as any `None` is found.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83026,"byte_end":83061,"line_start":1807,"line_end":1807,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83066,"byte_end":83069,"line_start":1808,"line_end":1808,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83074,"byte_end":83088,"line_start":1809,"line_end":1809,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83093,"byte_end":83096,"line_start":1810,"line_end":1810,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83101,"byte_end":83108,"line_start":1811,"line_end":1811,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83113,"byte_end":83139,"line_start":1812,"line_end":1812,"column_start":5,"column_end":31}},{"value":"/ use std::sync::atomic::{AtomicUsize, Ordering};","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83144,"byte_end":83195,"line_start":1813,"line_end":1813,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83200,"byte_end":83203,"line_start":1814,"line_end":1814,"column_start":5,"column_end":8}},{"value":"/ let counter = AtomicUsize::new(0);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83208,"byte_end":83246,"line_start":1815,"line_end":1815,"column_start":5,"column_end":43}},{"value":"/ let value = (0_i32..2048)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83251,"byte_end":83280,"line_start":1816,"line_end":1816,"column_start":5,"column_end":34}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83285,"byte_end":83309,"line_start":1817,"line_end":1817,"column_start":5,"column_end":29}},{"value":"/     .map(|x| {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83314,"byte_end":83332,"line_start":1818,"line_end":1818,"column_start":5,"column_end":23}},{"value":"/              counter.fetch_add(1, Ordering::SeqCst);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83337,"byte_end":83393,"line_start":1819,"line_end":1819,"column_start":5,"column_end":61}},{"value":"/              if x < 1024 { Some(x) } else { None }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83398,"byte_end":83452,"line_start":1820,"line_end":1820,"column_start":5,"column_end":59}},{"value":"/          })","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83457,"byte_end":83472,"line_start":1821,"line_end":1821,"column_start":5,"column_end":20}},{"value":"/     .while_some()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83477,"byte_end":83498,"line_start":1822,"line_end":1822,"column_start":5,"column_end":26}},{"value":"/     .max();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83503,"byte_end":83518,"line_start":1823,"line_end":1823,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83523,"byte_end":83526,"line_start":1824,"line_end":1824,"column_start":5,"column_end":8}},{"value":"/ assert!(value < Some(1024));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83531,"byte_end":83563,"line_start":1825,"line_end":1825,"column_start":5,"column_end":37}},{"value":"/ assert!(counter.load(Ordering::SeqCst) < 2048); // should not have visited every single one","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83568,"byte_end":83663,"line_start":1826,"line_end":1826,"column_start":5,"column_end":100}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83668,"byte_end":83675,"line_start":1827,"line_end":1827,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4246},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85004,"byte_end":85014,"line_start":1866,"line_end":1866,"column_start":8,"column_end":18},"name":"panic_fuse","qualname":"::iter::ParallelIterator::panic_fuse","value":"pub fn panic_fuse(Self) -> PanicFuse<Self>","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Wraps an iterator with a fuse in case of panics, to halt all threads\n as soon as possible.","sig":null,"attributes":[{"value":"/ Wraps an iterator with a fuse in case of panics, to halt all threads","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83845,"byte_end":83917,"line_start":1836,"line_end":1836,"column_start":5,"column_end":77}},{"value":"/ as soon as possible.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83922,"byte_end":83946,"line_start":1837,"line_end":1837,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83951,"byte_end":83954,"line_start":1838,"line_end":1838,"column_start":5,"column_end":8}},{"value":"/ Panics within parallel iterators are always propagated to the caller,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":83959,"byte_end":84032,"line_start":1839,"line_end":1839,"column_start":5,"column_end":78}},{"value":"/ but they don't always halt the rest of the iterator right away, due to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84037,"byte_end":84111,"line_start":1840,"line_end":1840,"column_start":5,"column_end":79}},{"value":"/ the internal semantics of [`join`]. This adaptor makes a greater effort","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84116,"byte_end":84191,"line_start":1841,"line_end":1841,"column_start":5,"column_end":80}},{"value":"/ to stop processing other items sooner, with the cost of additional","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84196,"byte_end":84266,"line_start":1842,"line_end":1842,"column_start":5,"column_end":75}},{"value":"/ synchronization overhead, which may also inhibit some optimizations.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84271,"byte_end":84343,"line_start":1843,"line_end":1843,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84348,"byte_end":84351,"line_start":1844,"line_end":1844,"column_start":5,"column_end":8}},{"value":"/ [`join`]: ../fn.join.html#panics","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84356,"byte_end":84392,"line_start":1845,"line_end":1845,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84397,"byte_end":84400,"line_start":1846,"line_end":1846,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84405,"byte_end":84419,"line_start":1847,"line_end":1847,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84424,"byte_end":84427,"line_start":1848,"line_end":1848,"column_start":5,"column_end":8}},{"value":"/ If this code didn't use `panic_fuse()`, it would continue processing","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84432,"byte_end":84504,"line_start":1849,"line_end":1849,"column_start":5,"column_end":77}},{"value":"/ many more items in other threads (with long sleep delays) before the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84509,"byte_end":84581,"line_start":1850,"line_end":1850,"column_start":5,"column_end":77}},{"value":"/ panic is finally propagated.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84586,"byte_end":84618,"line_start":1851,"line_end":1851,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84623,"byte_end":84626,"line_start":1852,"line_end":1852,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84631,"byte_end":84650,"line_start":1853,"line_end":1853,"column_start":5,"column_end":24}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84655,"byte_end":84681,"line_start":1854,"line_end":1854,"column_start":5,"column_end":31}},{"value":"/ use std::{thread, time};","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84686,"byte_end":84714,"line_start":1855,"line_end":1855,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84719,"byte_end":84722,"line_start":1856,"line_end":1856,"column_start":5,"column_end":8}},{"value":"/ (0..1_000_000)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84727,"byte_end":84745,"line_start":1857,"line_end":1857,"column_start":5,"column_end":23}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84750,"byte_end":84774,"line_start":1858,"line_end":1858,"column_start":5,"column_end":29}},{"value":"/     .panic_fuse()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84779,"byte_end":84800,"line_start":1859,"line_end":1859,"column_start":5,"column_end":26}},{"value":"/     .for_each(|i| {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84805,"byte_end":84828,"line_start":1860,"line_end":1860,"column_start":5,"column_end":28}},{"value":"/         // simulate some work","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84833,"byte_end":84866,"line_start":1861,"line_end":1861,"column_start":5,"column_end":38}},{"value":"/         thread::sleep(time::Duration::from_secs(1));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84871,"byte_end":84927,"line_start":1862,"line_end":1862,"column_start":5,"column_end":61}},{"value":"/         assert!(i > 0); // oops!","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84932,"byte_end":84968,"line_start":1863,"line_end":1863,"column_start":5,"column_end":41}},{"value":"/     });","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84973,"byte_end":84984,"line_start":1864,"line_end":1864,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":84989,"byte_end":84996,"line_start":1865,"line_end":1865,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4247},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85763,"byte_end":85770,"line_start":1889,"line_end":1889,"column_start":8,"column_end":15},"name":"collect","qualname":"::iter::ParallelIterator::collect","value":"pub fn collect<C>(Self) -> C where C: FromParallelIterator<Self::Item>","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Create a fresh collection containing all the element produced\n by this parallel iterator.","sig":null,"attributes":[{"value":"/ Create a fresh collection containing all the element produced","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85082,"byte_end":85147,"line_start":1870,"line_end":1870,"column_start":5,"column_end":70}},{"value":"/ by this parallel iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85152,"byte_end":85182,"line_start":1871,"line_end":1871,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85187,"byte_end":85190,"line_start":1872,"line_end":1872,"column_start":5,"column_end":8}},{"value":"/ You may prefer to use `collect_into_vec()`, which allocates more","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85195,"byte_end":85263,"line_start":1873,"line_end":1873,"column_start":5,"column_end":73}},{"value":"/ efficiently with precise knowledge of how many elements the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85268,"byte_end":85331,"line_start":1874,"line_end":1874,"column_start":5,"column_end":68}},{"value":"/ iterator contains, and even allows you to reuse an existing","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85336,"byte_end":85399,"line_start":1875,"line_end":1875,"column_start":5,"column_end":68}},{"value":"/ vector's backing store rather than allocating a fresh vector.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85404,"byte_end":85469,"line_start":1876,"line_end":1876,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85474,"byte_end":85477,"line_start":1877,"line_end":1877,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85482,"byte_end":85496,"line_start":1878,"line_end":1878,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85501,"byte_end":85504,"line_start":1879,"line_end":1879,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85509,"byte_end":85516,"line_start":1880,"line_end":1880,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85521,"byte_end":85547,"line_start":1881,"line_end":1881,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85552,"byte_end":85555,"line_start":1882,"line_end":1882,"column_start":5,"column_end":8}},{"value":"/ let sync_vec: Vec<_> = (0..100).into_iter().collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85560,"byte_end":85618,"line_start":1883,"line_end":1883,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85623,"byte_end":85626,"line_start":1884,"line_end":1884,"column_start":5,"column_end":8}},{"value":"/ let async_vec: Vec<_> = (0..100).into_par_iter().collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85631,"byte_end":85694,"line_start":1885,"line_end":1885,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85699,"byte_end":85702,"line_start":1886,"line_end":1886,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sync_vec, async_vec);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85707,"byte_end":85743,"line_start":1887,"line_end":1887,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85748,"byte_end":85755,"line_start":1888,"line_end":1888,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4249},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87022,"byte_end":87027,"line_start":1930,"line_end":1930,"column_start":8,"column_end":13},"name":"unzip","qualname":"::iter::ParallelIterator::unzip","value":"pub fn unzip<A, B, FromA, FromB>(Self) -> (FromA, FromB) where\nSelf: ParallelIterator<Item = (A, B)>, FromA: Default + Send +\nParallelExtend<A>, FromB: Default + Send + ParallelExtend<B>, A: Send, B: Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Unzips the items of a parallel iterator into a pair of arbitrary\n `ParallelExtend` containers.","sig":null,"attributes":[{"value":"/ Unzips the items of a parallel iterator into a pair of arbitrary","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85888,"byte_end":85956,"line_start":1896,"line_end":1896,"column_start":5,"column_end":73}},{"value":"/ `ParallelExtend` containers.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85961,"byte_end":85993,"line_start":1897,"line_end":1897,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":85998,"byte_end":86001,"line_start":1898,"line_end":1898,"column_start":5,"column_end":8}},{"value":"/ You may prefer to use `unzip_into_vecs()`, which allocates more","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86006,"byte_end":86073,"line_start":1899,"line_end":1899,"column_start":5,"column_end":72}},{"value":"/ efficiently with precise knowledge of how many elements the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86078,"byte_end":86141,"line_start":1900,"line_end":1900,"column_start":5,"column_end":68}},{"value":"/ iterator contains, and even allows you to reuse existing","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86146,"byte_end":86206,"line_start":1901,"line_end":1901,"column_start":5,"column_end":65}},{"value":"/ vectors' backing stores rather than allocating fresh vectors.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86211,"byte_end":86276,"line_start":1902,"line_end":1902,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86281,"byte_end":86284,"line_start":1903,"line_end":1903,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86289,"byte_end":86303,"line_start":1904,"line_end":1904,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86308,"byte_end":86311,"line_start":1905,"line_end":1905,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86316,"byte_end":86323,"line_start":1906,"line_end":1906,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86328,"byte_end":86354,"line_start":1907,"line_end":1907,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86359,"byte_end":86362,"line_start":1908,"line_end":1908,"column_start":5,"column_end":8}},{"value":"/ let a = [(0, 1), (1, 2), (2, 3), (3, 4)];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86367,"byte_end":86412,"line_start":1909,"line_end":1909,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86417,"byte_end":86420,"line_start":1910,"line_end":1910,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = a.par_iter().cloned().unzip();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86425,"byte_end":86497,"line_start":1911,"line_end":1911,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86502,"byte_end":86505,"line_start":1912,"line_end":1912,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86510,"byte_end":86545,"line_start":1913,"line_end":1913,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(right, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86550,"byte_end":86586,"line_start":1914,"line_end":1914,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86591,"byte_end":86598,"line_start":1915,"line_end":1915,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86603,"byte_end":86606,"line_start":1916,"line_end":1916,"column_start":5,"column_end":8}},{"value":"/ Nested pairs can be unzipped too.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86611,"byte_end":86648,"line_start":1917,"line_end":1917,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86653,"byte_end":86656,"line_start":1918,"line_end":1918,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86661,"byte_end":86668,"line_start":1919,"line_end":1919,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86673,"byte_end":86699,"line_start":1920,"line_end":1920,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86704,"byte_end":86707,"line_start":1921,"line_end":1921,"column_start":5,"column_end":8}},{"value":"/ let (values, (squares, cubes)): (Vec<_>, (Vec<_>, Vec<_>)) = (0..4).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86712,"byte_end":86799,"line_start":1922,"line_end":1922,"column_start":5,"column_end":92}},{"value":"/     .map(|i| (i, (i * i, i * i * i)))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86804,"byte_end":86845,"line_start":1923,"line_end":1923,"column_start":5,"column_end":46}},{"value":"/     .unzip();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86850,"byte_end":86867,"line_start":1924,"line_end":1924,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86872,"byte_end":86875,"line_start":1925,"line_end":1925,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(values, [0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86880,"byte_end":86917,"line_start":1926,"line_end":1926,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(squares, [0, 1, 4, 9]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86922,"byte_end":86960,"line_start":1927,"line_end":1927,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(cubes, [0, 1, 8, 27]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":86965,"byte_end":87002,"line_start":1928,"line_end":1928,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87007,"byte_end":87014,"line_start":1929,"line_end":1929,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4254},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88133,"byte_end":88142,"line_start":1960,"line_end":1960,"column_start":8,"column_end":17},"name":"partition","qualname":"::iter::ParallelIterator::partition","value":"pub fn partition<A, B, P>(Self, P) -> (A, B) where A: Default + Send +\nParallelExtend<Self::Item>, B: Default + Send + ParallelExtend<Self::Item>,\nP: Fn(&Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Partitions the items of a parallel iterator into a pair of arbitrary\n `ParallelExtend` containers.  Items for which the `predicate` returns\n true go into the first container, and the rest go into the second.","sig":null,"attributes":[{"value":"/ Partitions the items of a parallel iterator into a pair of arbitrary","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87309,"byte_end":87381,"line_start":1941,"line_end":1941,"column_start":5,"column_end":77}},{"value":"/ `ParallelExtend` containers.  Items for which the `predicate` returns","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87386,"byte_end":87459,"line_start":1942,"line_end":1942,"column_start":5,"column_end":78}},{"value":"/ true go into the first container, and the rest go into the second.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87464,"byte_end":87534,"line_start":1943,"line_end":1943,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87539,"byte_end":87542,"line_start":1944,"line_end":1944,"column_start":5,"column_end":8}},{"value":"/ Note: unlike the standard `Iterator::partition`, this allows distinct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87547,"byte_end":87620,"line_start":1945,"line_end":1945,"column_start":5,"column_end":78}},{"value":"/ collection types for the left and right items.  This is more flexible,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87625,"byte_end":87699,"line_start":1946,"line_end":1946,"column_start":5,"column_end":79}},{"value":"/ but may require new type annotations when converting sequential code","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87704,"byte_end":87776,"line_start":1947,"line_end":1947,"column_start":5,"column_end":77}},{"value":"/ that used type inferrence assuming the two were the same.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87781,"byte_end":87842,"line_start":1948,"line_end":1948,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87847,"byte_end":87850,"line_start":1949,"line_end":1949,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87855,"byte_end":87869,"line_start":1950,"line_end":1950,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87874,"byte_end":87877,"line_start":1951,"line_end":1951,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87882,"byte_end":87889,"line_start":1952,"line_end":1952,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87894,"byte_end":87920,"line_start":1953,"line_end":1953,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87925,"byte_end":87928,"line_start":1954,"line_end":1954,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter().partition(|x| x % 2 == 0);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":87933,"byte_end":88024,"line_start":1955,"line_end":1955,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88029,"byte_end":88032,"line_start":1956,"line_end":1956,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 2, 4, 6]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88037,"byte_end":88072,"line_start":1957,"line_end":1957,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(right, [1, 3, 5, 7]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88077,"byte_end":88113,"line_start":1958,"line_end":1958,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88118,"byte_end":88125,"line_start":1959,"line_end":1959,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4258},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89862,"byte_end":89875,"line_start":2012,"line_end":2012,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::iter::ParallelIterator::partition_map","value":"pub fn partition_map<A, B, P, L, R>(Self, P) -> (A, B) where A: Default +\nSend + ParallelExtend<L>, B: Default + Send + ParallelExtend<R>,\nP: Fn(Self::Item) -> Either<L, R> + Sync + Send, L: Send, R: Send","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Partitions and maps the items of a parallel iterator into a pair of\n arbitrary `ParallelExtend` containers.  `Either::Left` items go into\n the first container, and `Either::Right` items go into the second.","sig":null,"attributes":[{"value":"/ Partitions and maps the items of a parallel iterator into a pair of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88413,"byte_end":88484,"line_start":1969,"line_end":1969,"column_start":5,"column_end":76}},{"value":"/ arbitrary `ParallelExtend` containers.  `Either::Left` items go into","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88489,"byte_end":88561,"line_start":1970,"line_end":1970,"column_start":5,"column_end":77}},{"value":"/ the first container, and `Either::Right` items go into the second.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88566,"byte_end":88636,"line_start":1971,"line_end":1971,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88641,"byte_end":88644,"line_start":1972,"line_end":1972,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88649,"byte_end":88663,"line_start":1973,"line_end":1973,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88668,"byte_end":88671,"line_start":1974,"line_end":1974,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88676,"byte_end":88683,"line_start":1975,"line_end":1975,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88688,"byte_end":88714,"line_start":1976,"line_end":1976,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88719,"byte_end":88747,"line_start":1977,"line_end":1977,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88752,"byte_end":88755,"line_start":1978,"line_end":1978,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88760,"byte_end":88824,"line_start":1979,"line_end":1979,"column_start":5,"column_end":69}},{"value":"/     .partition_map(|x| {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88829,"byte_end":88857,"line_start":1980,"line_end":1980,"column_start":5,"column_end":33}},{"value":"/         if x % 2 == 0 {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88862,"byte_end":88889,"line_start":1981,"line_end":1981,"column_start":5,"column_end":32}},{"value":"/             Either::Left(x * 4)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88894,"byte_end":88929,"line_start":1982,"line_end":1982,"column_start":5,"column_end":40}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88934,"byte_end":88954,"line_start":1983,"line_end":1983,"column_start":5,"column_end":25}},{"value":"/             Either::Right(x * 3)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":88959,"byte_end":88995,"line_start":1984,"line_end":1984,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89000,"byte_end":89013,"line_start":1985,"line_end":1985,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89018,"byte_end":89029,"line_start":1986,"line_end":1986,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89034,"byte_end":89037,"line_start":1987,"line_end":1987,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 8, 16, 24]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89042,"byte_end":89079,"line_start":1988,"line_end":1988,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(right, [3, 9, 15, 21]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89084,"byte_end":89122,"line_start":1989,"line_end":1989,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89127,"byte_end":89134,"line_start":1990,"line_end":1990,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89139,"byte_end":89142,"line_start":1991,"line_end":1991,"column_start":5,"column_end":8}},{"value":"/ Nested `Either` enums can be split as well.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89147,"byte_end":89194,"line_start":1992,"line_end":1992,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89199,"byte_end":89202,"line_start":1993,"line_end":1993,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89207,"byte_end":89214,"line_start":1994,"line_end":1994,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89219,"byte_end":89245,"line_start":1995,"line_end":1995,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89250,"byte_end":89281,"line_start":1996,"line_end":1996,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89286,"byte_end":89289,"line_start":1997,"line_end":1997,"column_start":5,"column_end":8}},{"value":"/ let ((fizzbuzz, fizz), (buzz, other)): ((Vec<_>, Vec<_>), (Vec<_>, Vec<_>)) = (1..20)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89294,"byte_end":89383,"line_start":1998,"line_end":1998,"column_start":5,"column_end":94}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89388,"byte_end":89412,"line_start":1999,"line_end":1999,"column_start":5,"column_end":29}},{"value":"/     .partition_map(|x| match (x % 3, x % 5) {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89417,"byte_end":89466,"line_start":2000,"line_end":2000,"column_start":5,"column_end":54}},{"value":"/         (0, 0) => Left(Left(x)),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89471,"byte_end":89507,"line_start":2001,"line_end":2001,"column_start":5,"column_end":41}},{"value":"/         (0, _) => Left(Right(x)),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89512,"byte_end":89549,"line_start":2002,"line_end":2002,"column_start":5,"column_end":42}},{"value":"/         (_, 0) => Right(Left(x)),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89554,"byte_end":89591,"line_start":2003,"line_end":2003,"column_start":5,"column_end":42}},{"value":"/         (_, _) => Right(Right(x)),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89596,"byte_end":89634,"line_start":2004,"line_end":2004,"column_start":5,"column_end":43}},{"value":"/     });","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89639,"byte_end":89650,"line_start":2005,"line_end":2005,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89655,"byte_end":89658,"line_start":2006,"line_end":2006,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(fizzbuzz, [15]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89663,"byte_end":89694,"line_start":2007,"line_end":2007,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(fizz, [3, 6, 9, 12, 18]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89699,"byte_end":89739,"line_start":2008,"line_end":2008,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(buzz, [5, 10]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89744,"byte_end":89774,"line_start":2009,"line_end":2009,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(other, [1, 2, 4, 7, 8, 11, 13, 14, 16, 17, 19]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89779,"byte_end":89842,"line_start":2010,"line_end":2010,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":89847,"byte_end":89854,"line_start":2011,"line_end":2011,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4264},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90508,"byte_end":90519,"line_start":2035,"line_end":2035,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::iter::ParallelIterator::intersperse","value":"pub fn intersperse(Self, Self::Item) -> Intersperse<Self> where\nSelf::Item: Clone","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Intersperses clones of an element between items of this iterator.","sig":null,"attributes":[{"value":"/ Intersperses clones of an element between items of this iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90179,"byte_end":90248,"line_start":2023,"line_end":2023,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90253,"byte_end":90256,"line_start":2024,"line_end":2024,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90261,"byte_end":90275,"line_start":2025,"line_end":2025,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90280,"byte_end":90283,"line_start":2026,"line_end":2026,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90288,"byte_end":90295,"line_start":2027,"line_end":2027,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90300,"byte_end":90326,"line_start":2028,"line_end":2028,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90331,"byte_end":90334,"line_start":2029,"line_end":2029,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90339,"byte_end":90365,"line_start":2030,"line_end":2030,"column_start":5,"column_end":31}},{"value":"/ let r: Vec<_> = x.into_par_iter().intersperse(-1).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90370,"byte_end":90434,"line_start":2031,"line_end":2031,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90439,"byte_end":90442,"line_start":2032,"line_end":2032,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(r, vec![1, -1, 2, -1, 3]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90447,"byte_end":90488,"line_start":2033,"line_end":2033,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90493,"byte_end":90500,"line_start":2034,"line_end":2034,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4265},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91181,"byte_end":91196,"line_start":2054,"line_end":2054,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"::iter::ParallelIterator::drive_unindexed","value":"pub fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90662,"byte_end":90726,"line_start":2042,"line_end":2042,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90731,"byte_end":90787,"line_start":2043,"line_end":2043,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90792,"byte_end":90795,"line_start":2044,"line_end":2044,"column_start":5,"column_end":8}},{"value":"/ This method causes the iterator `self` to start producing","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90800,"byte_end":90861,"line_start":2045,"line_end":2045,"column_start":5,"column_end":66}},{"value":"/ items and to feed them to the consumer `consumer` one by one.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90866,"byte_end":90931,"line_start":2046,"line_end":2046,"column_start":5,"column_end":70}},{"value":"/ It may split the consumer before doing so to create the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":90936,"byte_end":90995,"line_start":2047,"line_end":2047,"column_start":5,"column_end":64}},{"value":"/ opportunity to produce in parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91000,"byte_end":91039,"line_start":2048,"line_end":2048,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91044,"byte_end":91047,"line_start":2049,"line_end":2049,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91052,"byte_end":91118,"line_start":2050,"line_end":2050,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91123,"byte_end":91137,"line_start":2051,"line_end":2051,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91142,"byte_end":91145,"line_start":2052,"line_end":2052,"column_start":5,"column_end":8}},{"value":"/ [README]: README.md","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91150,"byte_end":91173,"line_start":2053,"line_end":2053,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":4267},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92083,"byte_end":92090,"line_start":2072,"line_end":2072,"column_start":8,"column_end":15},"name":"opt_len","qualname":"::iter::ParallelIterator::opt_len","value":"pub fn opt_len(&Self) -> Option<usize>","parent":{"krate":0,"index":4069},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91289,"byte_end":91353,"line_start":2058,"line_end":2058,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91358,"byte_end":91414,"line_start":2059,"line_end":2059,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91419,"byte_end":91422,"line_start":2060,"line_end":2060,"column_start":5,"column_end":8}},{"value":"/ Returns the number of items produced by this iterator, if known","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91427,"byte_end":91494,"line_start":2061,"line_end":2061,"column_start":5,"column_end":72}},{"value":"/ statically. This can be used by consumers to trigger special fast","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91499,"byte_end":91568,"line_start":2062,"line_end":2062,"column_start":5,"column_end":74}},{"value":"/ paths. Therefore, if `Some(_)` is returned, this iterator must only","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91573,"byte_end":91644,"line_start":2063,"line_end":2063,"column_start":5,"column_end":76}},{"value":"/ use the (indexed) `Consumer` methods when driving a consumer, such","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91649,"byte_end":91719,"line_start":2064,"line_end":2064,"column_start":5,"column_end":75}},{"value":"/ as `split_at()`. Calling `UnindexedConsumer::split_off_left()` or","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91724,"byte_end":91793,"line_start":2065,"line_end":2065,"column_start":5,"column_end":74}},{"value":"/ other `UnindexedConsumer` methods -- or returning an inaccurate","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91798,"byte_end":91865,"line_start":2066,"line_end":2066,"column_start":5,"column_end":72}},{"value":"/ value -- may result in panics.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91870,"byte_end":91904,"line_start":2067,"line_end":2067,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91909,"byte_end":91912,"line_start":2068,"line_end":2068,"column_start":5,"column_end":8}},{"value":"/ This method is currently used to optimize `collect` for want","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91917,"byte_end":91981,"line_start":2069,"line_end":2069,"column_start":5,"column_end":69}},{"value":"/ of true Rust specialization; it may be removed when","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":91986,"byte_end":92041,"line_start":2070,"line_end":2070,"column_start":5,"column_end":60}},{"value":"/ specialization is stable.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92046,"byte_end":92075,"line_start":2071,"line_end":2071,"column_start":5,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":4273},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92533,"byte_end":92556,"line_start":2091,"line_end":2091,"column_start":11,"column_end":34},"name":"IndexedParallelIterator","qualname":"::iter::IndexedParallelIterator","value":"IndexedParallelIterator: ParallelIterator","parent":null,"children":[{"krate":0,"index":4274},{"krate":0,"index":4275},{"krate":0,"index":4278},{"krate":0,"index":4280},{"krate":0,"index":4282},{"krate":0,"index":4284},{"krate":0,"index":4286},{"krate":0,"index":4287},{"krate":0,"index":4292},{"krate":0,"index":4298},{"krate":0,"index":4303},{"krate":0,"index":4305},{"krate":0,"index":4307},{"krate":0,"index":4309},{"krate":0,"index":4311},{"krate":0,"index":4313},{"krate":0,"index":4314},{"krate":0,"index":4315},{"krate":0,"index":4316},{"krate":0,"index":4319},{"krate":0,"index":4322},{"krate":0,"index":4325},{"krate":0,"index":4327},{"krate":0,"index":4328},{"krate":0,"index":4329},{"krate":0,"index":4330},{"krate":0,"index":4331},{"krate":0,"index":4333}],"decl_id":null,"docs":" An iterator that supports \"random access\" to its data, meaning\n that you can split it at arbitrary indices and draw data from\n those points.","sig":null,"attributes":[{"value":"/ An iterator that supports \"random access\" to its data, meaning","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92295,"byte_end":92361,"line_start":2086,"line_end":2086,"column_start":1,"column_end":67}},{"value":"/ that you can split it at arbitrary indices and draw data from","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92362,"byte_end":92427,"line_start":2087,"line_end":2087,"column_start":1,"column_end":66}},{"value":"/ those points.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92428,"byte_end":92445,"line_start":2088,"line_end":2088,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92446,"byte_end":92449,"line_start":2089,"line_end":2089,"column_start":1,"column_end":4}},{"value":"/ **Note:** Not implemented for `u64`, `i64`, `u128`, or `i128` ranges","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92450,"byte_end":92522,"line_start":2090,"line_end":2090,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":4274},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93165,"byte_end":93181,"line_start":2110,"line_end":2110,"column_start":8,"column_end":24},"name":"collect_into_vec","qualname":"::iter::IndexedParallelIterator::collect_into_vec","value":"pub fn collect_into_vec(Self, &mut Vec<Self::Item>)","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Collects the results of the iterator into the specified\n vector. The vector is always truncated before execution\n begins. If possible, reusing the vector across calls can lead\n to better performance since it reuses the same backing buffer.","sig":null,"attributes":[{"value":"/ Collects the results of the iterator into the specified","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92581,"byte_end":92640,"line_start":2092,"line_end":2092,"column_start":5,"column_end":64}},{"value":"/ vector. The vector is always truncated before execution","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92645,"byte_end":92704,"line_start":2093,"line_end":2093,"column_start":5,"column_end":64}},{"value":"/ begins. If possible, reusing the vector across calls can lead","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92709,"byte_end":92774,"line_start":2094,"line_end":2094,"column_start":5,"column_end":70}},{"value":"/ to better performance since it reuses the same backing buffer.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92779,"byte_end":92845,"line_start":2095,"line_end":2095,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92850,"byte_end":92853,"line_start":2096,"line_end":2096,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92858,"byte_end":92872,"line_start":2097,"line_end":2097,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92877,"byte_end":92880,"line_start":2098,"line_end":2098,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92885,"byte_end":92892,"line_start":2099,"line_end":2099,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92897,"byte_end":92923,"line_start":2100,"line_end":2100,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92928,"byte_end":92931,"line_start":2101,"line_end":2101,"column_start":5,"column_end":8}},{"value":"/ // any prior data will be truncated","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92936,"byte_end":92975,"line_start":2102,"line_end":2102,"column_start":5,"column_end":44}},{"value":"/ let mut vec = vec![-1, -2, -3];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92980,"byte_end":93015,"line_start":2103,"line_end":2103,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93020,"byte_end":93023,"line_start":2104,"line_end":2104,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93028,"byte_end":93054,"line_start":2105,"line_end":2105,"column_start":5,"column_end":31}},{"value":"/     .collect_into_vec(&mut vec);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93059,"byte_end":93095,"line_start":2106,"line_end":2106,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93100,"byte_end":93103,"line_start":2107,"line_end":2107,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, [0, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93108,"byte_end":93145,"line_start":2108,"line_end":2108,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93150,"byte_end":93157,"line_start":2109,"line_end":2109,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4275},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93991,"byte_end":94006,"line_start":2135,"line_end":2135,"column_start":8,"column_end":23},"name":"unzip_into_vecs","qualname":"::iter::IndexedParallelIterator::unzip_into_vecs","value":"pub fn unzip_into_vecs<A, B>(Self, &mut Vec<A>, &mut Vec<B>) where\nSelf: IndexedParallelIterator<Item = (A, B)>, A: Send, B: Send","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Unzips the results of the iterator into the specified\n vectors. The vectors are always truncated before execution\n begins. If possible, reusing the vectors across calls can lead\n to better performance since they reuse the same backing buffer.","sig":null,"attributes":[{"value":"/ Unzips the results of the iterator into the specified","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93280,"byte_end":93337,"line_start":2114,"line_end":2114,"column_start":5,"column_end":62}},{"value":"/ vectors. The vectors are always truncated before execution","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93342,"byte_end":93404,"line_start":2115,"line_end":2115,"column_start":5,"column_end":67}},{"value":"/ begins. If possible, reusing the vectors across calls can lead","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93409,"byte_end":93475,"line_start":2116,"line_end":2116,"column_start":5,"column_end":71}},{"value":"/ to better performance since they reuse the same backing buffer.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93480,"byte_end":93547,"line_start":2117,"line_end":2117,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93552,"byte_end":93555,"line_start":2118,"line_end":2118,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93560,"byte_end":93574,"line_start":2119,"line_end":2119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93579,"byte_end":93582,"line_start":2120,"line_end":2120,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93587,"byte_end":93594,"line_start":2121,"line_end":2121,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93599,"byte_end":93625,"line_start":2122,"line_end":2122,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93630,"byte_end":93633,"line_start":2123,"line_end":2123,"column_start":5,"column_end":8}},{"value":"/ // any prior data will be truncated","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93638,"byte_end":93677,"line_start":2124,"line_end":2124,"column_start":5,"column_end":44}},{"value":"/ let mut left = vec![42; 10];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93682,"byte_end":93714,"line_start":2125,"line_end":2125,"column_start":5,"column_end":37}},{"value":"/ let mut right = vec![-1; 10];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93719,"byte_end":93752,"line_start":2126,"line_end":2126,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93757,"byte_end":93760,"line_start":2127,"line_end":2127,"column_start":5,"column_end":8}},{"value":"/ (10..15).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93765,"byte_end":93793,"line_start":2128,"line_end":2128,"column_start":5,"column_end":33}},{"value":"/     .enumerate()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93798,"byte_end":93818,"line_start":2129,"line_end":2129,"column_start":5,"column_end":25}},{"value":"/     .unzip_into_vecs(&mut left, &mut right);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93823,"byte_end":93871,"line_start":2130,"line_end":2130,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93876,"byte_end":93879,"line_start":2131,"line_end":2131,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93884,"byte_end":93922,"line_start":2132,"line_end":2132,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(right, [10, 11, 12, 13, 14]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93927,"byte_end":93971,"line_start":2133,"line_end":2133,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":93976,"byte_end":93983,"line_start":2134,"line_end":2134,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4278},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94817,"byte_end":94820,"line_start":2162,"line_end":2162,"column_start":8,"column_end":11},"name":"zip","qualname":"::iter::IndexedParallelIterator::zip","value":"pub fn zip<Z>(Self, Z) -> Zip<Self, Z::Iter> where Z: IntoParallelIterator,\nZ::Iter: IndexedParallelIterator","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Iterate over tuples `(A, B)`, where the items `A` are from\n this iterator and `B` are from the iterator given as argument.\n Like the `zip` method on ordinary iterators, if the two\n iterators are of unequal length, you only get the items they\n have in common.","sig":null,"attributes":[{"value":"/ Iterate over tuples `(A, B)`, where the items `A` are from","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94226,"byte_end":94288,"line_start":2144,"line_end":2144,"column_start":5,"column_end":67}},{"value":"/ this iterator and `B` are from the iterator given as argument.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94293,"byte_end":94359,"line_start":2145,"line_end":2145,"column_start":5,"column_end":71}},{"value":"/ Like the `zip` method on ordinary iterators, if the two","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94364,"byte_end":94423,"line_start":2146,"line_end":2146,"column_start":5,"column_end":64}},{"value":"/ iterators are of unequal length, you only get the items they","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94428,"byte_end":94492,"line_start":2147,"line_end":2147,"column_start":5,"column_end":69}},{"value":"/ have in common.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94497,"byte_end":94516,"line_start":2148,"line_end":2148,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94521,"byte_end":94524,"line_start":2149,"line_end":2149,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94529,"byte_end":94543,"line_start":2150,"line_end":2150,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94548,"byte_end":94551,"line_start":2151,"line_end":2151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94556,"byte_end":94563,"line_start":2152,"line_end":2152,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94568,"byte_end":94594,"line_start":2153,"line_end":2153,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94599,"byte_end":94602,"line_start":2154,"line_end":2154,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (1..4)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94607,"byte_end":94638,"line_start":2155,"line_end":2155,"column_start":5,"column_end":36}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94643,"byte_end":94667,"line_start":2156,"line_end":2156,"column_start":5,"column_end":29}},{"value":"/     .zip(vec!['a', 'b', 'c'])","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94672,"byte_end":94705,"line_start":2157,"line_end":2157,"column_start":5,"column_end":38}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94710,"byte_end":94729,"line_start":2158,"line_end":2158,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94734,"byte_end":94737,"line_start":2159,"line_end":2159,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [(1, 'a'), (2, 'b'), (3, 'c')]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94742,"byte_end":94797,"line_start":2160,"line_end":2160,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":94802,"byte_end":94809,"line_start":2161,"line_end":2161,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4280},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95594,"byte_end":95600,"line_start":2189,"line_end":2189,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::iter::IndexedParallelIterator::zip_eq","value":"pub fn zip_eq<Z>(Self, Z) -> ZipEq<Self, Z::Iter> where\nZ: IntoParallelIterator, Z::Iter: IndexedParallelIterator","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" The same as `Zip`, but requires that both iterators have the same length.","sig":null,"attributes":[{"value":"/ The same as `Zip`, but requires that both iterators have the same length.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95012,"byte_end":95089,"line_start":2170,"line_end":2170,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95094,"byte_end":95097,"line_start":2171,"line_end":2171,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95102,"byte_end":95114,"line_start":2172,"line_end":2172,"column_start":5,"column_end":17}},{"value":"/ Will panic if `self` and `zip_op` are not the same length.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95119,"byte_end":95181,"line_start":2173,"line_end":2173,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95186,"byte_end":95189,"line_start":2174,"line_end":2174,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95194,"byte_end":95213,"line_start":2175,"line_end":2175,"column_start":5,"column_end":24}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95218,"byte_end":95244,"line_start":2176,"line_end":2176,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95249,"byte_end":95252,"line_start":2177,"line_end":2177,"column_start":5,"column_end":8}},{"value":"/ let one = [1u8];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95257,"byte_end":95277,"line_start":2178,"line_end":2178,"column_start":5,"column_end":25}},{"value":"/ let two = [2u8, 2];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95282,"byte_end":95305,"line_start":2179,"line_end":2179,"column_start":5,"column_end":28}},{"value":"/ let one_iter = one.par_iter();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95310,"byte_end":95344,"line_start":2180,"line_end":2180,"column_start":5,"column_end":39}},{"value":"/ let two_iter = two.par_iter();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95349,"byte_end":95383,"line_start":2181,"line_end":2181,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95388,"byte_end":95391,"line_start":2182,"line_end":2182,"column_start":5,"column_end":8}},{"value":"/ // this will panic","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95396,"byte_end":95418,"line_start":2183,"line_end":2183,"column_start":5,"column_end":27}},{"value":"/ let zipped: Vec<(&u8, &u8)> = one_iter.zip_eq(two_iter).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95423,"byte_end":95493,"line_start":2184,"line_end":2184,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95498,"byte_end":95501,"line_start":2185,"line_end":2185,"column_start":5,"column_end":8}},{"value":"/ // we should never get here","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95506,"byte_end":95537,"line_start":2186,"line_end":2186,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(1, zipped.len());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95542,"byte_end":95574,"line_start":2187,"line_end":2187,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95579,"byte_end":95586,"line_start":2188,"line_end":2188,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4282},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96446,"byte_end":96456,"line_start":2213,"line_end":2213,"column_start":8,"column_end":18},"name":"interleave","qualname":"::iter::IndexedParallelIterator::interleave","value":"pub fn interleave<I>(Self, I) -> Interleave<Self, I::Iter> where\nI: IntoParallelIterator<Item = Self::Item>,\nI::Iter: IndexedParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Interleave elements of this iterator and the other given\n iterator. Alternately yields elements from this iterator and\n the given iterator, until both are exhausted. If one iterator\n is exhausted before the other, the last elements are provided\n from the other.","sig":null,"attributes":[{"value":"/ Interleave elements of this iterator and the other given","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95886,"byte_end":95946,"line_start":2199,"line_end":2199,"column_start":5,"column_end":65}},{"value":"/ iterator. Alternately yields elements from this iterator and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":95951,"byte_end":96015,"line_start":2200,"line_end":2200,"column_start":5,"column_end":69}},{"value":"/ the given iterator, until both are exhausted. If one iterator","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96020,"byte_end":96085,"line_start":2201,"line_end":2201,"column_start":5,"column_end":70}},{"value":"/ is exhausted before the other, the last elements are provided","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96090,"byte_end":96155,"line_start":2202,"line_end":2202,"column_start":5,"column_end":70}},{"value":"/ from the other.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96160,"byte_end":96179,"line_start":2203,"line_end":2203,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96184,"byte_end":96187,"line_start":2204,"line_end":2204,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96192,"byte_end":96206,"line_start":2205,"line_end":2205,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96211,"byte_end":96214,"line_start":2206,"line_end":2206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96219,"byte_end":96226,"line_start":2207,"line_end":2207,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96231,"byte_end":96257,"line_start":2208,"line_end":2208,"column_start":5,"column_end":31}},{"value":"/ let (x, y) = (vec![1, 2], vec![3, 4, 5, 6]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96262,"byte_end":96310,"line_start":2209,"line_end":2209,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<i32> = x.into_par_iter().interleave(y).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96315,"byte_end":96379,"line_start":2210,"line_end":2210,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(r, vec![1, 3, 2, 4, 5, 6]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96384,"byte_end":96426,"line_start":2211,"line_end":2211,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96431,"byte_end":96438,"line_start":2212,"line_end":2212,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4284},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97073,"byte_end":97092,"line_start":2232,"line_end":2232,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::iter::IndexedParallelIterator::interleave_shortest","value":"pub fn interleave_shortest<I>(Self, I) -> InterleaveShortest<Self, I::Iter>\nwhere I: IntoParallelIterator<Item = Self::Item>,\nI::Iter: IndexedParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Interleave elements of this iterator and the other given\n iterator, until one is exhausted.","sig":null,"attributes":[{"value":"/ Interleave elements of this iterator and the other given","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96698,"byte_end":96758,"line_start":2221,"line_end":2221,"column_start":5,"column_end":65}},{"value":"/ iterator, until one is exhausted.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96763,"byte_end":96800,"line_start":2222,"line_end":2222,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96805,"byte_end":96808,"line_start":2223,"line_end":2223,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96813,"byte_end":96827,"line_start":2224,"line_end":2224,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96832,"byte_end":96835,"line_start":2225,"line_end":2225,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96840,"byte_end":96847,"line_start":2226,"line_end":2226,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96852,"byte_end":96878,"line_start":2227,"line_end":2227,"column_start":5,"column_end":31}},{"value":"/ let (x, y) = (vec![1, 2, 3, 4], vec![5, 6]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96883,"byte_end":96931,"line_start":2228,"line_end":2228,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<i32> = x.into_par_iter().interleave_shortest(y).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":96936,"byte_end":97009,"line_start":2229,"line_end":2229,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(r, vec![1, 5, 2, 6, 3]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97014,"byte_end":97053,"line_start":2230,"line_end":2230,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97058,"byte_end":97065,"line_start":2231,"line_end":2231,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4286},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98272,"byte_end":98278,"line_start":2260,"line_end":2260,"column_start":8,"column_end":14},"name":"chunks","qualname":"::iter::IndexedParallelIterator::chunks","value":"pub fn chunks(Self, usize) -> Chunks<Self>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Split an iterator up into fixed-size chunks.","sig":null,"attributes":[{"value":"/ Split an iterator up into fixed-size chunks.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97350,"byte_end":97398,"line_start":2240,"line_end":2240,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97403,"byte_end":97406,"line_start":2241,"line_end":2241,"column_start":5,"column_end":8}},{"value":"/ Returns an iterator that returns `Vec`s of the given number of elements.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97411,"byte_end":97487,"line_start":2242,"line_end":2242,"column_start":5,"column_end":81}},{"value":"/ If the number of elements in the iterator is not divisible by `chunk_size`,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97492,"byte_end":97571,"line_start":2243,"line_end":2243,"column_start":5,"column_end":84}},{"value":"/ the last chunk may be shorter than `chunk_size`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97576,"byte_end":97628,"line_start":2244,"line_end":2244,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97633,"byte_end":97636,"line_start":2245,"line_end":2245,"column_start":5,"column_end":8}},{"value":"/ See also [`par_chunks()`] and [`par_chunks_mut()`] for similar behavior on","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97641,"byte_end":97719,"line_start":2246,"line_end":2246,"column_start":5,"column_end":83}},{"value":"/ slices, without having to allocate intermediate `Vec`s for the chunks.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97724,"byte_end":97798,"line_start":2247,"line_end":2247,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97803,"byte_end":97806,"line_start":2248,"line_end":2248,"column_start":5,"column_end":8}},{"value":"/ [`par_chunks()`]: ../slice/trait.ParallelSlice.html#method.par_chunks","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97811,"byte_end":97884,"line_start":2249,"line_end":2249,"column_start":5,"column_end":78}},{"value":"/ [`par_chunks_mut()`]: ../slice/trait.ParallelSliceMut.html#method.par_chunks_mut","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97889,"byte_end":97973,"line_start":2250,"line_end":2250,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97978,"byte_end":97981,"line_start":2251,"line_end":2251,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":97986,"byte_end":98000,"line_start":2252,"line_end":2252,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98005,"byte_end":98008,"line_start":2253,"line_end":2253,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98013,"byte_end":98020,"line_start":2254,"line_end":2254,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98025,"byte_end":98051,"line_start":2255,"line_end":2255,"column_start":5,"column_end":31}},{"value":"/ let a = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98056,"byte_end":98104,"line_start":2256,"line_end":2256,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<Vec<i32>> = a.into_par_iter().chunks(3).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98109,"byte_end":98174,"line_start":2257,"line_end":2257,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(r, vec![vec![1,2,3], vec![4,5,6], vec![7,8,9], vec![10]]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98179,"byte_end":98252,"line_start":2258,"line_end":2258,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98257,"byte_end":98264,"line_start":2259,"line_end":2259,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4287},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98890,"byte_end":98893,"line_start":2279,"line_end":2279,"column_start":8,"column_end":11},"name":"cmp","qualname":"::iter::IndexedParallelIterator::cmp","value":"pub fn cmp<I>(Self, I) -> Ordering where I: IntoParallelIterator<Item =\nSelf::Item>, I::Iter: IndexedParallelIterator, Self::Item: Ord","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this `ParallelIterator` with those of\n another.","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this `ParallelIterator` with those of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98436,"byte_end":98520,"line_start":2265,"line_end":2265,"column_start":5,"column_end":89}},{"value":"/ another.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98525,"byte_end":98537,"line_start":2266,"line_end":2266,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98542,"byte_end":98545,"line_start":2267,"line_end":2267,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98550,"byte_end":98564,"line_start":2268,"line_end":2268,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98569,"byte_end":98572,"line_start":2269,"line_end":2269,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98577,"byte_end":98584,"line_start":2270,"line_end":2270,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98589,"byte_end":98615,"line_start":2271,"line_end":2271,"column_start":5,"column_end":31}},{"value":"/ use std::cmp::Ordering::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98620,"byte_end":98650,"line_start":2272,"line_end":2272,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98655,"byte_end":98658,"line_start":2273,"line_end":2273,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98663,"byte_end":98689,"line_start":2274,"line_end":2274,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 3, 0]), Less);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98694,"byte_end":98749,"line_start":2275,"line_end":2275,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 2, 3]), Equal);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98754,"byte_end":98810,"line_start":2276,"line_end":2276,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 2]), Greater);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98815,"byte_end":98870,"line_start":2277,"line_end":2277,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":98875,"byte_end":98882,"line_start":2278,"line_end":2278,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4292},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":100122,"byte_end":100133,"line_start":2319,"line_end":2319,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::iter::IndexedParallelIterator::partial_cmp","value":"pub fn partial_cmp<I>(Self, I) -> Option<Ordering> where\nI: IntoParallelIterator, I::Iter: IndexedParallelIterator,\nSelf::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this `ParallelIterator` with those of\n another.","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this `ParallelIterator` with those of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99508,"byte_end":99592,"line_start":2303,"line_end":2303,"column_start":5,"column_end":89}},{"value":"/ another.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99597,"byte_end":99609,"line_start":2304,"line_end":2304,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99614,"byte_end":99617,"line_start":2305,"line_end":2305,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99622,"byte_end":99636,"line_start":2306,"line_end":2306,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99641,"byte_end":99644,"line_start":2307,"line_end":2307,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99649,"byte_end":99656,"line_start":2308,"line_end":2308,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99661,"byte_end":99687,"line_start":2309,"line_end":2309,"column_start":5,"column_end":31}},{"value":"/ use std::cmp::Ordering::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99692,"byte_end":99722,"line_start":2310,"line_end":2310,"column_start":5,"column_end":35}},{"value":"/ use std::f64::NAN;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99727,"byte_end":99749,"line_start":2311,"line_end":2311,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99754,"byte_end":99757,"line_start":2312,"line_end":2312,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1.0, 2.0, 3.0];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99762,"byte_end":99794,"line_start":2313,"line_end":2313,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 3.0, 0.0]), Some(Less));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99799,"byte_end":99874,"line_start":2314,"line_end":2314,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 2.0, 3.0]), Some(Equal));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99879,"byte_end":99955,"line_start":2315,"line_end":2315,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 2.0]), Some(Greater));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":99960,"byte_end":100033,"line_start":2316,"line_end":2316,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, NAN]), None);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":100038,"byte_end":100102,"line_start":2317,"line_end":2317,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":100107,"byte_end":100114,"line_start":2318,"line_end":2318,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4298},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":100912,"byte_end":100914,"line_start":2345,"line_end":2345,"column_start":8,"column_end":10},"name":"eq","qualname":"::iter::IndexedParallelIterator::eq","value":"pub fn eq<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialEq<I::Item>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are equal to those of another\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":100809,"byte_end":100866,"line_start":2343,"line_end":2343,"column_start":5,"column_end":62}},{"value":"/ are equal to those of another","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":100871,"byte_end":100904,"line_start":2344,"line_end":2344,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":4303},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":101416,"byte_end":101418,"line_start":2362,"line_end":2362,"column_start":8,"column_end":10},"name":"ne","qualname":"::iter::IndexedParallelIterator::ne","value":"pub fn ne<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialEq<I::Item>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are unequal to those of another\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":101311,"byte_end":101368,"line_start":2360,"line_end":2360,"column_start":5,"column_end":62}},{"value":"/ are unequal to those of another","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":101373,"byte_end":101408,"line_start":2361,"line_end":2361,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":4305},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":101735,"byte_end":101737,"line_start":2373,"line_end":2373,"column_start":8,"column_end":10},"name":"lt","qualname":"::iter::IndexedParallelIterator::lt","value":"pub fn lt<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are lexicographically less than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":101612,"byte_end":101669,"line_start":2371,"line_end":2371,"column_start":5,"column_end":62}},{"value":"/ are lexicographically less than those of another.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":101674,"byte_end":101727,"line_start":2372,"line_end":2372,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":4307},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":102076,"byte_end":102078,"line_start":2384,"line_end":2384,"column_start":8,"column_end":10},"name":"le","qualname":"::iter::IndexedParallelIterator::le","value":"pub fn le<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are less or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":101964,"byte_end":102021,"line_start":2382,"line_end":2382,"column_start":5,"column_end":62}},{"value":"/ are less or equal to those of another.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":102026,"byte_end":102068,"line_start":2383,"line_end":2383,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":4309},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":102486,"byte_end":102488,"line_start":2396,"line_end":2396,"column_start":8,"column_end":10},"name":"gt","qualname":"::iter::IndexedParallelIterator::gt","value":"pub fn gt<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are lexicographically greater than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":102360,"byte_end":102417,"line_start":2394,"line_end":2394,"column_start":5,"column_end":62}},{"value":"/ are lexicographically greater than those of another.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":102422,"byte_end":102478,"line_start":2395,"line_end":2395,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":4311},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":102830,"byte_end":102832,"line_start":2407,"line_end":2407,"column_start":8,"column_end":10},"name":"ge","qualname":"::iter::IndexedParallelIterator::ge","value":"pub fn ge<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are less or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":102718,"byte_end":102775,"line_start":2405,"line_end":2405,"column_start":5,"column_end":62}},{"value":"/ are less or equal to those of another.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":102780,"byte_end":102822,"line_start":2406,"line_end":2406,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":4313},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103486,"byte_end":103495,"line_start":2432,"line_end":2432,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::iter::IndexedParallelIterator::enumerate","value":"pub fn enumerate(Self) -> Enumerate<Self>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Yields an index along with each item.","sig":null,"attributes":[{"value":"/ Yields an index along with each item.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103117,"byte_end":103158,"line_start":2417,"line_end":2417,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103163,"byte_end":103166,"line_start":2418,"line_end":2418,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103171,"byte_end":103185,"line_start":2419,"line_end":2419,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103190,"byte_end":103193,"line_start":2420,"line_end":2420,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103198,"byte_end":103205,"line_start":2421,"line_end":2421,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103210,"byte_end":103236,"line_start":2422,"line_end":2422,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103241,"byte_end":103244,"line_start":2423,"line_end":2423,"column_start":5,"column_end":8}},{"value":"/ let chars = vec!['a', 'b', 'c'];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103249,"byte_end":103285,"line_start":2424,"line_end":2424,"column_start":5,"column_end":41}},{"value":"/ let result: Vec<_> = chars","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103290,"byte_end":103320,"line_start":2425,"line_end":2425,"column_start":5,"column_end":35}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103325,"byte_end":103349,"line_start":2426,"line_end":2426,"column_start":5,"column_end":29}},{"value":"/     .enumerate()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103354,"byte_end":103374,"line_start":2427,"line_end":2427,"column_start":5,"column_end":25}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103379,"byte_end":103398,"line_start":2428,"line_end":2428,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103403,"byte_end":103406,"line_start":2429,"line_end":2429,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [(0, 'a'), (1, 'b'), (2, 'c')]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103411,"byte_end":103466,"line_start":2430,"line_end":2430,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103471,"byte_end":103478,"line_start":2431,"line_end":2431,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4314},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103898,"byte_end":103902,"line_start":2450,"line_end":2450,"column_start":8,"column_end":12},"name":"skip","qualname":"::iter::IndexedParallelIterator::skip","value":"pub fn skip(Self, usize) -> Skip<Self>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Creates an iterator that skips the first `n` elements.","sig":null,"attributes":[{"value":"/ Creates an iterator that skips the first `n` elements.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103563,"byte_end":103621,"line_start":2436,"line_end":2436,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103626,"byte_end":103629,"line_start":2437,"line_end":2437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103634,"byte_end":103648,"line_start":2438,"line_end":2438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103653,"byte_end":103656,"line_start":2439,"line_end":2439,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103661,"byte_end":103668,"line_start":2440,"line_end":2440,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103673,"byte_end":103699,"line_start":2441,"line_end":2441,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103704,"byte_end":103707,"line_start":2442,"line_end":2442,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..100)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103712,"byte_end":103745,"line_start":2443,"line_end":2443,"column_start":5,"column_end":38}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103750,"byte_end":103774,"line_start":2444,"line_end":2444,"column_start":5,"column_end":29}},{"value":"/     .skip(95)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103779,"byte_end":103796,"line_start":2445,"line_end":2445,"column_start":5,"column_end":22}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103801,"byte_end":103820,"line_start":2446,"line_end":2446,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103825,"byte_end":103828,"line_start":2447,"line_end":2447,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [95, 96, 97, 98, 99]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103833,"byte_end":103878,"line_start":2448,"line_end":2448,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103883,"byte_end":103890,"line_start":2449,"line_end":2449,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4315},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104303,"byte_end":104307,"line_start":2468,"line_end":2468,"column_start":8,"column_end":12},"name":"take","qualname":"::iter::IndexedParallelIterator::take","value":"pub fn take(Self, usize) -> Take<Self>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Creates an iterator that yields the first `n` elements.","sig":null,"attributes":[{"value":"/ Creates an iterator that yields the first `n` elements.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":103973,"byte_end":104032,"line_start":2454,"line_end":2454,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104037,"byte_end":104040,"line_start":2455,"line_end":2455,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104045,"byte_end":104059,"line_start":2456,"line_end":2456,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104064,"byte_end":104067,"line_start":2457,"line_end":2457,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104072,"byte_end":104079,"line_start":2458,"line_end":2458,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104084,"byte_end":104110,"line_start":2459,"line_end":2459,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104115,"byte_end":104118,"line_start":2460,"line_end":2460,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..100)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104123,"byte_end":104156,"line_start":2461,"line_end":2461,"column_start":5,"column_end":38}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104161,"byte_end":104185,"line_start":2462,"line_end":2462,"column_start":5,"column_end":29}},{"value":"/     .take(5)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104190,"byte_end":104206,"line_start":2463,"line_end":2463,"column_start":5,"column_end":21}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104211,"byte_end":104230,"line_start":2464,"line_end":2464,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104235,"byte_end":104238,"line_start":2465,"line_end":2465,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [0, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104243,"byte_end":104283,"line_start":2466,"line_end":2466,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104288,"byte_end":104295,"line_start":2467,"line_end":2467,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4316},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105021,"byte_end":105033,"line_start":2490,"line_end":2490,"column_start":8,"column_end":20},"name":"position_any","qualname":"::iter::IndexedParallelIterator::position_any","value":"pub fn position_any<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate, and returns its index.  Like\n `ParallelIterator::find_any`, the parallel search will not\n necessarily find the **first** match, and once a match is\n found we'll attempt to stop processing any more.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104378,"byte_end":104438,"line_start":2472,"line_end":2472,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate, and returns its index.  Like","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104443,"byte_end":104504,"line_start":2473,"line_end":2473,"column_start":5,"column_end":66}},{"value":"/ `ParallelIterator::find_any`, the parallel search will not","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104509,"byte_end":104571,"line_start":2474,"line_end":2474,"column_start":5,"column_end":67}},{"value":"/ necessarily find the **first** match, and once a match is","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104576,"byte_end":104637,"line_start":2475,"line_end":2475,"column_start":5,"column_end":66}},{"value":"/ found we'll attempt to stop processing any more.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104642,"byte_end":104694,"line_start":2476,"line_end":2476,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104699,"byte_end":104702,"line_start":2477,"line_end":2477,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104707,"byte_end":104721,"line_start":2478,"line_end":2478,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104726,"byte_end":104729,"line_start":2479,"line_end":2479,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104734,"byte_end":104741,"line_start":2480,"line_end":2480,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104746,"byte_end":104772,"line_start":2481,"line_end":2481,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104777,"byte_end":104780,"line_start":2482,"line_end":2482,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104785,"byte_end":104810,"line_start":2483,"line_end":2483,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104815,"byte_end":104818,"line_start":2484,"line_end":2484,"column_start":5,"column_end":8}},{"value":"/ let i = a.par_iter().position_any(|&x| x == 3).expect(\"found\");","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104823,"byte_end":104890,"line_start":2485,"line_end":2485,"column_start":5,"column_end":72}},{"value":"/ assert!(i == 2 || i == 3);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104895,"byte_end":104925,"line_start":2486,"line_end":2486,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104930,"byte_end":104933,"line_start":2487,"line_end":2487,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_any(|&x| x == 100), None);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":104938,"byte_end":105001,"line_start":2488,"line_end":2488,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105006,"byte_end":105013,"line_start":2489,"line_end":2489,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4319},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106274,"byte_end":106288,"line_start":2527,"line_end":2527,"column_start":8,"column_end":22},"name":"position_first","qualname":"::iter::IndexedParallelIterator::position_first","value":"pub fn position_first<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Searches for the sequentially **first** item in the parallel iterator\n that matches the given predicate, and returns its index.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **first** item in the parallel iterator","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105332,"byte_end":105405,"line_start":2503,"line_end":2503,"column_start":5,"column_end":78}},{"value":"/ that matches the given predicate, and returns its index.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105410,"byte_end":105470,"line_start":2504,"line_end":2504,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105475,"byte_end":105478,"line_start":2505,"line_end":2505,"column_start":5,"column_end":8}},{"value":"/ Like `ParallelIterator::find_first`, once a match is found,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105483,"byte_end":105546,"line_start":2506,"line_end":2506,"column_start":5,"column_end":68}},{"value":"/ all attempts to the right of the match will be stopped, while","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105551,"byte_end":105616,"line_start":2507,"line_end":2507,"column_start":5,"column_end":70}},{"value":"/ attempts to the left must continue in case an earlier match","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105621,"byte_end":105684,"line_start":2508,"line_end":2508,"column_start":5,"column_end":68}},{"value":"/ is found.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105689,"byte_end":105702,"line_start":2509,"line_end":2509,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105707,"byte_end":105710,"line_start":2510,"line_end":2510,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105715,"byte_end":105786,"line_start":2511,"line_end":2511,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous.  If you","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105791,"byte_end":105862,"line_start":2512,"line_end":2512,"column_start":5,"column_end":76}},{"value":"/ just want the first match that discovered anywhere in the iterator,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105867,"byte_end":105938,"line_start":2513,"line_end":2513,"column_start":5,"column_end":76}},{"value":"/ `position_any` is a better choice.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105943,"byte_end":105981,"line_start":2514,"line_end":2514,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105986,"byte_end":105989,"line_start":2515,"line_end":2515,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":105994,"byte_end":106008,"line_start":2516,"line_end":2516,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106013,"byte_end":106016,"line_start":2517,"line_end":2517,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106021,"byte_end":106028,"line_start":2518,"line_end":2518,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106033,"byte_end":106059,"line_start":2519,"line_end":2519,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106064,"byte_end":106067,"line_start":2520,"line_end":2520,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106072,"byte_end":106097,"line_start":2521,"line_end":2521,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106102,"byte_end":106105,"line_start":2522,"line_end":2522,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_first(|&x| x == 3), Some(2));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106110,"byte_end":106176,"line_start":2523,"line_end":2523,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106181,"byte_end":106184,"line_start":2524,"line_end":2524,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_first(|&x| x == 100), None);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106189,"byte_end":106254,"line_start":2525,"line_end":2525,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106259,"byte_end":106266,"line_start":2526,"line_end":2526,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4322},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107495,"byte_end":107508,"line_start":2564,"line_end":2564,"column_start":8,"column_end":21},"name":"position_last","qualname":"::iter::IndexedParallelIterator::position_last","value":"pub fn position_last<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Searches for the sequentially **last** item in the parallel iterator\n that matches the given predicate, and returns its index.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **last** item in the parallel iterator","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106589,"byte_end":106661,"line_start":2540,"line_end":2540,"column_start":5,"column_end":77}},{"value":"/ that matches the given predicate, and returns its index.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106666,"byte_end":106726,"line_start":2541,"line_end":2541,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106731,"byte_end":106734,"line_start":2542,"line_end":2542,"column_start":5,"column_end":8}},{"value":"/ Like `ParallelIterator::find_last`, once a match is found,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106739,"byte_end":106801,"line_start":2543,"line_end":2543,"column_start":5,"column_end":67}},{"value":"/ all attempts to the left of the match will be stopped, while","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106806,"byte_end":106870,"line_start":2544,"line_end":2544,"column_start":5,"column_end":69}},{"value":"/ attempts to the right must continue in case a later match","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106875,"byte_end":106936,"line_start":2545,"line_end":2545,"column_start":5,"column_end":66}},{"value":"/ is found.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106941,"byte_end":106954,"line_start":2546,"line_end":2546,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106959,"byte_end":106962,"line_start":2547,"line_end":2547,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":106967,"byte_end":107038,"line_start":2548,"line_end":2548,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"last\" may be nebulous.  When the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107043,"byte_end":107115,"line_start":2549,"line_end":2549,"column_start":5,"column_end":77}},{"value":"/ order doesn't actually matter to you, `position_any` is a better","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107120,"byte_end":107188,"line_start":2550,"line_end":2550,"column_start":5,"column_end":73}},{"value":"/ choice.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107193,"byte_end":107204,"line_start":2551,"line_end":2551,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107209,"byte_end":107212,"line_start":2552,"line_end":2552,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107217,"byte_end":107231,"line_start":2553,"line_end":2553,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107236,"byte_end":107239,"line_start":2554,"line_end":2554,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107244,"byte_end":107251,"line_start":2555,"line_end":2555,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107256,"byte_end":107282,"line_start":2556,"line_end":2556,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107287,"byte_end":107290,"line_start":2557,"line_end":2557,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107295,"byte_end":107320,"line_start":2558,"line_end":2558,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107325,"byte_end":107328,"line_start":2559,"line_end":2559,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_last(|&x| x == 3), Some(3));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107333,"byte_end":107398,"line_start":2560,"line_end":2560,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107403,"byte_end":107406,"line_start":2561,"line_end":2561,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_last(|&x| x == 100), None);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107411,"byte_end":107475,"line_start":2562,"line_end":2562,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107480,"byte_end":107487,"line_start":2563,"line_end":2563,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4325},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107996,"byte_end":108004,"line_start":2582,"line_end":2582,"column_start":8,"column_end":16},"name":"position","qualname":"::iter::IndexedParallelIterator::position","value":"pub fn position<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) -> bool +\nSync + Send","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note =\n             \"parallel `position` does not search in order -- use `position_any`, \\\\\n                `position_first`, or `position_last`\")","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":107827,"byte_end":107988,"line_start":2578,"line_end":2581,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":4327},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108513,"byte_end":108516,"line_start":2604,"line_end":2604,"column_start":8,"column_end":11},"name":"rev","qualname":"::iter::IndexedParallelIterator::rev","value":"pub fn rev(Self) -> Rev<Self>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Produces a new iterator with the elements of this iterator in\n reverse order.","sig":null,"attributes":[{"value":"/ Produces a new iterator with the elements of this iterator in","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108158,"byte_end":108223,"line_start":2589,"line_end":2589,"column_start":5,"column_end":70}},{"value":"/ reverse order.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108228,"byte_end":108246,"line_start":2590,"line_end":2590,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108251,"byte_end":108254,"line_start":2591,"line_end":2591,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108259,"byte_end":108273,"line_start":2592,"line_end":2592,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108278,"byte_end":108281,"line_start":2593,"line_end":2593,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108286,"byte_end":108293,"line_start":2594,"line_end":2594,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108298,"byte_end":108324,"line_start":2595,"line_end":2595,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108329,"byte_end":108332,"line_start":2596,"line_end":2596,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..5)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108337,"byte_end":108368,"line_start":2597,"line_end":2597,"column_start":5,"column_end":36}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108373,"byte_end":108397,"line_start":2598,"line_end":2598,"column_start":5,"column_end":29}},{"value":"/     .rev()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108402,"byte_end":108416,"line_start":2599,"line_end":2599,"column_start":5,"column_end":19}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108421,"byte_end":108440,"line_start":2600,"line_end":2600,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108445,"byte_end":108448,"line_start":2601,"line_end":2601,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108453,"byte_end":108493,"line_start":2602,"line_end":2602,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108498,"byte_end":108505,"line_start":2603,"line_end":2603,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4328},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109333,"byte_end":109345,"line_start":2630,"line_end":2630,"column_start":8,"column_end":20},"name":"with_min_len","qualname":"::iter::IndexedParallelIterator::with_min_len","value":"pub fn with_min_len(Self, usize) -> MinLen<Self>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Sets the minimum length of iterators desired to process in each\n thread.  Rayon will not split any smaller than this length, but\n of course an iterator could already be smaller to begin with.","sig":null,"attributes":[{"value":"/ Sets the minimum length of iterators desired to process in each","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108572,"byte_end":108639,"line_start":2608,"line_end":2608,"column_start":5,"column_end":72}},{"value":"/ thread.  Rayon will not split any smaller than this length, but","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108644,"byte_end":108711,"line_start":2609,"line_end":2609,"column_start":5,"column_end":72}},{"value":"/ of course an iterator could already be smaller to begin with.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108716,"byte_end":108781,"line_start":2610,"line_end":2610,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108786,"byte_end":108789,"line_start":2611,"line_end":2611,"column_start":5,"column_end":8}},{"value":"/ Producers like `zip` and `interleave` will use greater of the two","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108794,"byte_end":108863,"line_start":2612,"line_end":2612,"column_start":5,"column_end":74}},{"value":"/ minimums.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108868,"byte_end":108881,"line_start":2613,"line_end":2613,"column_start":5,"column_end":18}},{"value":"/ Chained iterators and iterators inside `flat_map` may each use","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108886,"byte_end":108952,"line_start":2614,"line_end":2614,"column_start":5,"column_end":71}},{"value":"/ their own minimum length.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108957,"byte_end":108986,"line_start":2615,"line_end":2615,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108991,"byte_end":108994,"line_start":2616,"line_end":2616,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":108999,"byte_end":109013,"line_start":2617,"line_end":2617,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109018,"byte_end":109021,"line_start":2618,"line_end":2618,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109026,"byte_end":109033,"line_start":2619,"line_end":2619,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109038,"byte_end":109064,"line_start":2620,"line_end":2620,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109069,"byte_end":109072,"line_start":2621,"line_end":2621,"column_start":5,"column_end":8}},{"value":"/ let min = (0..1_000_000)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109077,"byte_end":109105,"line_start":2622,"line_end":2622,"column_start":5,"column_end":33}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109110,"byte_end":109134,"line_start":2623,"line_end":2623,"column_start":5,"column_end":29}},{"value":"/     .with_min_len(1234)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109139,"byte_end":109166,"line_start":2624,"line_end":2624,"column_start":5,"column_end":32}},{"value":"/     .fold(|| 0, |acc, _| acc + 1) // count how many are in this segment","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109171,"byte_end":109246,"line_start":2625,"line_end":2625,"column_start":5,"column_end":80}},{"value":"/     .min().unwrap();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109251,"byte_end":109275,"line_start":2626,"line_end":2626,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109280,"byte_end":109283,"line_start":2627,"line_end":2627,"column_start":5,"column_end":8}},{"value":"/ assert!(min >= 1234);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109288,"byte_end":109313,"line_start":2628,"line_end":2628,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109318,"byte_end":109325,"line_start":2629,"line_end":2629,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4329},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110284,"byte_end":110296,"line_start":2658,"line_end":2658,"column_start":8,"column_end":20},"name":"with_max_len","qualname":"::iter::IndexedParallelIterator::with_max_len","value":"pub fn with_max_len(Self, usize) -> MaxLen<Self>","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Sets the maximum length of iterators desired to process in each\n thread.  Rayon will try to split at least below this length,\n unless that would put it below the length from `with_min_len()`.\n For example, given min=10 and max=15, a length of 16 will not be\n split any further.","sig":null,"attributes":[{"value":"/ Sets the maximum length of iterators desired to process in each","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109424,"byte_end":109491,"line_start":2634,"line_end":2634,"column_start":5,"column_end":72}},{"value":"/ thread.  Rayon will try to split at least below this length,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109496,"byte_end":109560,"line_start":2635,"line_end":2635,"column_start":5,"column_end":69}},{"value":"/ unless that would put it below the length from `with_min_len()`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109565,"byte_end":109633,"line_start":2636,"line_end":2636,"column_start":5,"column_end":73}},{"value":"/ For example, given min=10 and max=15, a length of 16 will not be","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109638,"byte_end":109706,"line_start":2637,"line_end":2637,"column_start":5,"column_end":73}},{"value":"/ split any further.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109711,"byte_end":109733,"line_start":2638,"line_end":2638,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109738,"byte_end":109741,"line_start":2639,"line_end":2639,"column_start":5,"column_end":8}},{"value":"/ Producers like `zip` and `interleave` will use lesser of the two","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109746,"byte_end":109814,"line_start":2640,"line_end":2640,"column_start":5,"column_end":73}},{"value":"/ maximums.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109819,"byte_end":109832,"line_start":2641,"line_end":2641,"column_start":5,"column_end":18}},{"value":"/ Chained iterators and iterators inside `flat_map` may each use","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109837,"byte_end":109903,"line_start":2642,"line_end":2642,"column_start":5,"column_end":71}},{"value":"/ their own maximum length.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109908,"byte_end":109937,"line_start":2643,"line_end":2643,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109942,"byte_end":109945,"line_start":2644,"line_end":2644,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109950,"byte_end":109964,"line_start":2645,"line_end":2645,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109969,"byte_end":109972,"line_start":2646,"line_end":2646,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109977,"byte_end":109984,"line_start":2647,"line_end":2647,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":109989,"byte_end":110015,"line_start":2648,"line_end":2648,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110020,"byte_end":110023,"line_start":2649,"line_end":2649,"column_start":5,"column_end":8}},{"value":"/ let max = (0..1_000_000)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110028,"byte_end":110056,"line_start":2650,"line_end":2650,"column_start":5,"column_end":33}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110061,"byte_end":110085,"line_start":2651,"line_end":2651,"column_start":5,"column_end":29}},{"value":"/     .with_max_len(1234)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110090,"byte_end":110117,"line_start":2652,"line_end":2652,"column_start":5,"column_end":32}},{"value":"/     .fold(|| 0, |acc, _| acc + 1) // count how many are in this segment","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110122,"byte_end":110197,"line_start":2653,"line_end":2653,"column_start":5,"column_end":80}},{"value":"/     .max().unwrap();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110202,"byte_end":110226,"line_start":2654,"line_end":2654,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110231,"byte_end":110234,"line_start":2655,"line_end":2655,"column_start":5,"column_end":8}},{"value":"/ assert!(max <= 1234);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110239,"byte_end":110264,"line_start":2656,"line_end":2656,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110269,"byte_end":110276,"line_start":2657,"line_end":2657,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4330},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110784,"byte_end":110787,"line_start":2676,"line_end":2676,"column_start":8,"column_end":11},"name":"len","qualname":"::iter::IndexedParallelIterator::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Produces an exact count of how many items this iterator will\n produce, presuming no panic occurs.","sig":null,"attributes":[{"value":"/ Produces an exact count of how many items this iterator will","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110375,"byte_end":110439,"line_start":2662,"line_end":2662,"column_start":5,"column_end":69}},{"value":"/ produce, presuming no panic occurs.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110444,"byte_end":110483,"line_start":2663,"line_end":2663,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110488,"byte_end":110491,"line_start":2664,"line_end":2664,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110496,"byte_end":110510,"line_start":2665,"line_end":2665,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110515,"byte_end":110518,"line_start":2666,"line_end":2666,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110523,"byte_end":110530,"line_start":2667,"line_end":2667,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110535,"byte_end":110561,"line_start":2668,"line_end":2668,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110566,"byte_end":110569,"line_start":2669,"line_end":2669,"column_start":5,"column_end":8}},{"value":"/ let par_iter = (0..100).into_par_iter().zip(vec![0; 10]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110574,"byte_end":110635,"line_start":2670,"line_end":2670,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(par_iter.len(), 10);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110640,"byte_end":110675,"line_start":2671,"line_end":2671,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110680,"byte_end":110683,"line_start":2672,"line_end":2672,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110688,"byte_end":110729,"line_start":2673,"line_end":2673,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(vec.len(), 10);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110734,"byte_end":110764,"line_start":2674,"line_end":2674,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110769,"byte_end":110776,"line_start":2675,"line_end":2675,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4331},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111487,"byte_end":111492,"line_start":2692,"line_end":2692,"column_start":8,"column_end":13},"name":"drive","qualname":"::iter::IndexedParallelIterator::drive","value":"pub fn drive<C: Consumer<Self::Item>>(Self, C) -> C::Result","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110810,"byte_end":110874,"line_start":2678,"line_end":2678,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110879,"byte_end":110935,"line_start":2679,"line_end":2679,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110940,"byte_end":110943,"line_start":2680,"line_end":2680,"column_start":5,"column_end":8}},{"value":"/ This method causes the iterator `self` to start producing","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":110948,"byte_end":111009,"line_start":2681,"line_end":2681,"column_start":5,"column_end":66}},{"value":"/ items and to feed them to the consumer `consumer` one by one.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111014,"byte_end":111079,"line_start":2682,"line_end":2682,"column_start":5,"column_end":70}},{"value":"/ It may split the consumer before doing so to create the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111084,"byte_end":111143,"line_start":2683,"line_end":2683,"column_start":5,"column_end":64}},{"value":"/ opportunity to produce in parallel. If a split does happen, it","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111148,"byte_end":111214,"line_start":2684,"line_end":2684,"column_start":5,"column_end":71}},{"value":"/ will inform the consumer of the index where the split should","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111219,"byte_end":111283,"line_start":2685,"line_end":2685,"column_start":5,"column_end":69}},{"value":"/ occur (unlike `ParallelIterator::drive_unindexed()`).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111288,"byte_end":111345,"line_start":2686,"line_end":2686,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111350,"byte_end":111353,"line_start":2687,"line_end":2687,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111358,"byte_end":111424,"line_start":2688,"line_end":2688,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111429,"byte_end":111443,"line_start":2689,"line_end":2689,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111448,"byte_end":111451,"line_start":2690,"line_end":2690,"column_start":5,"column_end":8}},{"value":"/ [README]: README.md","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111456,"byte_end":111479,"line_start":2691,"line_end":2691,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":4333},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112268,"byte_end":112281,"line_start":2709,"line_end":2709,"column_start":8,"column_end":21},"name":"with_producer","qualname":"::iter::IndexedParallelIterator::with_producer","value":"pub fn with_producer<CB: ProducerCallback<Self::Item>>(Self, CB) -> CB::Output","parent":{"krate":0,"index":4273},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111556,"byte_end":111620,"line_start":2694,"line_end":2694,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111625,"byte_end":111681,"line_start":2695,"line_end":2695,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111686,"byte_end":111689,"line_start":2696,"line_end":2696,"column_start":5,"column_end":8}},{"value":"/ This method converts the iterator into a producer P and then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111694,"byte_end":111758,"line_start":2697,"line_end":2697,"column_start":5,"column_end":69}},{"value":"/ invokes `callback.callback()` with P. Note that the type of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111763,"byte_end":111826,"line_start":2698,"line_end":2698,"column_start":5,"column_end":68}},{"value":"/ this producer is not defined as part of the API, since","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111831,"byte_end":111889,"line_start":2699,"line_end":2699,"column_start":5,"column_end":63}},{"value":"/ `callback` must be defined generically for all producers. This","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111894,"byte_end":111960,"line_start":2700,"line_end":2700,"column_start":5,"column_end":71}},{"value":"/ allows the producer type to contain references; it also means","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":111965,"byte_end":112030,"line_start":2701,"line_end":2701,"column_start":5,"column_end":70}},{"value":"/ that parallel iterators can adjust that type without causing a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112035,"byte_end":112101,"line_start":2702,"line_end":2702,"column_start":5,"column_end":71}},{"value":"/ breaking change.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112106,"byte_end":112126,"line_start":2703,"line_end":2703,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112131,"byte_end":112134,"line_start":2704,"line_end":2704,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112139,"byte_end":112205,"line_start":2705,"line_end":2705,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112210,"byte_end":112224,"line_start":2706,"line_end":2706,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112229,"byte_end":112232,"line_start":2707,"line_end":2707,"column_start":5,"column_end":8}},{"value":"/ [README]: README.md","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112237,"byte_end":112260,"line_start":2708,"line_end":2708,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":4335},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113431,"byte_end":113451,"line_start":2748,"line_end":2748,"column_start":11,"column_end":31},"name":"FromParallelIterator","qualname":"::iter::FromParallelIterator","value":"FromParallelIterator<T>","parent":null,"children":[{"krate":0,"index":4337}],"decl_id":null,"docs":" `FromParallelIterator` implements the creation of a collection\n from a [`ParallelIterator`]. By implementing\n `FromParallelIterator` for a given type, you define how it will be\n created from an iterator.","sig":null,"attributes":[{"value":"/ `FromParallelIterator` implements the creation of a collection","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112354,"byte_end":112420,"line_start":2712,"line_end":2712,"column_start":1,"column_end":67}},{"value":"/ from a [`ParallelIterator`]. By implementing","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112421,"byte_end":112469,"line_start":2713,"line_end":2713,"column_start":1,"column_end":49}},{"value":"/ `FromParallelIterator` for a given type, you define how it will be","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112470,"byte_end":112540,"line_start":2714,"line_end":2714,"column_start":1,"column_end":71}},{"value":"/ created from an iterator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112541,"byte_end":112570,"line_start":2715,"line_end":2715,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112571,"byte_end":112574,"line_start":2716,"line_end":2716,"column_start":1,"column_end":4}},{"value":"/ `FromParallelIterator` is used through [`ParallelIterator`]'s [`collect()`] method.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112575,"byte_end":112662,"line_start":2717,"line_end":2717,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112663,"byte_end":112666,"line_start":2718,"line_end":2718,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112667,"byte_end":112720,"line_start":2719,"line_end":2719,"column_start":1,"column_end":54}},{"value":"/ [`collect()`]: trait.ParallelIterator.html#method.collect","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112721,"byte_end":112782,"line_start":2720,"line_end":2720,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112783,"byte_end":112786,"line_start":2721,"line_end":2721,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112787,"byte_end":112801,"line_start":2722,"line_end":2722,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112802,"byte_end":112805,"line_start":2723,"line_end":2723,"column_start":1,"column_end":4}},{"value":"/ Implementing `FromParallelIterator` for your type:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112806,"byte_end":112860,"line_start":2724,"line_end":2724,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112861,"byte_end":112864,"line_start":2725,"line_end":2725,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112865,"byte_end":112872,"line_start":2726,"line_end":2726,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112873,"byte_end":112899,"line_start":2727,"line_end":2727,"column_start":1,"column_end":27}},{"value":"/ use std::mem;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112900,"byte_end":112917,"line_start":2728,"line_end":2728,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112918,"byte_end":112921,"line_start":2729,"line_end":2729,"column_start":1,"column_end":4}},{"value":"/ struct BlackHole {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112922,"byte_end":112944,"line_start":2730,"line_end":2730,"column_start":1,"column_end":23}},{"value":"/     mass: usize,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112945,"byte_end":112965,"line_start":2731,"line_end":2731,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112966,"byte_end":112971,"line_start":2732,"line_end":2732,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112972,"byte_end":112975,"line_start":2733,"line_end":2733,"column_start":1,"column_end":4}},{"value":"/ impl<T: Send> FromParallelIterator<T> for BlackHole {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":112976,"byte_end":113033,"line_start":2734,"line_end":2734,"column_start":1,"column_end":58}},{"value":"/     fn from_par_iter<I>(par_iter: I) -> Self","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113034,"byte_end":113082,"line_start":2735,"line_end":2735,"column_start":1,"column_end":49}},{"value":"/         where I: IntoParallelIterator<Item = T>","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113083,"byte_end":113134,"line_start":2736,"line_end":2736,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113135,"byte_end":113144,"line_start":2737,"line_end":2737,"column_start":1,"column_end":10}},{"value":"/         let par_iter = par_iter.into_par_iter();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113145,"byte_end":113197,"line_start":2738,"line_end":2738,"column_start":1,"column_end":53}},{"value":"/         BlackHole {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113198,"byte_end":113221,"line_start":2739,"line_end":2739,"column_start":1,"column_end":24}},{"value":"/             mass: par_iter.count() * mem::size_of::<T>(),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113222,"byte_end":113283,"line_start":2740,"line_end":2740,"column_start":1,"column_end":62}},{"value":"/         }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113284,"byte_end":113297,"line_start":2741,"line_end":2741,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113298,"byte_end":113307,"line_start":2742,"line_end":2742,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113308,"byte_end":113313,"line_start":2743,"line_end":2743,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113314,"byte_end":113317,"line_start":2744,"line_end":2744,"column_start":1,"column_end":4}},{"value":"/ let bh: BlackHole = (0i32..1000).into_par_iter().collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113318,"byte_end":113381,"line_start":2745,"line_end":2745,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(bh.mass, 4000);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113382,"byte_end":113412,"line_start":2746,"line_end":2746,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113413,"byte_end":113420,"line_start":2747,"line_end":2747,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":4337},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114429,"byte_end":114442,"line_start":2767,"line_end":2767,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"::iter::FromParallelIterator::from_par_iter","value":"pub fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":4335},"children":[],"decl_id":null,"docs":" Creates an instance of the collection from the parallel iterator `par_iter`.","sig":null,"attributes":[{"value":"/ Creates an instance of the collection from the parallel iterator `par_iter`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113480,"byte_end":113560,"line_start":2752,"line_end":2752,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113565,"byte_end":113568,"line_start":2753,"line_end":2753,"column_start":5,"column_end":8}},{"value":"/ If your collection is not naturally parallel, the easiest (and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113573,"byte_end":113639,"line_start":2754,"line_end":2754,"column_start":5,"column_end":71}},{"value":"/ fastest) way to do this is often to collect `par_iter` into a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113644,"byte_end":113709,"line_start":2755,"line_end":2755,"column_start":5,"column_end":70}},{"value":"/ [`LinkedList`] or other intermediate data structure and then","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113714,"byte_end":113778,"line_start":2756,"line_end":2756,"column_start":5,"column_end":69}},{"value":"/ sequentially extend your collection. However, a more 'native'","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113783,"byte_end":113848,"line_start":2757,"line_end":2757,"column_start":5,"column_end":70}},{"value":"/ technique is to use the [`par_iter.fold`] or","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113853,"byte_end":113901,"line_start":2758,"line_end":2758,"column_start":5,"column_end":53}},{"value":"/ [`par_iter.fold_with`] methods to create the collection.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113906,"byte_end":113966,"line_start":2759,"line_end":2759,"column_start":5,"column_end":65}},{"value":"/ Alternatively, if your collection is 'natively' parallel, you","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":113971,"byte_end":114036,"line_start":2760,"line_end":2760,"column_start":5,"column_end":70}},{"value":"/ can use `par_iter.for_each` to process each element in turn.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114041,"byte_end":114105,"line_start":2761,"line_end":2761,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114110,"byte_end":114113,"line_start":2762,"line_end":2762,"column_start":5,"column_end":8}},{"value":"/ [`LinkedList`]: https://doc.rust-lang.org/std/collections/struct.LinkedList.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114118,"byte_end":114202,"line_start":2763,"line_end":2763,"column_start":5,"column_end":89}},{"value":"/ [`par_iter.fold`]: trait.ParallelIterator.html#method.fold","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114207,"byte_end":114269,"line_start":2764,"line_end":2764,"column_start":5,"column_end":67}},{"value":"/ [`par_iter.fold_with`]: trait.ParallelIterator.html#method.fold_with","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114274,"byte_end":114346,"line_start":2765,"line_end":2765,"column_start":5,"column_end":77}},{"value":"/ [`par_iter.for_each`]: trait.ParallelIterator.html#method.for_each","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114351,"byte_end":114421,"line_start":2766,"line_end":2766,"column_start":5,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":4339},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115341,"byte_end":115355,"line_start":2803,"line_end":2803,"column_start":11,"column_end":25},"name":"ParallelExtend","qualname":"::iter::ParallelExtend","value":"ParallelExtend<T>","parent":null,"children":[{"krate":0,"index":4341}],"decl_id":null,"docs":" `ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114523,"byte_end":114614,"line_start":2772,"line_end":2772,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114615,"byte_end":114618,"line_start":2773,"line_end":2773,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114619,"byte_end":114672,"line_start":2774,"line_end":2774,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114673,"byte_end":114676,"line_start":2775,"line_end":2775,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114677,"byte_end":114691,"line_start":2776,"line_end":2776,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114692,"byte_end":114695,"line_start":2777,"line_end":2777,"column_start":1,"column_end":4}},{"value":"/ Implementing `ParallelExtend` for your type:","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114696,"byte_end":114744,"line_start":2778,"line_end":2778,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114745,"byte_end":114748,"line_start":2779,"line_end":2779,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114749,"byte_end":114756,"line_start":2780,"line_end":2780,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114757,"byte_end":114783,"line_start":2781,"line_end":2781,"column_start":1,"column_end":27}},{"value":"/ use std::mem;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114784,"byte_end":114801,"line_start":2782,"line_end":2782,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114802,"byte_end":114805,"line_start":2783,"line_end":2783,"column_start":1,"column_end":4}},{"value":"/ struct BlackHole {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114806,"byte_end":114828,"line_start":2784,"line_end":2784,"column_start":1,"column_end":23}},{"value":"/     mass: usize,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114829,"byte_end":114849,"line_start":2785,"line_end":2785,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114850,"byte_end":114855,"line_start":2786,"line_end":2786,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114856,"byte_end":114859,"line_start":2787,"line_end":2787,"column_start":1,"column_end":4}},{"value":"/ impl<T: Send> ParallelExtend<T> for BlackHole {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114860,"byte_end":114911,"line_start":2788,"line_end":2788,"column_start":1,"column_end":52}},{"value":"/     fn par_extend<I>(&mut self, par_iter: I)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114912,"byte_end":114960,"line_start":2789,"line_end":2789,"column_start":1,"column_end":49}},{"value":"/         where I: IntoParallelIterator<Item = T>","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":114961,"byte_end":115012,"line_start":2790,"line_end":2790,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115013,"byte_end":115022,"line_start":2791,"line_end":2791,"column_start":1,"column_end":10}},{"value":"/         let par_iter = par_iter.into_par_iter();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115023,"byte_end":115075,"line_start":2792,"line_end":2792,"column_start":1,"column_end":53}},{"value":"/         self.mass += par_iter.count() * mem::size_of::<T>();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115076,"byte_end":115140,"line_start":2793,"line_end":2793,"column_start":1,"column_end":65}},{"value":"/     }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115141,"byte_end":115150,"line_start":2794,"line_end":2794,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115151,"byte_end":115156,"line_start":2795,"line_end":2795,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115157,"byte_end":115160,"line_start":2796,"line_end":2796,"column_start":1,"column_end":4}},{"value":"/ let mut bh = BlackHole { mass: 0 };","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115161,"byte_end":115200,"line_start":2797,"line_end":2797,"column_start":1,"column_end":40}},{"value":"/ bh.par_extend(0i32..1000);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115201,"byte_end":115231,"line_start":2798,"line_end":2798,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(bh.mass, 4000);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115232,"byte_end":115262,"line_start":2799,"line_end":2799,"column_start":1,"column_end":31}},{"value":"/ bh.par_extend(0i64..10);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115263,"byte_end":115291,"line_start":2800,"line_end":2800,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(bh.mass, 4080);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115292,"byte_end":115322,"line_start":2801,"line_end":2801,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115323,"byte_end":115330,"line_start":2802,"line_end":2802,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":4341},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115783,"byte_end":115793,"line_start":2820,"line_end":2820,"column_start":8,"column_end":18},"name":"par_extend","qualname":"::iter::ParallelExtend::par_extend","value":"pub fn par_extend<I>(&mut Self, I) where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":4339},"children":[],"decl_id":null,"docs":" Extends an instance of the collection with the elements drawn\n from the parallel iterator `par_iter`.","sig":null,"attributes":[{"value":"/ Extends an instance of the collection with the elements drawn","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115384,"byte_end":115449,"line_start":2807,"line_end":2807,"column_start":5,"column_end":70}},{"value":"/ from the parallel iterator `par_iter`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115454,"byte_end":115496,"line_start":2808,"line_end":2808,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115501,"byte_end":115504,"line_start":2809,"line_end":2809,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115509,"byte_end":115523,"line_start":2810,"line_end":2810,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115528,"byte_end":115531,"line_start":2811,"line_end":2811,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115536,"byte_end":115543,"line_start":2812,"line_end":2812,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115548,"byte_end":115574,"line_start":2813,"line_end":2813,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115579,"byte_end":115582,"line_start":2814,"line_end":2814,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115587,"byte_end":115612,"line_start":2815,"line_end":2815,"column_start":5,"column_end":30}},{"value":"/ vec.par_extend(0..5);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115617,"byte_end":115642,"line_start":2816,"line_end":2816,"column_start":5,"column_end":30}},{"value":"/ vec.par_extend((0..5).into_par_iter().map(|i| i * i));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115647,"byte_end":115705,"line_start":2817,"line_end":2817,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(vec, [0, 1, 2, 3, 4, 0, 1, 4, 9, 16]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115710,"byte_end":115763,"line_start":2818,"line_end":2818,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":115768,"byte_end":115775,"line_start":2819,"line_end":2819,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4344},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116165,"byte_end":116168,"line_start":2831,"line_end":2831,"column_start":15,"column_end":18},"name":"Try","qualname":"::iter::private::Try","value":"Try","parent":null,"children":[{"krate":0,"index":6274},{"krate":0,"index":4345},{"krate":0,"index":4346},{"krate":0,"index":4347},{"krate":0,"index":4348},{"krate":0,"index":4349}],"decl_id":null,"docs":" Clone of `std::ops::Try`.","sig":null,"attributes":[{"value":"/ Clone of `std::ops::Try`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116044,"byte_end":116073,"line_start":2828,"line_end":2828,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116078,"byte_end":116081,"line_start":2829,"line_end":2829,"column_start":5,"column_end":8}},{"value":"/ Implementing this trait is not permitted outside of `rayon`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116086,"byte_end":116150,"line_start":2830,"line_end":2830,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":4345},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116210,"byte_end":116212,"line_start":2834,"line_end":2834,"column_start":14,"column_end":16},"name":"Ok","qualname":"::iter::private::Try::Ok","value":"type Ok;","parent":{"krate":0,"index":4344},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4346},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116227,"byte_end":116232,"line_start":2835,"line_end":2835,"column_start":14,"column_end":19},"name":"Error","qualname":"::iter::private::Try::Error","value":"type Error;","parent":{"krate":0,"index":4344},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4347},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116245,"byte_end":116256,"line_start":2836,"line_end":2836,"column_start":12,"column_end":23},"name":"into_result","qualname":"::iter::private::Try::into_result","value":"pub fn into_result(Self) -> Result<Self::Ok, Self::Error>","parent":{"krate":0,"index":4344},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4348},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116308,"byte_end":116315,"line_start":2837,"line_end":2837,"column_start":12,"column_end":19},"name":"from_ok","qualname":"::iter::private::Try::from_ok","value":"pub fn from_ok(Self::Ok) -> Self","parent":{"krate":0,"index":4344},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4349},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116349,"byte_end":116359,"line_start":2838,"line_end":2838,"column_start":12,"column_end":22},"name":"from_error","qualname":"::iter::private::Try::from_error","value":"pub fn from_error(Self::Error) -> Self","parent":{"krate":0,"index":4344},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":4365},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"option","qualname":"::option","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","parent":null,"children":[{"krate":0,"index":4366},{"krate":0,"index":4367},{"krate":0,"index":4368},{"krate":0,"index":4371},{"krate":0,"index":4372},{"krate":0,"index":4375},{"krate":0,"index":6277},{"krate":0,"index":6280},{"krate":0,"index":6283},{"krate":0,"index":4378},{"krate":0,"index":4383},{"krate":0,"index":4389},{"krate":0,"index":6286},{"krate":0,"index":6290},{"krate":0,"index":4396},{"krate":0,"index":4400},{"krate":0,"index":6302},{"krate":0,"index":6294},{"krate":0,"index":6309},{"krate":0,"index":6313},{"krate":0,"index":4406},{"krate":0,"index":6325},{"krate":0,"index":6317},{"krate":0,"index":4412},{"krate":0,"index":4415},{"krate":0,"index":4421}],"decl_id":null,"docs":" Parallel iterator types for [options][std::option]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [options][std::option]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366071,"byte_end":366125,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366126,"byte_end":366129,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366130,"byte_end":366208,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366209,"byte_end":366247,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366248,"byte_end":366251,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::option]: https://doc.rust-lang.org/stable/std/option/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366252,"byte_end":366315,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":6277},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366918,"byte_end":366926,"line_start":23,"line_end":23,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::option::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6279}],"decl_id":null,"docs":" A parallel iterator over the value in [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over the value in [`Some`] variant of an [`Option`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366410,"byte_end":366486,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366487,"byte_end":366490,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366491,"byte_end":366573,"line_start":15,"line_end":15,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366574,"byte_end":366577,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_par_iter`] function.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366578,"byte_end":366641,"line_start":17,"line_end":17,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366642,"byte_end":366645,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366646,"byte_end":366715,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366716,"byte_end":366796,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ [`into_par_iter`]: ../iter/trait.IntoParallelIterator.html#tymethod.into_par_iter","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":366797,"byte_end":366882,"line_start":21,"line_end":21,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":6286},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":368568,"byte_end":368572,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"Iter","qualname":"::option::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6289}],"decl_id":null,"docs":" A parallel iterator over a reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over a reference to the [`Some`] variant of an [`Option`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":368073,"byte_end":368155,"line_start":78,"line_end":78,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":368156,"byte_end":368159,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":368160,"byte_end":368242,"line_start":80,"line_end":80,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":368243,"byte_end":368246,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`par_iter`] function.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":368247,"byte_end":368305,"line_start":82,"line_end":82,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":368306,"byte_end":368309,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":368310,"byte_end":368379,"line_start":84,"line_end":84,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":368380,"byte_end":368460,"line_start":85,"line_end":85,"column_start":1,"column_end":81}},{"value":"/ [`par_iter`]: ../iter/trait.IntoParallelRefIterator.html#tymethod.par_iter","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":368461,"byte_end":368539,"line_start":86,"line_end":86,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":6309},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":369611,"byte_end":369618,"line_start":126,"line_end":126,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::option::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":6312}],"decl_id":null,"docs":" A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":369093,"byte_end":369183,"line_start":116,"line_end":116,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":369184,"byte_end":369187,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":369188,"byte_end":369270,"line_start":118,"line_end":118,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":369271,"byte_end":369274,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`par_iter_mut`] function.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":369275,"byte_end":369337,"line_start":120,"line_end":120,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":369338,"byte_end":369341,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":369342,"byte_end":369411,"line_start":122,"line_end":122,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":369412,"byte_end":369492,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/ [`par_iter_mut`]: ../iter/trait.IntoParallelRefMutIterator.html#tymethod.par_iter_mut","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":369493,"byte_end":369582,"line_start":124,"line_end":124,"column_start":1,"column_end":90}}]},{"kind":"Mod","id":{"krate":0,"index":4430},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","parent":null,"children":[{"krate":0,"index":4431},{"krate":0,"index":4434},{"krate":0,"index":4437},{"krate":0,"index":4440},{"krate":0,"index":4443},{"krate":0,"index":4446},{"krate":0,"index":4449},{"krate":0,"index":4452},{"krate":0,"index":4455},{"krate":0,"index":4458},{"krate":0,"index":4461}],"decl_id":null,"docs":" The rayon prelude imports the various `ParallelIterator` traits.\n The intention is that one can include `use rayon::prelude::*` and\n have easy access to the various traits and methods you will need.\n","sig":null,"attributes":[{"value":"/ The rayon prelude imports the various `ParallelIterator` traits.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":371515,"byte_end":371583,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/ The intention is that one can include `use rayon::prelude::*` and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":371584,"byte_end":371653,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"/ have easy access to the various traits and methods you will need.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\prelude.rs","byte_start":371654,"byte_end":371723,"line_start":3,"line_end":3,"column_start":1,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":4464},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range","qualname":"::range","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","parent":null,"children":[{"krate":0,"index":4465},{"krate":0,"index":4466},{"krate":0,"index":4467},{"krate":0,"index":4470},{"krate":0,"index":6332},{"krate":0,"index":6335},{"krate":0,"index":6338},{"krate":0,"index":4473},{"krate":0,"index":4478},{"krate":0,"index":4481},{"krate":0,"index":4486},{"krate":0,"index":4487},{"krate":0,"index":4490},{"krate":0,"index":6341},{"krate":0,"index":6346},{"krate":0,"index":6352},{"krate":0,"index":6357},{"krate":0,"index":6362},{"krate":0,"index":6368},{"krate":0,"index":6373},{"krate":0,"index":6378},{"krate":0,"index":6384},{"krate":0,"index":6389},{"krate":0,"index":6394},{"krate":0,"index":6400},{"krate":0,"index":6405},{"krate":0,"index":6410},{"krate":0,"index":6416},{"krate":0,"index":6421},{"krate":0,"index":6426},{"krate":0,"index":6432},{"krate":0,"index":6437},{"krate":0,"index":6442},{"krate":0,"index":6448},{"krate":0,"index":6453},{"krate":0,"index":6458},{"krate":0,"index":6464},{"krate":0,"index":6469},{"krate":0,"index":6471},{"krate":0,"index":6479},{"krate":0,"index":6484},{"krate":0,"index":6486},{"krate":0,"index":6494},{"krate":0,"index":6499},{"krate":0,"index":6501},{"krate":0,"index":6509},{"krate":0,"index":6514},{"krate":0,"index":6516},{"krate":0,"index":6524}],"decl_id":null,"docs":" Parallel iterator types for [ranges][std::range],\n the type for values created by `a..b` expressions","sig":null,"attributes":[{"value":"/ Parallel iterator types for [ranges][std::range],","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372102,"byte_end":372155,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/ the type for values created by `a..b` expressions","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372156,"byte_end":372209,"line_start":2,"line_end":2,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372210,"byte_end":372213,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you have","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372214,"byte_end":372292,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ need to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372293,"byte_end":372336,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372337,"byte_end":372340,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372341,"byte_end":372348,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372349,"byte_end":372375,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372376,"byte_end":372379,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ let r = (0..100u64).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372380,"byte_end":372419,"line_start":10,"line_end":10,"column_start":1,"column_end":40}},{"value":"/                    .sum();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372420,"byte_end":372450,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372451,"byte_end":372454,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ // compare result with sequential calculation","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372455,"byte_end":372504,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ assert_eq!((0..100).sum::<u64>(), r);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372505,"byte_end":372546,"line_start":14,"line_end":14,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372547,"byte_end":372554,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372555,"byte_end":372558,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [std::range]: https://doc.rust-lang.org/core/ops/struct.Range.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372559,"byte_end":372629,"line_start":17,"line_end":17,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":6332},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373434,"byte_end":373438,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"Iter","qualname":"::range::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6334}],"decl_id":null,"docs":" Parallel iterator over a range, implemented for all integer types.","sig":null,"attributes":[{"value":"/ Parallel iterator over a range, implemented for all integer types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372705,"byte_end":372775,"line_start":24,"line_end":24,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372776,"byte_end":372779,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ **Note:** The `zip` operation requires `IndexedParallelIterator`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372780,"byte_end":372848,"line_start":26,"line_end":26,"column_start":1,"column_end":69}},{"value":"/ which is not implemented for `u64`, `i64`, `u128`, or `i128`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372849,"byte_end":372914,"line_start":27,"line_end":27,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372915,"byte_end":372918,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372919,"byte_end":372926,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372927,"byte_end":372953,"line_start":30,"line_end":30,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372954,"byte_end":372957,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let p = (0..25usize).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372958,"byte_end":372998,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/                   .zip(0..25usize)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":372999,"byte_end":373037,"line_start":33,"line_end":33,"column_start":1,"column_end":39}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373038,"byte_end":373103,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373104,"byte_end":373146,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/                   .sum::<usize>();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373147,"byte_end":373185,"line_start":36,"line_end":36,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373186,"byte_end":373189,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let s = (0..25usize).zip(0..25)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373190,"byte_end":373225,"line_start":38,"line_end":38,"column_start":1,"column_end":36}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373226,"byte_end":373291,"line_start":39,"line_end":39,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373292,"byte_end":373334,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/                   .sum();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373335,"byte_end":373364,"line_start":41,"line_end":41,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373365,"byte_end":373368,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(p, s);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373369,"byte_end":373390,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373391,"byte_end":373398,"line_start":44,"line_end":44,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":4491},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range_inclusive","qualname":"::range_inclusive","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","parent":null,"children":[{"krate":0,"index":4492},{"krate":0,"index":4493},{"krate":0,"index":4494},{"krate":0,"index":6529},{"krate":0,"index":6532},{"krate":0,"index":6535},{"krate":0,"index":4497},{"krate":0,"index":4500},{"krate":0,"index":4505},{"krate":0,"index":4506},{"krate":0,"index":4507},{"krate":0,"index":6544},{"krate":0,"index":6538},{"krate":0,"index":6555},{"krate":0,"index":6549},{"krate":0,"index":6566},{"krate":0,"index":6560},{"krate":0,"index":6577},{"krate":0,"index":6571},{"krate":0,"index":6582},{"krate":0,"index":6587},{"krate":0,"index":6592},{"krate":0,"index":6597},{"krate":0,"index":6602},{"krate":0,"index":6607},{"krate":0,"index":6612},{"krate":0,"index":6617}],"decl_id":null,"docs":" Parallel iterator types for [inclusive ranges][std::range],\n the type for values created by `a..=b` expressions","sig":null,"attributes":[{"value":"/ Parallel iterator types for [inclusive ranges][std::range],","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":380838,"byte_end":380901,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/ the type for values created by `a..=b` expressions","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":380902,"byte_end":380956,"line_start":2,"line_end":2,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":380957,"byte_end":380960,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you have","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":380961,"byte_end":381039,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ need to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381040,"byte_end":381083,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381084,"byte_end":381087,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381088,"byte_end":381095,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381096,"byte_end":381122,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381123,"byte_end":381126,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ let r = (0..=100u64).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381127,"byte_end":381167,"line_start":10,"line_end":10,"column_start":1,"column_end":41}},{"value":"/                     .sum();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381168,"byte_end":381199,"line_start":11,"line_end":11,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381200,"byte_end":381203,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ // compare result with sequential calculation","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381204,"byte_end":381253,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ assert_eq!((0..=100).sum::<u64>(), r);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381254,"byte_end":381296,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381297,"byte_end":381304,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381305,"byte_end":381308,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [std::range]: https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381309,"byte_end":381388,"line_start":17,"line_end":17,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":6529},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":382194,"byte_end":382198,"line_start":45,"line_end":45,"column_start":12,"column_end":16},"name":"Iter","qualname":"::range_inclusive::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6531}],"decl_id":null,"docs":" Parallel iterator over an inclusive range, implemented for all integer types.","sig":null,"attributes":[{"value":"/ Parallel iterator over an inclusive range, implemented for all integer types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381457,"byte_end":381538,"line_start":23,"line_end":23,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381539,"byte_end":381542,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ **Note:** The `zip` operation requires `IndexedParallelIterator`","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381543,"byte_end":381611,"line_start":25,"line_end":25,"column_start":1,"column_end":69}},{"value":"/ which is only implemented for `u8`, `i8`, `u16`, and `i16`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381612,"byte_end":381675,"line_start":26,"line_end":26,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381676,"byte_end":381679,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381680,"byte_end":381687,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381688,"byte_end":381714,"line_start":29,"line_end":29,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381715,"byte_end":381718,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let p = (0..=25u16).into_par_iter()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381719,"byte_end":381758,"line_start":31,"line_end":31,"column_start":1,"column_end":40}},{"value":"/                   .zip(0..=25u16)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381759,"byte_end":381796,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381797,"byte_end":381862,"line_start":33,"line_end":33,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381863,"byte_end":381905,"line_start":34,"line_end":34,"column_start":1,"column_end":43}},{"value":"/                   .sum::<u16>();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381906,"byte_end":381942,"line_start":35,"line_end":35,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381943,"byte_end":381946,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let s = (0..=25u16).zip(0..=25u16)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381947,"byte_end":381985,"line_start":37,"line_end":37,"column_start":1,"column_end":39}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":381986,"byte_end":382051,"line_start":38,"line_end":38,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":382052,"byte_end":382094,"line_start":39,"line_end":39,"column_start":1,"column_end":43}},{"value":"/                   .sum();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":382095,"byte_end":382124,"line_start":40,"line_end":40,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":382125,"byte_end":382128,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(p, s);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":382129,"byte_end":382150,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":382151,"byte_end":382158,"line_start":43,"line_end":43,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":4508},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","parent":null,"children":[{"krate":0,"index":4509},{"krate":0,"index":4510},{"krate":0,"index":4511},{"krate":0,"index":4514},{"krate":0,"index":6622},{"krate":0,"index":6625},{"krate":0,"index":6628},{"krate":0,"index":4517},{"krate":0,"index":6638},{"krate":0,"index":6631},{"krate":0,"index":6644},{"krate":0,"index":6648},{"krate":0,"index":4523},{"krate":0,"index":4527},{"krate":0,"index":6660},{"krate":0,"index":6652},{"krate":0,"index":6667},{"krate":0,"index":6671},{"krate":0,"index":4534},{"krate":0,"index":6683},{"krate":0,"index":6675},{"krate":0,"index":4541}],"decl_id":null,"docs":" Parallel iterator types for [results][std::result]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [results][std::result]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":386768,"byte_end":386822,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":386823,"byte_end":386826,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":386827,"byte_end":386905,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":386906,"byte_end":386944,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":386945,"byte_end":386948,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::result]: https://doc.rust-lang.org/stable/std/result/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":386949,"byte_end":387012,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":6622},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":387157,"byte_end":387165,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::result::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6624}],"decl_id":null,"docs":" Parallel iterator over a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a result","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":387086,"byte_end":387121,"line_start":14,"line_end":14,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":6644},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":387607,"byte_end":387611,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"Iter","qualname":"::result::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6647}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a result","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":387517,"byte_end":387578,"line_start":36,"line_end":36,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":6667},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":388238,"byte_end":388245,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::result::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":6670}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a result","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":388151,"byte_end":388209,"line_start":66,"line_end":66,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":4552},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","parent":null,"children":[{"krate":0,"index":4553},{"krate":0,"index":4647},{"krate":0,"index":4737},{"krate":0,"index":4740},{"krate":0,"index":4743},{"krate":0,"index":4744},{"krate":0,"index":4745},{"krate":0,"index":4746},{"krate":0,"index":4749},{"krate":0,"index":4752},{"krate":0,"index":4753},{"krate":0,"index":4756},{"krate":0,"index":4757},{"krate":0,"index":4759},{"krate":0,"index":4762},{"krate":0,"index":4769},{"krate":0,"index":4772},{"krate":0,"index":4794},{"krate":0,"index":4797},{"krate":0,"index":4803},{"krate":0,"index":4809},{"krate":0,"index":4815},{"krate":0,"index":6712},{"krate":0,"index":6716},{"krate":0,"index":4821},{"krate":0,"index":4825},{"krate":0,"index":4832},{"krate":0,"index":4840},{"krate":0,"index":4844},{"krate":0,"index":6720},{"krate":0,"index":6725},{"krate":0,"index":4851},{"krate":0,"index":4855},{"krate":0,"index":4862},{"krate":0,"index":4870},{"krate":0,"index":4875},{"krate":0,"index":6729},{"krate":0,"index":6734},{"krate":0,"index":4882},{"krate":0,"index":4886},{"krate":0,"index":4893},{"krate":0,"index":4901},{"krate":0,"index":4906},{"krate":0,"index":6738},{"krate":0,"index":6742},{"krate":0,"index":4913},{"krate":0,"index":4920},{"krate":0,"index":4928},{"krate":0,"index":4932},{"krate":0,"index":6746},{"krate":0,"index":6751},{"krate":0,"index":4939},{"krate":0,"index":4946},{"krate":0,"index":4954},{"krate":0,"index":4959},{"krate":0,"index":4966},{"krate":0,"index":4972},{"krate":0,"index":4977},{"krate":0,"index":4982},{"krate":0,"index":4989},{"krate":0,"index":5000},{"krate":0,"index":5006},{"krate":0,"index":5011},{"krate":0,"index":5018}],"decl_id":null,"docs":" Parallel iterator types for [slices][std::slice]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [slices][std::slice]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390167,"byte_end":390219,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390220,"byte_end":390223,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390224,"byte_end":390302,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390303,"byte_end":390341,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390342,"byte_end":390345,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::slice]: https://doc.rust-lang.org/stable/std/slice/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390346,"byte_end":390407,"line_start":6,"line_end":6,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":4762},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390728,"byte_end":390741,"line_start":25,"line_end":25,"column_start":11,"column_end":24},"name":"ParallelSlice","qualname":"::slice::ParallelSlice","value":"ParallelSlice<T: Sync>","parent":null,"children":[{"krate":0,"index":4764},{"krate":0,"index":4765},{"krate":0,"index":4767},{"krate":0,"index":4768}],"decl_id":null,"docs":" Parallel extensions for slices.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for slices.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390682,"byte_end":390717,"line_start":24,"line_end":24,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":4764},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390860,"byte_end":390877,"line_start":28,"line_end":28,"column_start":8,"column_end":25},"name":"as_parallel_slice","qualname":"::slice::ParallelSlice::as_parallel_slice","value":"pub fn as_parallel_slice(&Self) -> &[T]","parent":{"krate":0,"index":4762},"children":[],"decl_id":null,"docs":" Returns a plain slice, which is used to implement the rest of the\n parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain slice, which is used to implement the rest of the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390757,"byte_end":390826,"line_start":26,"line_end":26,"column_start":5,"column_end":74}},{"value":"/ parallel methods.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390831,"byte_end":390852,"line_start":27,"line_end":27,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":4765},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391310,"byte_end":391319,"line_start":43,"line_end":43,"column_start":8,"column_end":17},"name":"par_split","qualname":"::slice::ParallelSlice::par_split","value":"pub fn par_split<P>(&Self, P) -> Split<, T, P> where P: Fn(&T) -> bool +\nSync + Send","parent":{"krate":0,"index":4762},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over subslices separated by elements that\n match the separator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over subslices separated by elements that","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390899,"byte_end":390972,"line_start":30,"line_end":30,"column_start":5,"column_end":78}},{"value":"/ match the separator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":390977,"byte_end":391001,"line_start":31,"line_end":31,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391006,"byte_end":391009,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391014,"byte_end":391028,"line_start":33,"line_end":33,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391033,"byte_end":391036,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391041,"byte_end":391048,"line_start":35,"line_end":35,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391053,"byte_end":391079,"line_start":36,"line_end":36,"column_start":5,"column_end":31}},{"value":"/ let smallest = [1, 2, 3, 0, 2, 4, 8, 0, 3, 6, 9]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391084,"byte_end":391136,"line_start":37,"line_end":37,"column_start":5,"column_end":57}},{"value":"/     .par_split(|i| *i == 0)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391141,"byte_end":391172,"line_start":38,"line_end":38,"column_start":5,"column_end":36}},{"value":"/     .map(|numbers| numbers.iter().min().unwrap())","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391177,"byte_end":391230,"line_start":39,"line_end":39,"column_start":5,"column_end":58}},{"value":"/     .min();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391235,"byte_end":391250,"line_start":40,"line_end":40,"column_start":5,"column_end":20}},{"value":"/ assert_eq!(Some(&1), smallest);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391255,"byte_end":391290,"line_start":41,"line_end":41,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391295,"byte_end":391302,"line_start":42,"line_end":42,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4767},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391853,"byte_end":391864,"line_start":63,"line_end":63,"column_start":8,"column_end":19},"name":"par_windows","qualname":"::slice::ParallelSlice::par_windows","value":"pub fn par_windows(&Self, usize) -> Windows<, T>","parent":{"krate":0,"index":4762},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over all contiguous windows of length\n `window_size`. The windows overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over all contiguous windows of length","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391525,"byte_end":391594,"line_start":53,"line_end":53,"column_start":5,"column_end":74}},{"value":"/ `window_size`. The windows overlap.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391599,"byte_end":391638,"line_start":54,"line_end":54,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391643,"byte_end":391646,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391651,"byte_end":391665,"line_start":56,"line_end":56,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391670,"byte_end":391673,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391678,"byte_end":391685,"line_start":58,"line_end":58,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391690,"byte_end":391716,"line_start":59,"line_end":59,"column_start":5,"column_end":31}},{"value":"/ let windows: Vec<_> = [1, 2, 3].par_windows(2).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391721,"byte_end":391782,"line_start":60,"line_end":60,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(vec![[1, 2], [2, 3]], windows);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391787,"byte_end":391833,"line_start":61,"line_end":61,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":391838,"byte_end":391845,"line_start":62,"line_end":62,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4768},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392577,"byte_end":392587,"line_start":84,"line_end":84,"column_start":8,"column_end":18},"name":"par_chunks","qualname":"::slice::ParallelSlice::par_chunks","value":"pub fn par_chunks(&Self, usize) -> Chunks<, T>","parent":{"krate":0,"index":4762},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of\n `self` at a time. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392021,"byte_end":392090,"line_start":70,"line_end":70,"column_start":5,"column_end":74}},{"value":"/ `self` at a time. The chunks do not overlap.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392095,"byte_end":392143,"line_start":71,"line_end":71,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392148,"byte_end":392151,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392156,"byte_end":392221,"line_start":73,"line_end":73,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392226,"byte_end":392297,"line_start":74,"line_end":74,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392302,"byte_end":392347,"line_start":75,"line_end":75,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392352,"byte_end":392355,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392360,"byte_end":392374,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392379,"byte_end":392382,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392387,"byte_end":392394,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392399,"byte_end":392425,"line_start":80,"line_end":80,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_chunks(2).collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392430,"byte_end":392495,"line_start":81,"line_end":81,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(chunks, vec![&[1, 2][..], &[3, 4], &[5]]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392500,"byte_end":392557,"line_start":82,"line_end":82,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392562,"byte_end":392569,"line_start":83,"line_end":83,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4772},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392976,"byte_end":392992,"line_start":101,"line_end":101,"column_start":11,"column_end":27},"name":"ParallelSliceMut","qualname":"::slice::ParallelSliceMut","value":"ParallelSliceMut<T: Send>","parent":null,"children":[{"krate":0,"index":4774},{"krate":0,"index":4775},{"krate":0,"index":4777},{"krate":0,"index":4778},{"krate":0,"index":4779},{"krate":0,"index":4782},{"krate":0,"index":4786},{"krate":0,"index":4787},{"krate":0,"index":4790}],"decl_id":null,"docs":" Parallel extensions for mutable slices.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for mutable slices.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":392922,"byte_end":392965,"line_start":100,"line_end":100,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":4774},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393119,"byte_end":393140,"line_start":104,"line_end":104,"column_start":8,"column_end":29},"name":"as_parallel_slice_mut","qualname":"::slice::ParallelSliceMut::as_parallel_slice_mut","value":"pub fn as_parallel_slice_mut(&mut Self) -> &mut [T]","parent":{"krate":0,"index":4772},"children":[],"decl_id":null,"docs":" Returns a plain mutable slice, which is used to implement the rest of\n the parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain mutable slice, which is used to implement the rest of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393008,"byte_end":393081,"line_start":102,"line_end":102,"column_start":5,"column_end":78}},{"value":"/ the parallel methods.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393086,"byte_end":393111,"line_start":103,"line_end":103,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4775},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393589,"byte_end":393602,"line_start":118,"line_end":118,"column_start":8,"column_end":21},"name":"par_split_mut","qualname":"::slice::ParallelSliceMut::par_split_mut","value":"pub fn par_split_mut<P>(&mut Self, P) -> SplitMut<, T, P> where P: Fn(&T) ->\nbool + Sync + Send","parent":{"krate":0,"index":4772},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over mutable subslices separated by\n elements that match the separator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over mutable subslices separated by","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393170,"byte_end":393237,"line_start":106,"line_end":106,"column_start":5,"column_end":72}},{"value":"/ elements that match the separator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393242,"byte_end":393280,"line_start":107,"line_end":107,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393285,"byte_end":393288,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393293,"byte_end":393307,"line_start":109,"line_end":109,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393312,"byte_end":393315,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393320,"byte_end":393327,"line_start":111,"line_end":111,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393332,"byte_end":393358,"line_start":112,"line_end":112,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 0, 2, 4, 8, 0, 3, 6, 9];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393363,"byte_end":393417,"line_start":113,"line_end":113,"column_start":5,"column_end":59}},{"value":"/ array.par_split_mut(|i| *i == 0)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393422,"byte_end":393458,"line_start":114,"line_end":114,"column_start":5,"column_end":41}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393463,"byte_end":393507,"line_start":115,"line_end":115,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [3, 2, 1, 0, 8, 4, 2, 0, 9, 6, 3]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393512,"byte_end":393569,"line_start":116,"line_end":116,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393574,"byte_end":393581,"line_start":117,"line_end":117,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4777},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394428,"byte_end":394442,"line_start":144,"line_end":144,"column_start":8,"column_end":22},"name":"par_chunks_mut","qualname":"::slice::ParallelSliceMut::par_chunks_mut","value":"pub fn par_chunks_mut(&mut Self, usize) -> ChunksMut<, T>","parent":{"krate":0,"index":4772},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of\n `self` at a time. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393822,"byte_end":393891,"line_start":128,"line_end":128,"column_start":5,"column_end":74}},{"value":"/ `self` at a time. The chunks are mutable and do not overlap.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393896,"byte_end":393960,"line_start":129,"line_end":129,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393965,"byte_end":393968,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":393973,"byte_end":394038,"line_start":131,"line_end":131,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394043,"byte_end":394114,"line_start":132,"line_end":132,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394119,"byte_end":394164,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394169,"byte_end":394172,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394177,"byte_end":394191,"line_start":135,"line_end":135,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394196,"byte_end":394199,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394204,"byte_end":394211,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394216,"byte_end":394242,"line_start":138,"line_end":138,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394247,"byte_end":394283,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/ array.par_chunks_mut(2)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394288,"byte_end":394315,"line_start":140,"line_end":140,"column_start":5,"column_end":32}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394320,"byte_end":394364,"line_start":141,"line_end":141,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [2, 1, 4, 3, 5]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394369,"byte_end":394408,"line_start":142,"line_end":142,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394413,"byte_end":394420,"line_start":143,"line_end":143,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4778},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396131,"byte_end":396139,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"par_sort","qualname":"::slice::ParallelSliceMut::par_sort","value":"pub fn par_sort(&mut Self) where T: Ord","parent":{"krate":0,"index":4772},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394674,"byte_end":394706,"line_start":152,"line_end":152,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394711,"byte_end":394714,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394719,"byte_end":394810,"line_start":154,"line_end":154,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394815,"byte_end":394818,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394823,"byte_end":394916,"line_start":156,"line_end":156,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394921,"byte_end":394974,"line_start":157,"line_end":157,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable`](#method.par_sort_unstable).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":394979,"byte_end":395036,"line_start":158,"line_end":158,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395041,"byte_end":395044,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395049,"byte_end":395077,"line_start":160,"line_end":160,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395082,"byte_end":395085,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395090,"byte_end":395153,"line_start":162,"line_end":162,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395158,"byte_end":395211,"line_start":163,"line_end":163,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395216,"byte_end":395308,"line_start":164,"line_end":164,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395313,"byte_end":395377,"line_start":165,"line_end":165,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395382,"byte_end":395385,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395390,"byte_end":395483,"line_start":167,"line_end":167,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395488,"byte_end":395538,"line_start":168,"line_end":168,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395543,"byte_end":395546,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395551,"byte_end":395645,"line_start":170,"line_end":170,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395650,"byte_end":395744,"line_start":171,"line_end":171,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395749,"byte_end":395845,"line_start":172,"line_end":172,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395850,"byte_end":395914,"line_start":173,"line_end":173,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395919,"byte_end":395922,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395927,"byte_end":395941,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395946,"byte_end":395949,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395954,"byte_end":395961,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395966,"byte_end":395992,"line_start":178,"line_end":178,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":395997,"byte_end":396000,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396005,"byte_end":396039,"line_start":180,"line_end":180,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396044,"byte_end":396047,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ v.par_sort();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396052,"byte_end":396069,"line_start":182,"line_end":182,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(v, [-5, -3, 1, 2, 4]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396074,"byte_end":396111,"line_start":183,"line_end":183,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396116,"byte_end":396123,"line_start":184,"line_end":184,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4779},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397865,"byte_end":397876,"line_start":228,"line_end":228,"column_start":8,"column_end":19},"name":"par_sort_by","qualname":"::slice::ParallelSliceMut::par_sort_by","value":"pub fn par_sort_by<F>(&mut Self, F) where F: Fn(&T, &T) -> Ordering + Sync","parent":{"krate":0,"index":4772},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a comparator function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a comparator function.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396254,"byte_end":396313,"line_start":192,"line_end":192,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396318,"byte_end":396321,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396326,"byte_end":396417,"line_start":194,"line_end":194,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396422,"byte_end":396425,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396430,"byte_end":396523,"line_start":196,"line_end":196,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396528,"byte_end":396581,"line_start":197,"line_end":197,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable_by`](#method.par_sort_unstable_by).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396586,"byte_end":396649,"line_start":198,"line_end":198,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396654,"byte_end":396657,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396662,"byte_end":396690,"line_start":200,"line_end":200,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396695,"byte_end":396698,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396703,"byte_end":396766,"line_start":202,"line_end":202,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396771,"byte_end":396824,"line_start":203,"line_end":203,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396829,"byte_end":396921,"line_start":204,"line_end":204,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396926,"byte_end":396990,"line_start":205,"line_end":205,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":396995,"byte_end":396998,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397003,"byte_end":397096,"line_start":207,"line_end":207,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397101,"byte_end":397151,"line_start":208,"line_end":208,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397156,"byte_end":397159,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397164,"byte_end":397258,"line_start":210,"line_end":210,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397263,"byte_end":397357,"line_start":211,"line_end":211,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397362,"byte_end":397458,"line_start":212,"line_end":212,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397463,"byte_end":397527,"line_start":213,"line_end":213,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397532,"byte_end":397535,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397540,"byte_end":397554,"line_start":215,"line_end":215,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397559,"byte_end":397562,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397567,"byte_end":397574,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397579,"byte_end":397605,"line_start":218,"line_end":218,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397610,"byte_end":397613,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397618,"byte_end":397650,"line_start":220,"line_end":220,"column_start":5,"column_end":37}},{"value":"/ v.par_sort_by(|a, b| a.cmp(b));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397655,"byte_end":397690,"line_start":221,"line_end":221,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [1, 2, 3, 4, 5]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397695,"byte_end":397730,"line_start":222,"line_end":222,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397735,"byte_end":397738,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397743,"byte_end":397765,"line_start":224,"line_end":224,"column_start":5,"column_end":27}},{"value":"/ v.par_sort_by(|a, b| b.cmp(a));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397770,"byte_end":397805,"line_start":225,"line_end":225,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [5, 4, 3, 2, 1]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397810,"byte_end":397845,"line_start":226,"line_end":226,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":397850,"byte_end":397857,"line_start":227,"line_end":227,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4782},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399612,"byte_end":399627,"line_start":270,"line_end":270,"column_start":8,"column_end":23},"name":"par_sort_by_key","qualname":"::slice::ParallelSliceMut::par_sort_by_key","value":"pub fn par_sort_by_key<B, F>(&mut Self, F) where B: Ord, F: Fn(&T) -> B + Sync","parent":{"krate":0,"index":4772},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398089,"byte_end":398152,"line_start":237,"line_end":237,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398157,"byte_end":398160,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398165,"byte_end":398256,"line_start":239,"line_end":239,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398261,"byte_end":398264,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398269,"byte_end":398362,"line_start":241,"line_end":241,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398367,"byte_end":398420,"line_start":242,"line_end":242,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable_by_key`](#method.par_sort_unstable_by_key).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398425,"byte_end":398496,"line_start":243,"line_end":243,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398501,"byte_end":398504,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398509,"byte_end":398537,"line_start":245,"line_end":245,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398542,"byte_end":398545,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398550,"byte_end":398613,"line_start":247,"line_end":247,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398618,"byte_end":398671,"line_start":248,"line_end":248,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398676,"byte_end":398768,"line_start":249,"line_end":249,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398773,"byte_end":398837,"line_start":250,"line_end":250,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398842,"byte_end":398845,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398850,"byte_end":398943,"line_start":252,"line_end":252,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":398948,"byte_end":398998,"line_start":253,"line_end":253,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399003,"byte_end":399006,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399011,"byte_end":399105,"line_start":255,"line_end":255,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399110,"byte_end":399204,"line_start":256,"line_end":256,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399209,"byte_end":399305,"line_start":257,"line_end":257,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399310,"byte_end":399374,"line_start":258,"line_end":258,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399379,"byte_end":399382,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399387,"byte_end":399401,"line_start":260,"line_end":260,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399406,"byte_end":399409,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399414,"byte_end":399421,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399426,"byte_end":399452,"line_start":263,"line_end":263,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399457,"byte_end":399460,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399465,"byte_end":399502,"line_start":265,"line_end":265,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399507,"byte_end":399510,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_by_key(|k| k.abs());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399515,"byte_end":399550,"line_start":267,"line_end":267,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [1, 2, -3, 4, -5]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399555,"byte_end":399592,"line_start":268,"line_end":268,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399597,"byte_end":399604,"line_start":269,"line_end":269,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4786},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401072,"byte_end":401089,"line_start":309,"line_end":309,"column_start":8,"column_end":25},"name":"par_sort_unstable","qualname":"::slice::ParallelSliceMut::par_sort_unstable","value":"pub fn par_sort_unstable(&mut Self) where T: Ord","parent":{"krate":0,"index":4772},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel, but may not preserve the order of equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel, but may not preserve the order of equal elements.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399801,"byte_end":399883,"line_start":278,"line_end":278,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399888,"byte_end":399891,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399896,"byte_end":399991,"line_start":280,"line_end":280,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":399996,"byte_end":400028,"line_start":281,"line_end":281,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400033,"byte_end":400036,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400041,"byte_end":400069,"line_start":283,"line_end":283,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400074,"byte_end":400077,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400082,"byte_end":400173,"line_start":285,"line_end":285,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400178,"byte_end":400265,"line_start":286,"line_end":286,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400270,"byte_end":400360,"line_start":287,"line_end":287,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400365,"byte_end":400399,"line_start":288,"line_end":288,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400404,"byte_end":400407,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400412,"byte_end":400504,"line_start":290,"line_end":290,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400509,"byte_end":400569,"line_start":291,"line_end":291,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400574,"byte_end":400577,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400582,"byte_end":400671,"line_start":293,"line_end":293,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400676,"byte_end":400769,"line_start":294,"line_end":294,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400774,"byte_end":400787,"line_start":295,"line_end":295,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400792,"byte_end":400795,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400800,"byte_end":400846,"line_start":297,"line_end":297,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400851,"byte_end":400854,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400859,"byte_end":400873,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400878,"byte_end":400881,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400886,"byte_end":400893,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400898,"byte_end":400924,"line_start":302,"line_end":302,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400929,"byte_end":400932,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400937,"byte_end":400971,"line_start":304,"line_end":304,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400976,"byte_end":400979,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_unstable();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":400984,"byte_end":401010,"line_start":306,"line_end":306,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(v, [-5, -3, 1, 2, 4]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401015,"byte_end":401052,"line_start":307,"line_end":307,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401057,"byte_end":401064,"line_start":308,"line_end":308,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4787},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402640,"byte_end":402660,"line_start":351,"line_end":351,"column_start":8,"column_end":28},"name":"par_sort_unstable_by","qualname":"::slice::ParallelSliceMut::par_sort_unstable_by","value":"pub fn par_sort_unstable_by<F>(&mut Self, F) where F: Fn(&T, &T) -> Ordering +\nSync","parent":{"krate":0,"index":4772},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a comparator function, but may not preserve the order of\n equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a comparator function, but may not preserve the order of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401204,"byte_end":401297,"line_start":316,"line_end":316,"column_start":5,"column_end":98}},{"value":"/ equal elements.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401302,"byte_end":401321,"line_start":317,"line_end":317,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401326,"byte_end":401329,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401334,"byte_end":401429,"line_start":319,"line_end":319,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401434,"byte_end":401466,"line_start":320,"line_end":320,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401471,"byte_end":401474,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401479,"byte_end":401507,"line_start":322,"line_end":322,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401512,"byte_end":401515,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401520,"byte_end":401611,"line_start":324,"line_end":324,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401616,"byte_end":401703,"line_start":325,"line_end":325,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401708,"byte_end":401798,"line_start":326,"line_end":326,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401803,"byte_end":401837,"line_start":327,"line_end":327,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401842,"byte_end":401845,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401850,"byte_end":401942,"line_start":329,"line_end":329,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":401947,"byte_end":402007,"line_start":330,"line_end":330,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402012,"byte_end":402015,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402020,"byte_end":402109,"line_start":332,"line_end":332,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402114,"byte_end":402207,"line_start":333,"line_end":333,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402212,"byte_end":402225,"line_start":334,"line_end":334,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402230,"byte_end":402233,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402238,"byte_end":402284,"line_start":336,"line_end":336,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402289,"byte_end":402292,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402297,"byte_end":402311,"line_start":338,"line_end":338,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402316,"byte_end":402319,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402324,"byte_end":402331,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402336,"byte_end":402362,"line_start":341,"line_end":341,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402367,"byte_end":402370,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402375,"byte_end":402407,"line_start":343,"line_end":343,"column_start":5,"column_end":37}},{"value":"/ v.par_sort_unstable_by(|a, b| a.cmp(b));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402412,"byte_end":402456,"line_start":344,"line_end":344,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [1, 2, 3, 4, 5]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402461,"byte_end":402496,"line_start":345,"line_end":345,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402501,"byte_end":402504,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402509,"byte_end":402531,"line_start":347,"line_end":347,"column_start":5,"column_end":27}},{"value":"/ v.par_sort_unstable_by(|a, b| b.cmp(a));","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402536,"byte_end":402580,"line_start":348,"line_end":348,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [5, 4, 3, 2, 1]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402585,"byte_end":402620,"line_start":349,"line_end":349,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402625,"byte_end":402632,"line_start":350,"line_end":350,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4790},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":404204,"byte_end":404228,"line_start":392,"line_end":392,"column_start":8,"column_end":32},"name":"par_sort_unstable_by_key","qualname":"::slice::ParallelSliceMut::par_sort_unstable_by_key","value":"pub fn par_sort_unstable_by_key<B, F>(&mut Self, F) where B: Ord, F: Fn(&T) ->\nB + Sync","parent":{"krate":0,"index":4772},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function, but may not preserve the order\n of equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function, but may not preserve the order","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402873,"byte_end":402967,"line_start":360,"line_end":360,"column_start":5,"column_end":99}},{"value":"/ of equal elements.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402972,"byte_end":402994,"line_start":361,"line_end":361,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":402999,"byte_end":403002,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403007,"byte_end":403102,"line_start":363,"line_end":363,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403107,"byte_end":403139,"line_start":364,"line_end":364,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403144,"byte_end":403147,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403152,"byte_end":403180,"line_start":366,"line_end":366,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403185,"byte_end":403188,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403193,"byte_end":403284,"line_start":368,"line_end":368,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403289,"byte_end":403376,"line_start":369,"line_end":369,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403381,"byte_end":403471,"line_start":370,"line_end":370,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403476,"byte_end":403510,"line_start":371,"line_end":371,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403515,"byte_end":403518,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403523,"byte_end":403615,"line_start":373,"line_end":373,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403620,"byte_end":403680,"line_start":374,"line_end":374,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403685,"byte_end":403688,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403693,"byte_end":403782,"line_start":376,"line_end":376,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403787,"byte_end":403880,"line_start":377,"line_end":377,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403885,"byte_end":403898,"line_start":378,"line_end":378,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403903,"byte_end":403906,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403911,"byte_end":403957,"line_start":380,"line_end":380,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403962,"byte_end":403965,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403970,"byte_end":403984,"line_start":382,"line_end":382,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403989,"byte_end":403992,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":403997,"byte_end":404004,"line_start":384,"line_end":384,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":404009,"byte_end":404035,"line_start":385,"line_end":385,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":404040,"byte_end":404043,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":404048,"byte_end":404085,"line_start":387,"line_end":387,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":404090,"byte_end":404093,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_unstable_by_key(|k| k.abs());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":404098,"byte_end":404142,"line_start":389,"line_end":389,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [1, 2, -3, 4, -5]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":404147,"byte_end":404184,"line_start":390,"line_end":390,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":404189,"byte_end":404196,"line_start":391,"line_end":391,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6712},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":405478,"byte_end":405482,"line_start":446,"line_end":446,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6715}],"decl_id":null,"docs":" Parallel iterator over immutable items in a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable items in a slice","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":405396,"byte_end":405449,"line_start":444,"line_end":444,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":6720},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":407008,"byte_end":407014,"line_start":511,"line_end":511,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":6723},{"krate":0,"index":6724}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":406909,"byte_end":406979,"line_start":509,"line_end":509,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":6729},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":408983,"byte_end":408990,"line_start":591,"line_end":591,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":6732},{"krate":0,"index":6733}],"decl_id":null,"docs":" Parallel iterator over immutable overlapping windows of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable overlapping windows of a slice","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":408887,"byte_end":408954,"line_start":589,"line_end":589,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":6738},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":411043,"byte_end":411050,"line_start":673,"line_end":673,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":6741}],"decl_id":null,"docs":" Parallel iterator over mutable items in a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable items in a slice","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":410963,"byte_end":411014,"line_start":671,"line_end":671,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":6746},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":412545,"byte_end":412554,"line_start":735,"line_end":735,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":6749},{"krate":0,"index":6750}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":412448,"byte_end":412516,"line_start":733,"line_end":733,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":4966},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":414429,"byte_end":414434,"line_start":808,"line_end":808,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":4970},{"krate":0,"index":4971}],"decl_id":null,"docs":" Parallel iterator over slices separated by a predicate\n","sig":null,"attributes":[{"value":"/ Parallel iterator over slices separated by a predicate","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":414359,"byte_end":414417,"line_start":807,"line_end":807,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":5000},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":416310,"byte_end":416318,"line_start":884,"line_end":884,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":5004},{"krate":0,"index":5005}],"decl_id":null,"docs":" Parallel iterator over mutable slices separated by a predicate\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable slices separated by a predicate","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":416232,"byte_end":416298,"line_start":883,"line_end":883,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":5029},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"str","qualname":"::str","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","parent":null,"children":[{"krate":0,"index":5030},{"krate":0,"index":5031},{"krate":0,"index":5032},{"krate":0,"index":5033},{"krate":0,"index":5034},{"krate":0,"index":5035},{"krate":0,"index":5036},{"krate":0,"index":5052},{"krate":0,"index":5054},{"krate":0,"index":5071},{"krate":0,"index":5074},{"krate":0,"index":5078},{"krate":0,"index":5091},{"krate":0,"index":6758},{"krate":0,"index":6761},{"krate":0,"index":6764},{"krate":0,"index":5105},{"krate":0,"index":5108},{"krate":0,"index":5113},{"krate":0,"index":6767},{"krate":0,"index":6770},{"krate":0,"index":6773},{"krate":0,"index":5119},{"krate":0,"index":5123},{"krate":0,"index":5128},{"krate":0,"index":6776},{"krate":0,"index":6779},{"krate":0,"index":6782},{"krate":0,"index":5134},{"krate":0,"index":5137},{"krate":0,"index":5142},{"krate":0,"index":6785},{"krate":0,"index":6788},{"krate":0,"index":6791},{"krate":0,"index":5148},{"krate":0,"index":5151},{"krate":0,"index":5156},{"krate":0,"index":6794},{"krate":0,"index":6799},{"krate":0,"index":6803},{"krate":0,"index":5162},{"krate":0,"index":5166},{"krate":0,"index":5172},{"krate":0,"index":6807},{"krate":0,"index":6812},{"krate":0,"index":6816},{"krate":0,"index":5182},{"krate":0,"index":5188},{"krate":0,"index":5192},{"krate":0,"index":5197},{"krate":0,"index":5203},{"krate":0,"index":6820},{"krate":0,"index":6824},{"krate":0,"index":6827},{"krate":0,"index":5212},{"krate":0,"index":5213},{"krate":0,"index":6830},{"krate":0,"index":6834},{"krate":0,"index":6837},{"krate":0,"index":5218},{"krate":0,"index":5219},{"krate":0,"index":6840},{"krate":0,"index":6845},{"krate":0,"index":6849},{"krate":0,"index":5224},{"krate":0,"index":5230},{"krate":0,"index":5236},{"krate":0,"index":6853},{"krate":0,"index":6858},{"krate":0,"index":6862},{"krate":0,"index":5244},{"krate":0,"index":5251},{"krate":0,"index":5257}],"decl_id":null,"docs":" Parallel iterator types for [strings][std::str]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [strings][std::str]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":477804,"byte_end":477855,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":477856,"byte_end":477859,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":477860,"byte_end":477938,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":477939,"byte_end":477977,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":477978,"byte_end":477981,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Note: [`ParallelString::par_split()`] and [`par_split_terminator()`]","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":477982,"byte_end":478054,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ reference a `Pattern` trait which is not visible outside this crate.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":478055,"byte_end":478127,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ This trait is intentionally kept private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":478128,"byte_end":478203,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":478204,"byte_end":478281,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":478282,"byte_end":478285,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`ParallelString::par_split()`]: trait.ParallelString.html#method.par_split","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":478286,"byte_end":478365,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ [`par_split_terminator()`]: trait.ParallelString.html#method.par_split_terminator","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":478366,"byte_end":478451,"line_start":12,"line_end":12,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":478452,"byte_end":478455,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [std::str]: https://doc.rust-lang.org/stable/std/str/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":478456,"byte_end":478513,"line_start":14,"line_end":14,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":5036},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":479741,"byte_end":479755,"line_start":59,"line_end":59,"column_start":11,"column_end":25},"name":"ParallelString","qualname":"::str::ParallelString","value":"ParallelString","parent":null,"children":[{"krate":0,"index":5037},{"krate":0,"index":5038},{"krate":0,"index":5039},{"krate":0,"index":5040},{"krate":0,"index":5041},{"krate":0,"index":5042},{"krate":0,"index":5044},{"krate":0,"index":5046},{"krate":0,"index":5047},{"krate":0,"index":5048},{"krate":0,"index":5050}],"decl_id":null,"docs":" Parallel extensions for strings.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for strings.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":479694,"byte_end":479730,"line_start":58,"line_end":58,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":5037},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":479872,"byte_end":479890,"line_start":62,"line_end":62,"column_start":8,"column_end":26},"name":"as_parallel_string","qualname":"::str::ParallelString::as_parallel_string","value":"pub fn as_parallel_string(&Self) -> &str","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Returns a plain string slice, which is used to implement the rest of\n the parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain string slice, which is used to implement the rest of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":479762,"byte_end":479834,"line_start":60,"line_end":60,"column_start":5,"column_end":77}},{"value":"/ the parallel methods.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":479839,"byte_end":479864,"line_start":61,"line_end":61,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":5038},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480175,"byte_end":480184,"line_start":73,"line_end":73,"column_start":8,"column_end":17},"name":"par_chars","qualname":"::str::ParallelString::par_chars","value":"pub fn par_chars(&Self) -> Chars","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the characters of a string.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the characters of a string.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":479912,"byte_end":479976,"line_start":64,"line_end":64,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":479981,"byte_end":479984,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":479989,"byte_end":480003,"line_start":66,"line_end":66,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480008,"byte_end":480011,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480016,"byte_end":480023,"line_start":68,"line_end":68,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480028,"byte_end":480054,"line_start":69,"line_end":69,"column_start":5,"column_end":31}},{"value":"/ let max = \"hello\".par_chars().max_by_key(|c| *c as i32);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480059,"byte_end":480119,"line_start":70,"line_end":70,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(Some('o'), max);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480124,"byte_end":480155,"line_start":71,"line_end":71,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480160,"byte_end":480167,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5039},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480593,"byte_end":480609,"line_start":88,"line_end":88,"column_start":8,"column_end":24},"name":"par_char_indices","qualname":"::str::ParallelString::par_char_indices","value":"pub fn par_char_indices(&Self) -> CharIndices","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the characters of a string, with their positions.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the characters of a string, with their positions.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480290,"byte_end":480376,"line_start":79,"line_end":79,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480381,"byte_end":480384,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480389,"byte_end":480403,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480408,"byte_end":480411,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480416,"byte_end":480423,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480428,"byte_end":480454,"line_start":84,"line_end":84,"column_start":5,"column_end":31}},{"value":"/ let min = \"hello\".par_char_indices().min_by_key(|&(_i, c)| c as i32);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480459,"byte_end":480532,"line_start":85,"line_end":85,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(Some((1, 'e')), min);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480537,"byte_end":480573,"line_start":86,"line_end":86,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480578,"byte_end":480585,"line_start":87,"line_end":87,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5040},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481269,"byte_end":481278,"line_start":108,"line_end":108,"column_start":8,"column_end":17},"name":"par_bytes","qualname":"::str::ParallelString::par_bytes","value":"pub fn par_bytes(&Self) -> Bytes","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the bytes of a string.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the bytes of a string.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480727,"byte_end":480786,"line_start":94,"line_end":94,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480791,"byte_end":480794,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Note that multi-byte sequences (for code points greater than `U+007F`)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480799,"byte_end":480873,"line_start":96,"line_end":96,"column_start":5,"column_end":79}},{"value":"/ are produced as separate items, but will not be split across threads.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480878,"byte_end":480951,"line_start":97,"line_end":97,"column_start":5,"column_end":78}},{"value":"/ If you would prefer an indexed iterator without that guarantee, consider","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":480956,"byte_end":481032,"line_start":98,"line_end":98,"column_start":5,"column_end":81}},{"value":"/ `string.as_bytes().par_iter().cloned()` instead.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481037,"byte_end":481089,"line_start":99,"line_end":99,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481094,"byte_end":481097,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481102,"byte_end":481116,"line_start":101,"line_end":101,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481121,"byte_end":481124,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481129,"byte_end":481136,"line_start":103,"line_end":103,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481141,"byte_end":481167,"line_start":104,"line_end":104,"column_start":5,"column_end":31}},{"value":"/ let max = \"hello\".par_bytes().max();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481172,"byte_end":481212,"line_start":105,"line_end":105,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(b'o'), max);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481217,"byte_end":481249,"line_start":106,"line_end":106,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481254,"byte_end":481261,"line_start":107,"line_end":107,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5041},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481999,"byte_end":482015,"line_start":132,"line_end":132,"column_start":8,"column_end":24},"name":"par_encode_utf16","qualname":"::str::ParallelString::par_encode_utf16","value":"pub fn par_encode_utf16(&Self) -> EncodeUtf16","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over a string encoded as UTF-16.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over a string encoded as UTF-16.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481384,"byte_end":481448,"line_start":114,"line_end":114,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481453,"byte_end":481456,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Note that surrogate pairs (for code points greater than `U+FFFF`) are","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481461,"byte_end":481534,"line_start":116,"line_end":116,"column_start":5,"column_end":78}},{"value":"/ produced as separate items, but will not be split across threads.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481539,"byte_end":481608,"line_start":117,"line_end":117,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481613,"byte_end":481616,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481621,"byte_end":481635,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481640,"byte_end":481643,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481648,"byte_end":481655,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481660,"byte_end":481686,"line_start":122,"line_end":122,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481691,"byte_end":481694,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ let max = \"hello\".par_encode_utf16().max();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481699,"byte_end":481746,"line_start":124,"line_end":124,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(Some(b'o' as u16), max);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481751,"byte_end":481790,"line_start":125,"line_end":125,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481795,"byte_end":481798,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let text = \"Zażółć gęślą jaźń\";","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481803,"byte_end":481847,"line_start":127,"line_end":127,"column_start":5,"column_end":40}},{"value":"/ let utf8_len = text.len();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481852,"byte_end":481882,"line_start":128,"line_end":128,"column_start":5,"column_end":35}},{"value":"/ let utf16_len = text.par_encode_utf16().count();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481887,"byte_end":481939,"line_start":129,"line_end":129,"column_start":5,"column_end":57}},{"value":"/ assert!(utf16_len <= utf8_len);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481944,"byte_end":481979,"line_start":130,"line_end":130,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":481984,"byte_end":481991,"line_start":131,"line_end":131,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5042},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482703,"byte_end":482712,"line_start":154,"line_end":154,"column_start":8,"column_end":17},"name":"par_split","qualname":"::str::ParallelString::par_split","value":"pub fn par_split<P: Pattern>(&Self, P) -> Split<, P>","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings separated by a\n given character or predicate, similar to `str::split`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings separated by a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482133,"byte_end":482195,"line_start":138,"line_end":138,"column_start":5,"column_end":67}},{"value":"/ given character or predicate, similar to `str::split`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482200,"byte_end":482258,"line_start":139,"line_end":139,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482263,"byte_end":482266,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482271,"byte_end":482342,"line_start":141,"line_end":141,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482347,"byte_end":482424,"line_start":142,"line_end":142,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482429,"byte_end":482432,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482437,"byte_end":482451,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482456,"byte_end":482459,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482464,"byte_end":482471,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482476,"byte_end":482502,"line_start":147,"line_end":147,"column_start":5,"column_end":31}},{"value":"/ let total = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482507,"byte_end":482549,"line_start":148,"line_end":148,"column_start":5,"column_end":47}},{"value":"/    .par_split(',')","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482554,"byte_end":482576,"line_start":149,"line_end":149,"column_start":5,"column_end":27}},{"value":"/    .filter_map(|s| s.trim().parse::<i32>().ok())","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482581,"byte_end":482633,"line_start":150,"line_end":150,"column_start":5,"column_end":57}},{"value":"/    .sum();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482638,"byte_end":482652,"line_start":151,"line_end":151,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(10, total);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482657,"byte_end":482683,"line_start":152,"line_end":152,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482688,"byte_end":482695,"line_start":153,"line_end":153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5044},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483541,"byte_end":483561,"line_start":175,"line_end":175,"column_start":8,"column_end":28},"name":"par_split_terminator","qualname":"::str::ParallelString::par_split_terminator","value":"pub fn par_split_terminator<P: Pattern>(&Self, P) -> SplitTerminator<, P>","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings terminated by a\n given character or predicate, similar to `str::split_terminator`.\n It's equivalent to `par_split`, except it doesn't produce an empty\n substring after a trailing terminator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings terminated by a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482832,"byte_end":482895,"line_start":158,"line_end":158,"column_start":5,"column_end":68}},{"value":"/ given character or predicate, similar to `str::split_terminator`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482900,"byte_end":482969,"line_start":159,"line_end":159,"column_start":5,"column_end":74}},{"value":"/ It's equivalent to `par_split`, except it doesn't produce an empty","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":482974,"byte_end":483044,"line_start":160,"line_end":160,"column_start":5,"column_end":75}},{"value":"/ substring after a trailing terminator.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483049,"byte_end":483091,"line_start":161,"line_end":161,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483096,"byte_end":483099,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483104,"byte_end":483175,"line_start":163,"line_end":163,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483180,"byte_end":483257,"line_start":164,"line_end":164,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483262,"byte_end":483265,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483270,"byte_end":483284,"line_start":166,"line_end":166,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483289,"byte_end":483292,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483297,"byte_end":483304,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483309,"byte_end":483335,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/ let parts: Vec<_> = \"((1 + 3) * 2)\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483340,"byte_end":483379,"line_start":170,"line_end":170,"column_start":5,"column_end":44}},{"value":"/     .par_split_terminator(|c| c == '(' || c == ')')","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483384,"byte_end":483439,"line_start":171,"line_end":171,"column_start":5,"column_end":60}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483444,"byte_end":483463,"line_start":172,"line_end":172,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(vec![\"\", \"\", \"1 + 3\", \" * 2\"], parts);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483468,"byte_end":483521,"line_start":173,"line_end":173,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483526,"byte_end":483533,"line_start":174,"line_end":174,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5046},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484232,"byte_end":484241,"line_start":194,"line_end":194,"column_start":8,"column_end":17},"name":"par_lines","qualname":"::str::ParallelString::par_lines","value":"pub fn par_lines(&Self) -> Lines","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the lines of a string, ending with an\n optional carriage return and with a newline (`\\r\\n` or just `\\n`).\n The final line ending is optional, and line endings are not included in\n the output strings.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the lines of a string, ending with an","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483703,"byte_end":483777,"line_start":179,"line_end":179,"column_start":5,"column_end":79}},{"value":"/ optional carriage return and with a newline (`\\r\\n` or just `\\n`).","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483782,"byte_end":483852,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ The final line ending is optional, and line endings are not included in","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483857,"byte_end":483932,"line_start":181,"line_end":181,"column_start":5,"column_end":80}},{"value":"/ the output strings.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483937,"byte_end":483960,"line_start":182,"line_end":182,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483965,"byte_end":483968,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483973,"byte_end":483987,"line_start":184,"line_end":184,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":483992,"byte_end":483995,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484000,"byte_end":484007,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484012,"byte_end":484038,"line_start":187,"line_end":187,"column_start":5,"column_end":31}},{"value":"/ let lengths: Vec<_> = \"hello world\\nfizbuzz\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484043,"byte_end":484091,"line_start":188,"line_end":188,"column_start":5,"column_end":53}},{"value":"/     .par_lines()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484096,"byte_end":484116,"line_start":189,"line_end":189,"column_start":5,"column_end":25}},{"value":"/     .map(|l| l.len())","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484121,"byte_end":484146,"line_start":190,"line_end":190,"column_start":5,"column_end":30}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484151,"byte_end":484170,"line_start":191,"line_end":191,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(vec![11, 7], lengths);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484175,"byte_end":484212,"line_start":192,"line_end":192,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484217,"byte_end":484224,"line_start":193,"line_end":193,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5047},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484866,"byte_end":484886,"line_start":213,"line_end":213,"column_start":8,"column_end":28},"name":"par_split_whitespace","qualname":"::str::ParallelString::par_split_whitespace","value":"pub fn par_split_whitespace(&Self) -> SplitWhitespace","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the sub-slices of a string that are\n separated by any amount of whitespace.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the sub-slices of a string that are","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484316,"byte_end":484388,"line_start":198,"line_end":198,"column_start":5,"column_end":77}},{"value":"/ separated by any amount of whitespace.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484393,"byte_end":484435,"line_start":199,"line_end":199,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484440,"byte_end":484443,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ As with `str::split_whitespace`, 'whitespace' is defined according to","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484448,"byte_end":484521,"line_start":201,"line_end":201,"column_start":5,"column_end":78}},{"value":"/ the terms of the Unicode Derived Core Property `White_Space`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484526,"byte_end":484591,"line_start":202,"line_end":202,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484596,"byte_end":484599,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484604,"byte_end":484618,"line_start":204,"line_end":204,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484623,"byte_end":484626,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484631,"byte_end":484638,"line_start":206,"line_end":206,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484643,"byte_end":484669,"line_start":207,"line_end":207,"column_start":5,"column_end":31}},{"value":"/ let longest = \"which is the longest word?\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484674,"byte_end":484720,"line_start":208,"line_end":208,"column_start":5,"column_end":51}},{"value":"/     .par_split_whitespace()","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484725,"byte_end":484756,"line_start":209,"line_end":209,"column_start":5,"column_end":36}},{"value":"/     .max_by_key(|word| word.len());","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484761,"byte_end":484800,"line_start":210,"line_end":210,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(Some(\"longest\"), longest);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484805,"byte_end":484846,"line_start":211,"line_end":211,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484851,"byte_end":484858,"line_start":212,"line_end":212,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5048},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485563,"byte_end":485574,"line_start":233,"line_end":233,"column_start":8,"column_end":19},"name":"par_matches","qualname":"::str::ParallelString::par_matches","value":"pub fn par_matches<P: Pattern>(&Self, P) -> Matches<, P>","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings that match a\n given character or predicate, similar to `str::matches`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings that match a","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":484981,"byte_end":485041,"line_start":217,"line_end":217,"column_start":5,"column_end":65}},{"value":"/ given character or predicate, similar to `str::matches`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485046,"byte_end":485106,"line_start":218,"line_end":218,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485111,"byte_end":485114,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485119,"byte_end":485190,"line_start":220,"line_end":220,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485195,"byte_end":485272,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485277,"byte_end":485280,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485285,"byte_end":485299,"line_start":223,"line_end":223,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485304,"byte_end":485307,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485312,"byte_end":485319,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485324,"byte_end":485350,"line_start":226,"line_end":226,"column_start":5,"column_end":31}},{"value":"/ let total = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485355,"byte_end":485397,"line_start":227,"line_end":227,"column_start":5,"column_end":47}},{"value":"/    .par_matches(char::is_numeric)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485402,"byte_end":485439,"line_start":228,"line_end":228,"column_start":5,"column_end":42}},{"value":"/    .map(|s| s.parse::<i32>().expect(\"digit\"))","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485444,"byte_end":485493,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/    .sum();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485498,"byte_end":485512,"line_start":230,"line_end":230,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(10, total);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485517,"byte_end":485543,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485548,"byte_end":485555,"line_start":232,"line_end":232,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5050},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":486352,"byte_end":486369,"line_start":255,"line_end":255,"column_start":8,"column_end":25},"name":"par_match_indices","qualname":"::str::ParallelString::par_match_indices","value":"pub fn par_match_indices<P: Pattern>(&Self, P) -> MatchIndices<, P>","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings that match a given character\n or predicate, with their positions, similar to `str::match_indices`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings that match a given character","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485732,"byte_end":485808,"line_start":240,"line_end":240,"column_start":5,"column_end":81}},{"value":"/ or predicate, with their positions, similar to `str::match_indices`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485813,"byte_end":485885,"line_start":241,"line_end":241,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485890,"byte_end":485893,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485898,"byte_end":485969,"line_start":243,"line_end":243,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":485974,"byte_end":486051,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":486056,"byte_end":486059,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":486064,"byte_end":486078,"line_start":246,"line_end":246,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":486083,"byte_end":486086,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":486091,"byte_end":486098,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":486103,"byte_end":486129,"line_start":249,"line_end":249,"column_start":5,"column_end":31}},{"value":"/ let digits: Vec<_> = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":486134,"byte_end":486185,"line_start":250,"line_end":250,"column_start":5,"column_end":56}},{"value":"/    .par_match_indices(char::is_numeric)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":486190,"byte_end":486233,"line_start":251,"line_end":251,"column_start":5,"column_end":48}},{"value":"/    .collect();","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":486238,"byte_end":486256,"line_start":252,"line_end":252,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(digits, vec![(0, \"1\"), (3, \"2\"), (14, \"3\"), (17, \"4\")]);","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":486261,"byte_end":486332,"line_start":253,"line_end":253,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":486337,"byte_end":486344,"line_start":254,"line_end":254,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":5058},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487259,"byte_end":487266,"line_start":283,"line_end":283,"column_start":15,"column_end":22},"name":"Pattern","qualname":"::str::private::Pattern","value":"Pattern: Sized + Sync + Send","parent":null,"children":[{"krate":0,"index":6755},{"krate":0,"index":5059},{"krate":0,"index":5060},{"krate":0,"index":5061},{"krate":0,"index":5062},{"krate":0,"index":5065},{"krate":0,"index":5068}],"decl_id":null,"docs":" Pattern-matching trait for `ParallelString`, somewhat like a mix of\n `std::str::pattern::{Pattern, Searcher}`.","sig":null,"attributes":[{"value":"/ Pattern-matching trait for `ParallelString`, somewhat like a mix of","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487046,"byte_end":487117,"line_start":279,"line_end":279,"column_start":5,"column_end":76}},{"value":"/ `std::str::pattern::{Pattern, Searcher}`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487122,"byte_end":487167,"line_start":280,"line_end":280,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487172,"byte_end":487175,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Implementing this trait is not permitted outside of `rayon`.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487180,"byte_end":487244,"line_start":282,"line_end":282,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":5059},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487326,"byte_end":487333,"line_start":285,"line_end":285,"column_start":12,"column_end":19},"name":"find_in","qualname":"::str::private::Pattern::find_in","value":"pub fn find_in(&Self, &str) -> Option<usize>","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5060},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487386,"byte_end":487394,"line_start":286,"line_end":286,"column_start":12,"column_end":20},"name":"rfind_in","qualname":"::str::private::Pattern::rfind_in","value":"pub fn rfind_in(&Self, &str) -> Option<usize>","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5061},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487447,"byte_end":487459,"line_start":287,"line_end":287,"column_start":12,"column_end":24},"name":"is_suffix_of","qualname":"::str::private::Pattern::is_suffix_of","value":"pub fn is_suffix_of(&Self, &str) -> bool","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5062},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487503,"byte_end":487514,"line_start":288,"line_end":288,"column_start":12,"column_end":23},"name":"fold_splits","qualname":"::str::private::Pattern::fold_splits","value":"pub fn fold_splits<'ch, F>(&Self, &'ch str, F, bool) -> F where\nF: Folder<&'ch str>","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5065},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487641,"byte_end":487653,"line_start":291,"line_end":291,"column_start":12,"column_end":24},"name":"fold_matches","qualname":"::str::private::Pattern::fold_matches","value":"pub fn fold_matches<'ch, F>(&Self, &'ch str, F) -> F where F: Folder<&'ch str>","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5068},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487763,"byte_end":487781,"line_start":294,"line_end":294,"column_start":12,"column_end":30},"name":"fold_match_indices","qualname":"::str::private::Pattern::fold_match_indices","value":"pub fn fold_match_indices<'ch, F>(&Self, &'ch str, F, usize) -> F where\nF: Folder<(usize, &'ch str)>","parent":{"krate":0,"index":5058},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6758},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":490252,"byte_end":490257,"line_start":395,"line_end":395,"column_start":12,"column_end":17},"name":"Chars","qualname":"::str::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":6760}],"decl_id":null,"docs":" Parallel iterator over the characters of a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the characters of a string","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":490163,"byte_end":490216,"line_start":393,"line_end":393,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":6767},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":491299,"byte_end":491310,"line_start":439,"line_end":439,"column_start":12,"column_end":23},"name":"CharIndices","qualname":"::str::CharIndices","value":"CharIndices {  }","parent":null,"children":[{"krate":0,"index":6769}],"decl_id":null,"docs":" Parallel iterator over the characters of a string, with their positions\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the characters of a string, with their positions","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":491188,"byte_end":491263,"line_start":437,"line_end":437,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":6776},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":492682,"byte_end":492687,"line_start":495,"line_end":495,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::str::Bytes","value":"Bytes {  }","parent":null,"children":[{"krate":0,"index":6778}],"decl_id":null,"docs":" Parallel iterator over the bytes of a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the bytes of a string","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":492598,"byte_end":492646,"line_start":493,"line_end":493,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":6785},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":493703,"byte_end":493714,"line_start":539,"line_end":539,"column_start":12,"column_end":23},"name":"EncodeUtf16","qualname":"::str::EncodeUtf16","value":"EncodeUtf16 {  }","parent":null,"children":[{"krate":0,"index":6787}],"decl_id":null,"docs":" Parallel iterator over a string encoded as UTF-16\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a string encoded as UTF-16","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":493614,"byte_end":493667,"line_start":537,"line_end":537,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":6794},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":494782,"byte_end":494787,"line_start":583,"line_end":583,"column_start":12,"column_end":17},"name":"Split","qualname":"::str::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":6797},{"krate":0,"index":6798}],"decl_id":null,"docs":" Parallel iterator over substrings separated by a pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by a pattern","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":494686,"byte_end":494746,"line_start":581,"line_end":581,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":6807},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":496456,"byte_end":496471,"line_start":644,"line_end":644,"column_start":12,"column_end":27},"name":"SplitTerminator","qualname":"::str::SplitTerminator","value":"SplitTerminator {  }","parent":null,"children":[{"krate":0,"index":6810},{"krate":0,"index":6811}],"decl_id":null,"docs":" Parallel iterator over substrings separated by a terminator pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by a terminator pattern","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":496349,"byte_end":496420,"line_start":642,"line_end":642,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":6820},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":498336,"byte_end":498341,"line_start":710,"line_end":710,"column_start":12,"column_end":17},"name":"Lines","qualname":"::str::Lines","value":"","parent":null,"children":[],"decl_id":null,"docs":" Parallel iterator over lines in a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over lines in a string","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":498256,"byte_end":498300,"line_start":708,"line_end":708,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":6830},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":499012,"byte_end":499027,"line_start":739,"line_end":739,"column_start":12,"column_end":27},"name":"SplitWhitespace","qualname":"::str::SplitWhitespace","value":"","parent":null,"children":[],"decl_id":null,"docs":" Parallel iterator over substrings separated by whitespace\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by whitespace","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":498915,"byte_end":498976,"line_start":737,"line_end":737,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":6840},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":499616,"byte_end":499623,"line_start":764,"line_end":764,"column_start":12,"column_end":19},"name":"Matches","qualname":"::str::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":6843},{"krate":0,"index":6844}],"decl_id":null,"docs":" Parallel iterator over substrings that match a pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings that match a pattern","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":499522,"byte_end":499580,"line_start":762,"line_end":762,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":6853},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":501031,"byte_end":501043,"line_start":820,"line_end":820,"column_start":12,"column_end":24},"name":"MatchIndices","qualname":"::str::MatchIndices","value":"MatchIndices {  }","parent":null,"children":[{"krate":0,"index":6856},{"krate":0,"index":6857}],"decl_id":null,"docs":" Parallel iterator over substrings that match a pattern, with their positions\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings that match a pattern, with their positions","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":500915,"byte_end":500995,"line_start":818,"line_end":818,"column_start":1,"column_end":81}}]},{"kind":"Mod","id":{"krate":0,"index":5265},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","parent":null,"children":[{"krate":0,"index":5266},{"krate":0,"index":5267},{"krate":0,"index":5268},{"krate":0,"index":6866},{"krate":0,"index":6869},{"krate":0,"index":6872},{"krate":0,"index":5271},{"krate":0,"index":5276},{"krate":0,"index":5282},{"krate":0,"index":5289},{"krate":0,"index":5293},{"krate":0,"index":5300},{"krate":0,"index":5304},{"krate":0,"index":5308},{"krate":0,"index":5314},{"krate":0,"index":5318},{"krate":0,"index":5322}],"decl_id":null,"docs":" Parallel iterator types for [vectors][std::vec] (`Vec<T>`)","sig":null,"attributes":[{"value":"/ Parallel iterator types for [vectors][std::vec] (`Vec<T>`)","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":502428,"byte_end":502490,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":502491,"byte_end":502494,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":502495,"byte_end":502573,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":502574,"byte_end":502612,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":502613,"byte_end":502616,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::vec]: https://doc.rust-lang.org/stable/std/vec/","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":502617,"byte_end":502674,"line_start":6,"line_end":6,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":6866},"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":502807,"byte_end":502815,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6868}],"decl_id":null,"docs":" Parallel iterator that moves out of a vector.\n","sig":null,"attributes":[{"value":"/ Parallel iterator that moves out of a vector.","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":502722,"byte_end":502771,"line_start":12,"line_end":12,"column_start":1,"column_end":50}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\split_producer.rs","byte_start":8772,"byte_end":8785,"line_start":29,"line_end":29,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\split_producer.rs","byte_start":10253,"byte_end":10266,"line_start":77,"line_end":77,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","byte_start":13379,"byte_end":13389,"line_start":18,"line_end":18,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","byte_start":13851,"byte_end":13855,"line_start":40,"line_end":40,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","byte_start":15044,"byte_end":15048,"line_start":34,"line_end":34,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_set.rs","byte_start":16553,"byte_end":16557,"line_start":34,"line_end":34,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","byte_start":17810,"byte_end":17814,"line_start":35,"line_end":35,"column_start":50,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_set.rs","byte_start":19454,"byte_end":19458,"line_start":35,"line_end":35,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","byte_start":20548,"byte_end":20552,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","byte_start":21943,"byte_end":21947,"line_start":35,"line_end":35,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118802,"byte_end":118803,"line_start":51,"line_end":51,"column_start":45,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":119313,"byte_end":119323,"line_start":71,"line_end":71,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":120326,"byte_end":120346,"line_start":107,"line_end":107,"column_start":41,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":120638,"byte_end":120658,"line_start":118,"line_end":118,"column_start":60,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":124565,"byte_end":124570,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":124798,"byte_end":124803,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":125906,"byte_end":125911,"line_start":67,"line_end":67,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":324},{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":126846,"byte_end":126855,"line_start":103,"line_end":103,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":127533,"byte_end":127542,"line_start":128,"line_end":128,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":128211,"byte_end":128224,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":128407,"byte_end":128420,"line_start":168,"line_end":168,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":130032,"byte_end":130040,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":130254,"byte_end":130262,"line_start":237,"line_end":237,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":130558,"byte_end":130566,"line_start":253,"line_end":253,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":130687,"byte_end":130695,"line_start":260,"line_end":260,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find.rs","byte_start":131319,"byte_end":131331,"line_start":20,"line_end":20,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find.rs","byte_start":131485,"byte_end":131497,"line_start":26,"line_end":26,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find.rs","byte_start":132082,"byte_end":132094,"line_start":52,"line_end":52,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find.rs","byte_start":132458,"byte_end":132468,"line_start":72,"line_end":72,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find.rs","byte_start":133495,"byte_end":133506,"line_start":116,"line_end":116,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find_first_last\\mod.rs","byte_start":136032,"byte_end":136044,"line_start":69,"line_end":69,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find_first_last\\mod.rs","byte_start":136594,"byte_end":136606,"line_start":88,"line_end":88,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find_first_last\\mod.rs","byte_start":137672,"byte_end":137684,"line_start":129,"line_end":129,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find_first_last\\mod.rs","byte_start":139246,"byte_end":139256,"line_start":174,"line_end":174,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find_first_last\\mod.rs","byte_start":140964,"byte_end":140975,"line_start":231,"line_end":231,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":141798,"byte_end":141804,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":142003,"byte_end":142009,"line_start":33,"line_end":33,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":142342,"byte_end":142348,"line_start":51,"line_end":51,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":553},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":143046,"byte_end":143054,"line_start":83,"line_end":83,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":143627,"byte_end":143640,"line_start":112,"line_end":112,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":144759,"byte_end":144767,"line_start":159,"line_end":159,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":145445,"byte_end":145453,"line_start":185,"line_end":185,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":145614,"byte_end":145622,"line_start":195,"line_end":195,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\collect\\consumer.rs","byte_start":152343,"byte_end":152358,"line_start":30,"line_end":30,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\collect\\consumer.rs","byte_start":152651,"byte_end":152666,"line_start":38,"line_end":38,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\collect\\consumer.rs","byte_start":153693,"byte_end":153706,"line_start":72,"line_end":72,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\collect\\consumer.rs","byte_start":154717,"byte_end":154732,"line_start":106,"line_end":106,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\collect\\mod.rs","byte_start":148595,"byte_end":148602,"line_start":76,"line_end":76,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\collect\\mod.rs","byte_start":150268,"byte_end":150271,"line_start":121,"line_end":121,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":163209,"byte_end":163218,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":163411,"byte_end":163420,"line_start":28,"line_end":28,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":163764,"byte_end":163773,"line_start":46,"line_end":46,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":164279,"byte_end":164287,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":164871,"byte_end":164888,"line_start":92,"line_end":92,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":166694,"byte_end":166700,"line_start":18,"line_end":18,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":166860,"byte_end":166866,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":167077,"byte_end":167083,"line_start":34,"line_end":34,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":167631,"byte_end":167645,"line_start":58,"line_end":58,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":167796,"byte_end":167810,"line_start":64,"line_end":64,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":168554,"byte_end":168568,"line_start":94,"line_end":94,"column_start":48,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":168955,"byte_end":168967,"line_start":113,"line_end":113,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":170243,"byte_end":170252,"line_start":18,"line_end":18,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":170459,"byte_end":170468,"line_start":26,"line_end":26,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":170657,"byte_end":170666,"line_start":33,"line_end":33,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":171233,"byte_end":171250,"line_start":58,"line_end":58,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":171403,"byte_end":171420,"line_start":64,"line_end":64,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":172206,"byte_end":172223,"line_start":95,"line_end":95,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":172628,"byte_end":172643,"line_start":114,"line_end":114,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":173945,"byte_end":173952,"line_start":18,"line_end":18,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":174131,"byte_end":174138,"line_start":24,"line_end":24,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":174318,"byte_end":174325,"line_start":31,"line_end":31,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":927},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":174940,"byte_end":174955,"line_start":59,"line_end":59,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":175100,"byte_end":175115,"line_start":65,"line_end":65,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":175907,"byte_end":175922,"line_start":97,"line_end":97,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":959},{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":176366,"byte_end":176379,"line_start":118,"line_end":118,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flatten.rs","byte_start":177951,"byte_end":177958,"line_start":16,"line_end":16,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flatten.rs","byte_start":178192,"byte_end":178199,"line_start":27,"line_end":27,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":178635,"byte_end":178639,"line_start":6,"line_end":6,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":179436,"byte_end":179440,"line_start":35,"line_end":35,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":179630,"byte_end":179634,"line_start":41,"line_end":41,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1026},{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":180251,"byte_end":180263,"line_start":69,"line_end":69,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":181119,"byte_end":181131,"line_start":105,"line_end":105,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":181604,"byte_end":181614,"line_start":130,"line_end":130,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1083},{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":182774,"byte_end":182782,"line_start":182,"line_end":182,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":183571,"byte_end":183579,"line_start":210,"line_end":210,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":183833,"byte_end":183841,"line_start":219,"line_end":219,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1099},{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":184413,"byte_end":184429,"line_start":246,"line_end":246,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":185347,"byte_end":185363,"line_start":285,"line_end":285,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1128},{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\for_each.rs","byte_start":186096,"byte_end":186111,"line_start":19,"line_end":19,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\for_each.rs","byte_start":186507,"byte_end":186522,"line_start":40,"line_end":40,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1162},{"krate":0,"index":1163}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\for_each.rs","byte_start":186946,"byte_end":186961,"line_start":66,"line_end":66,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1168},{"krate":0,"index":1169}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":187844,"byte_end":187847,"line_start":22,"line_end":22,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1225}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":188116,"byte_end":188124,"line_start":35,"line_end":35,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":188480,"byte_end":188490,"line_start":49,"line_end":49,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1233}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":188799,"byte_end":188809,"line_start":63,"line_end":63,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":189272,"byte_end":189279,"line_start":79,"line_end":79,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1243}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":189813,"byte_end":189821,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1248}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":190120,"byte_end":190127,"line_start":111,"line_end":111,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":190449,"byte_end":190457,"line_start":125,"line_end":125,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":190735,"byte_end":190741,"line_start":138,"line_end":138,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1260}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":191002,"byte_end":191008,"line_start":148,"line_end":148,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":191275,"byte_end":191281,"line_start":158,"line_end":158,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":191544,"byte_end":191550,"line_start":168,"line_end":168,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1271}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":191820,"byte_end":191826,"line_start":178,"line_end":178,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1275}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":192269,"byte_end":192272,"line_start":192,"line_end":192,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":204399,"byte_end":204407,"line_start":263,"line_end":263,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1342},{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":205526,"byte_end":205540,"line_start":302,"line_end":302,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1345},{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207898,"byte_end":207906,"line_start":364,"line_end":364,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":212169,"byte_end":212176,"line_start":8,"line_end":8,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":213078,"byte_end":213085,"line_start":39,"line_end":39,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1410}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":213281,"byte_end":213288,"line_start":45,"line_end":45,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1417}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":213992,"byte_end":214007,"line_start":75,"line_end":75,"column_start":42,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":214898,"byte_end":214913,"line_start":111,"line_end":111,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1449},{"krate":0,"index":1450}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":215435,"byte_end":215448,"line_start":136,"line_end":136,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":216176,"byte_end":216187,"line_start":167,"line_end":167,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1473}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":217028,"byte_end":217039,"line_start":196,"line_end":196,"column_start":56,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1478}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":217320,"byte_end":217331,"line_start":208,"line_end":208,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1483},{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":217945,"byte_end":217964,"line_start":236,"line_end":236,"column_start":38,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":218927,"byte_end":218946,"line_start":276,"line_end":276,"column_start":47,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1512},{"krate":0,"index":1513}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\reduce.rs","byte_start":219843,"byte_end":219857,"line_start":23,"line_end":23,"column_start":26,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\reduce.rs","byte_start":219899,"byte_end":219913,"line_start":25,"line_end":25,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1545}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\reduce.rs","byte_start":220015,"byte_end":220029,"line_start":31,"line_end":31,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1551},{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555},{"krate":0,"index":1556}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\reduce.rs","byte_start":220556,"byte_end":220570,"line_start":57,"line_end":57,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1562},{"krate":0,"index":1563}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\reduce.rs","byte_start":220819,"byte_end":220833,"line_start":72,"line_end":72,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1569}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\reduce.rs","byte_start":221078,"byte_end":221090,"line_start":86,"line_end":86,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1585}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":222205,"byte_end":222209,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1597}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":222441,"byte_end":222445,"line_start":29,"line_end":29,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1603}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":222780,"byte_end":222784,"line_start":47,"line_end":47,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1606},{"krate":0,"index":1607},{"krate":0,"index":1609}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":223365,"byte_end":223373,"line_start":73,"line_end":73,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1618},{"krate":0,"index":1619}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce.rs","byte_start":224519,"byte_end":224536,"line_start":29,"line_end":29,"column_start":26,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce.rs","byte_start":224578,"byte_end":224595,"line_start":31,"line_end":31,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1656}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce.rs","byte_start":224697,"byte_end":224714,"line_start":37,"line_end":37,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1666},{"krate":0,"index":1667}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce.rs","byte_start":225328,"byte_end":225345,"line_start":64,"line_end":64,"column_start":45,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1673},{"krate":0,"index":1674}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce.rs","byte_start":225612,"byte_end":225629,"line_start":79,"line_end":79,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1680}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce.rs","byte_start":226109,"byte_end":226124,"line_start":98,"line_end":98,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce_with.rs","byte_start":227468,"byte_end":227489,"line_start":26,"line_end":26,"column_start":22,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce_with.rs","byte_start":227523,"byte_end":227544,"line_start":28,"line_end":28,"column_start":23,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1726}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce_with.rs","byte_start":227638,"byte_end":227659,"line_start":34,"line_end":34,"column_start":32,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1736}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce_with.rs","byte_start":228238,"byte_end":228259,"line_start":60,"line_end":60,"column_start":41,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1741},{"krate":0,"index":1742}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce_with.rs","byte_start":228496,"byte_end":228517,"line_start":74,"line_end":74,"column_start":39,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1747}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce_with.rs","byte_start":229176,"byte_end":229195,"line_start":97,"line_end":97,"column_start":30,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234511,"byte_end":234516,"line_start":124,"line_end":124,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1782}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234696,"byte_end":234701,"line_start":130,"line_end":130,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1786},{"krate":0,"index":1787}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":235193,"byte_end":235206,"line_start":154,"line_end":154,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":236167,"byte_end":236171,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1819}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":236403,"byte_end":236407,"line_start":28,"line_end":28,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1825}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":236742,"byte_end":236746,"line_start":46,"line_end":46,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":237309,"byte_end":237317,"line_start":72,"line_end":72,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1840},{"krate":0,"index":1841}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":238255,"byte_end":238258,"line_start":20,"line_end":20,"column_start":48,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1862}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":238415,"byte_end":238418,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1866}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":238620,"byte_end":238623,"line_start":36,"line_end":36,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1874}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":239097,"byte_end":239100,"line_start":57,"line_end":57,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1879},{"krate":0,"index":1881},{"krate":0,"index":1882}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":239842,"byte_end":239850,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1894},{"krate":0,"index":1895}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":240533,"byte_end":240544,"line_start":118,"line_end":118,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1908},{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":1913},{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":241720,"byte_end":241731,"line_start":172,"line_end":172,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1926}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":241872,"byte_end":241883,"line_start":178,"line_end":178,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":242622,"byte_end":242633,"line_start":209,"line_end":209,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1945},{"krate":0,"index":1946}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":243028,"byte_end":243037,"line_start":229,"line_end":229,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1963},{"krate":0,"index":1964}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":244274,"byte_end":244281,"line_start":20,"line_end":20,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1982}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":244513,"byte_end":244520,"line_start":29,"line_end":29,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1987}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":244751,"byte_end":244758,"line_start":39,"line_end":39,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":1996}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":245274,"byte_end":245281,"line_start":61,"line_end":61,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2002},{"krate":0,"index":2004},{"krate":0,"index":2005}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":246126,"byte_end":246134,"line_start":96,"line_end":96,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2020},{"krate":0,"index":2021}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":246921,"byte_end":246936,"line_start":128,"line_end":128,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2043}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":248273,"byte_end":248284,"line_start":188,"line_end":188,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2059},{"krate":0,"index":2060},{"krate":0,"index":2061}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":248665,"byte_end":248676,"line_start":206,"line_end":206,"column_start":46,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2068}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":248967,"byte_end":248978,"line_start":218,"line_end":218,"column_start":44,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":249296,"byte_end":249311,"line_start":235,"line_end":235,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2088}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":249477,"byte_end":249492,"line_start":241,"line_end":241,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2096},{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":250336,"byte_end":250351,"line_start":274,"line_end":274,"column_start":50,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2109},{"krate":0,"index":2110}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":250815,"byte_end":250828,"line_start":296,"line_end":296,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2138},{"krate":0,"index":2139}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":252359,"byte_end":252366,"line_start":352,"line_end":352,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2144}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":252539,"byte_end":252546,"line_start":358,"line_end":358,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2149}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":252789,"byte_end":252796,"line_start":368,"line_end":368,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2156},{"krate":0,"index":2157},{"krate":0,"index":2159}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":253336,"byte_end":253343,"line_start":390,"line_end":390,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2169}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":254218,"byte_end":254226,"line_start":425,"line_end":425,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2185},{"krate":0,"index":2186}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":255044,"byte_end":255059,"line_start":457,"line_end":457,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":2209}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":256517,"byte_end":256532,"line_start":520,"line_end":520,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2224}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":256714,"byte_end":256729,"line_start":526,"line_end":526,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2233},{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2236},{"krate":0,"index":2237},{"krate":0,"index":2238}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":257585,"byte_end":257600,"line_start":559,"line_end":559,"column_start":56,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":2247},{"krate":0,"index":2248}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":258515,"byte_end":258518,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2268}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":258740,"byte_end":258743,"line_start":30,"line_end":30,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2275}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":259127,"byte_end":259130,"line_start":49,"line_end":49,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2279},{"krate":0,"index":2281},{"krate":0,"index":2282}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":259790,"byte_end":259799,"line_start":79,"line_end":79,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2293},{"krate":0,"index":2294}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":260420,"byte_end":260429,"line_start":102,"line_end":102,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2305},{"krate":0,"index":2306}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":261086,"byte_end":261097,"line_start":129,"line_end":129,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2319},{"krate":0,"index":2320},{"krate":0,"index":2321}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":262506,"byte_end":262511,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2331}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":262780,"byte_end":262785,"line_start":31,"line_end":31,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2335},{"krate":0,"index":2336},{"krate":0,"index":2338}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":263177,"byte_end":263182,"line_start":50,"line_end":50,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2345}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":264299,"byte_end":264309,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2362}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":264560,"byte_end":264570,"line_start":34,"line_end":34,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2366},{"krate":0,"index":2367},{"krate":0,"index":2369}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":264947,"byte_end":264957,"line_start":53,"line_end":53,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2373},{"krate":0,"index":2375},{"krate":0,"index":2376}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":265853,"byte_end":265862,"line_start":90,"line_end":90,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2389},{"krate":0,"index":2390}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":266672,"byte_end":266681,"line_start":119,"line_end":119,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2403},{"krate":0,"index":2404}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":267462,"byte_end":267480,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2417}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":267800,"byte_end":267818,"line_start":171,"line_end":171,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2421},{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2424},{"krate":0,"index":2425},{"krate":0,"index":2426}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":270683,"byte_end":270696,"line_start":267,"line_end":267,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2437},{"krate":0,"index":2438},{"krate":0,"index":2439}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":271829,"byte_end":271842,"line_start":306,"line_end":306,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2443}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":272403,"byte_end":272416,"line_start":327,"line_end":327,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2447}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":273343,"byte_end":273361,"line_start":23,"line_end":23,"column_start":12,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2457}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":274002,"byte_end":274020,"line_start":44,"line_end":44,"column_start":33,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2461},{"krate":0,"index":2462},{"krate":0,"index":2464}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":274397,"byte_end":274415,"line_start":63,"line_end":63,"column_start":40,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2468},{"krate":0,"index":2470},{"krate":0,"index":2471}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":275517,"byte_end":275528,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2491}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":275758,"byte_end":275769,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2494},{"krate":0,"index":2495},{"krate":0,"index":2497}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":276299,"byte_end":276310,"line_start":57,"line_end":57,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2500},{"krate":0,"index":2502},{"krate":0,"index":2503}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":277217,"byte_end":277225,"line_start":96,"line_end":96,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2514},{"krate":0,"index":2515}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":277792,"byte_end":277811,"line_start":124,"line_end":124,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2525}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":278052,"byte_end":278071,"line_start":138,"line_end":138,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2528},{"krate":0,"index":2529},{"krate":0,"index":2530},{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2533},{"krate":0,"index":2534}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":280246,"byte_end":280261,"line_start":217,"line_end":217,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2546}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":281033,"byte_end":281048,"line_start":246,"line_end":246,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2549}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":281696,"byte_end":281711,"line_start":268,"line_end":268,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2552}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":282059,"byte_end":282078,"line_start":285,"line_end":285,"column_start":12,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2562}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":282303,"byte_end":282322,"line_start":298,"line_end":298,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2566},{"krate":0,"index":2567},{"krate":0,"index":2568},{"krate":0,"index":2569},{"krate":0,"index":2570},{"krate":0,"index":2571}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":283400,"byte_end":283419,"line_start":335,"line_end":335,"column_start":37,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2575},{"krate":0,"index":2576}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":283959,"byte_end":283976,"line_start":361,"line_end":361,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2586},{"krate":0,"index":2587},{"krate":0,"index":2588},{"krate":0,"index":2591},{"krate":0,"index":2592}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285749,"byte_end":285755,"line_start":20,"line_end":20,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2609}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285915,"byte_end":285921,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2613}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":286132,"byte_end":286138,"line_start":36,"line_end":36,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2617},{"krate":0,"index":2618},{"krate":0,"index":2620}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":286600,"byte_end":286606,"line_start":56,"line_end":56,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2624},{"krate":0,"index":2626},{"krate":0,"index":2627}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":287347,"byte_end":287355,"line_start":87,"line_end":87,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2638},{"krate":0,"index":2639}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":288036,"byte_end":288050,"line_start":115,"line_end":115,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2651},{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2654},{"krate":0,"index":2655},{"krate":0,"index":2656},{"krate":0,"index":2657}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":289314,"byte_end":289328,"line_start":171,"line_end":171,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2669}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":289475,"byte_end":289489,"line_start":177,"line_end":177,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2675},{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2679},{"krate":0,"index":2680}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":290235,"byte_end":290249,"line_start":207,"line_end":207,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2686},{"krate":0,"index":2687}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":290774,"byte_end":290786,"line_start":233,"line_end":233,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2704},{"krate":0,"index":2705},{"krate":0,"index":2706},{"krate":0,"index":2708},{"krate":0,"index":2709}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":291732,"byte_end":291741,"line_start":277,"line_end":277,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2713},{"krate":0,"index":2714},{"krate":0,"index":2715},{"krate":0,"index":2716},{"krate":0,"index":2719}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":292491,"byte_end":292500,"line_start":310,"line_end":310,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":292604,"byte_end":292613,"line_start":317,"line_end":317,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2727}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\noop.rs","byte_start":292918,"byte_end":292930,"line_start":5,"line_end":5,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2737},{"krate":0,"index":2738},{"krate":0,"index":2739},{"krate":0,"index":2740},{"krate":0,"index":2741},{"krate":0,"index":2742}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\noop.rs","byte_start":293274,"byte_end":293286,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2745},{"krate":0,"index":2746},{"krate":0,"index":2747},{"krate":0,"index":2749},{"krate":0,"index":2750}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\noop.rs","byte_start":293642,"byte_end":293654,"line_start":45,"line_end":45,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2753},{"krate":0,"index":2754}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\noop.rs","byte_start":293848,"byte_end":293859,"line_start":57,"line_end":57,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2758}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":294413,"byte_end":294416,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2767}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":294597,"byte_end":294600,"line_start":26,"line_end":26,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2770},{"krate":0,"index":2771},{"krate":0,"index":2773}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":294935,"byte_end":294938,"line_start":44,"line_end":44,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2776},{"krate":0,"index":2778},{"krate":0,"index":2779}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":295508,"byte_end":295516,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2788},{"krate":0,"index":2789}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":296031,"byte_end":296042,"line_start":92,"line_end":92,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2797},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2801},{"krate":0,"index":2802}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":297261,"byte_end":297267,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2814}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":297471,"byte_end":297477,"line_start":27,"line_end":27,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2817},{"krate":0,"index":2818},{"krate":0,"index":2820}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":297812,"byte_end":297818,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2823},{"krate":0,"index":2825},{"krate":0,"index":2826}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":298396,"byte_end":298404,"line_start":71,"line_end":71,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2835},{"krate":0,"index":2836}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":299039,"byte_end":299053,"line_start":98,"line_end":98,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2844},{"krate":0,"index":2845},{"krate":0,"index":2846},{"krate":0,"index":2847},{"krate":0,"index":2848},{"krate":0,"index":2849},{"krate":0,"index":2850}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":300345,"byte_end":300351,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2854}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":300555,"byte_end":300561,"line_start":161,"line_end":161,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2857},{"krate":0,"index":2858},{"krate":0,"index":2860}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":300896,"byte_end":300902,"line_start":179,"line_end":179,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2863},{"krate":0,"index":2865},{"krate":0,"index":2866}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":301480,"byte_end":301488,"line_start":205,"line_end":205,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2875},{"krate":0,"index":2876}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":302123,"byte_end":302137,"line_start":232,"line_end":232,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2884},{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":303436,"byte_end":303442,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2907}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":303629,"byte_end":303635,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2912},{"krate":0,"index":2913},{"krate":0,"index":2915}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":304083,"byte_end":304089,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2920},{"krate":0,"index":2922},{"krate":0,"index":2923}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":304734,"byte_end":304742,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2932},{"krate":0,"index":2933}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":305299,"byte_end":305313,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2942},{"krate":0,"index":2943},{"krate":0,"index":2944},{"krate":0,"index":2945},{"krate":0,"index":2946},{"krate":0,"index":2947},{"krate":0,"index":2948}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":306209,"byte_end":306223,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2955}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":306335,"byte_end":306349,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2960},{"krate":0,"index":2961},{"krate":0,"index":2962},{"krate":0,"index":2963},{"krate":0,"index":2964},{"krate":0,"index":2965}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":306997,"byte_end":307011,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2970},{"krate":0,"index":2971}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":307331,"byte_end":307343,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2979},{"krate":0,"index":2980},{"krate":0,"index":2981},{"krate":0,"index":2983},{"krate":0,"index":2984}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":308387,"byte_end":308393,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2996}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":308580,"byte_end":308586,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3004}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":309033,"byte_end":309039,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3009},{"krate":0,"index":3011},{"krate":0,"index":3012}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":309683,"byte_end":309691,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3021},{"krate":0,"index":3022}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":310247,"byte_end":310261,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3031},{"krate":0,"index":3032},{"krate":0,"index":3033},{"krate":0,"index":3034},{"krate":0,"index":3035},{"krate":0,"index":3036},{"krate":0,"index":3037}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":311230,"byte_end":311244,"line_start":143,"line_end":143,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3044}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":311356,"byte_end":311370,"line_start":149,"line_end":149,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3049},{"krate":0,"index":3050},{"krate":0,"index":3051},{"krate":0,"index":3052},{"krate":0,"index":3053},{"krate":0,"index":3054}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":312017,"byte_end":312031,"line_start":178,"line_end":178,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3059},{"krate":0,"index":3060}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":312350,"byte_end":312362,"line_start":196,"line_end":196,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3068},{"krate":0,"index":3069},{"krate":0,"index":3070},{"krate":0,"index":3072},{"krate":0,"index":3073}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\product.rs","byte_start":313467,"byte_end":313482,"line_start":23,"line_end":23,"column_start":31,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\product.rs","byte_start":313504,"byte_end":313519,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3104}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\product.rs","byte_start":313668,"byte_end":313683,"line_start":33,"line_end":33,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3108},{"krate":0,"index":3109},{"krate":0,"index":3110},{"krate":0,"index":3111},{"krate":0,"index":3112},{"krate":0,"index":3113}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\product.rs","byte_start":314233,"byte_end":314248,"line_start":60,"line_end":60,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3117},{"krate":0,"index":3118}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\product.rs","byte_start":314480,"byte_end":314495,"line_start":73,"line_end":73,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3121}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\product.rs","byte_start":314680,"byte_end":314693,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3128},{"krate":0,"index":3129},{"krate":0,"index":3130},{"krate":0,"index":3132},{"krate":0,"index":3133}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\sum.rs","byte_start":315681,"byte_end":315692,"line_start":23,"line_end":23,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\sum.rs","byte_start":315714,"byte_end":315725,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3161}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\sum.rs","byte_start":315866,"byte_end":315877,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3165},{"krate":0,"index":3166},{"krate":0,"index":3167},{"krate":0,"index":3168},{"krate":0,"index":3169},{"krate":0,"index":3170}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\sum.rs","byte_start":316344,"byte_end":316355,"line_start":56,"line_end":56,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3174},{"krate":0,"index":3175}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\sum.rs","byte_start":316571,"byte_end":316582,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3178}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\sum.rs","byte_start":316755,"byte_end":316764,"line_start":82,"line_end":82,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3185},{"krate":0,"index":3186},{"krate":0,"index":3187},{"krate":0,"index":3189},{"krate":0,"index":3190}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":317860,"byte_end":317867,"line_start":21,"line_end":21,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3207}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":318028,"byte_end":318035,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3211}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":318250,"byte_end":318257,"line_start":37,"line_end":37,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3215},{"krate":0,"index":3216},{"krate":0,"index":3218}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":318717,"byte_end":318724,"line_start":57,"line_end":57,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3222},{"krate":0,"index":3224},{"krate":0,"index":3225}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":319466,"byte_end":319474,"line_start":88,"line_end":88,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3236},{"krate":0,"index":3237}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":320149,"byte_end":320164,"line_start":116,"line_end":116,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3249},{"krate":0,"index":3250},{"krate":0,"index":3251},{"krate":0,"index":3252},{"krate":0,"index":3253},{"krate":0,"index":3254},{"krate":0,"index":3255}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":321378,"byte_end":321393,"line_start":170,"line_end":170,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3267}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":321543,"byte_end":321558,"line_start":176,"line_end":176,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3273},{"krate":0,"index":3274},{"krate":0,"index":3275},{"krate":0,"index":3276},{"krate":0,"index":3277},{"krate":0,"index":3278}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":322301,"byte_end":322316,"line_start":206,"line_end":206,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3284},{"krate":0,"index":3285}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":322699,"byte_end":322712,"line_start":225,"line_end":225,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3297},{"krate":0,"index":3298},{"krate":0,"index":3299},{"krate":0,"index":3301},{"krate":0,"index":3302}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":324100,"byte_end":324104,"line_start":23,"line_end":23,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3321}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":324262,"byte_end":324266,"line_start":32,"line_end":32,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3324}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":324376,"byte_end":324385,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3327}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":324579,"byte_end":324588,"line_start":49,"line_end":49,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3330},{"krate":0,"index":3331},{"krate":0,"index":3333}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":325098,"byte_end":325107,"line_start":72,"line_end":72,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3336},{"krate":0,"index":3338},{"krate":0,"index":3339}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":325807,"byte_end":325815,"line_start":102,"line_end":102,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3347},{"krate":0,"index":3348}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":326524,"byte_end":326541,"line_start":131,"line_end":131,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3358},{"krate":0,"index":3359},{"krate":0,"index":3360},{"krate":0,"index":3361},{"krate":0,"index":3362},{"krate":0,"index":3363},{"krate":0,"index":3364}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":327639,"byte_end":327652,"line_start":183,"line_end":183,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3374},{"krate":0,"index":3375},{"krate":0,"index":3376}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":327999,"byte_end":328012,"line_start":202,"line_end":202,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3380}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":328263,"byte_end":328276,"line_start":215,"line_end":215,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3384}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":328587,"byte_end":328604,"line_start":232,"line_end":232,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3394},{"krate":0,"index":3395},{"krate":0,"index":3396},{"krate":0,"index":3397},{"krate":0,"index":3398},{"krate":0,"index":3399}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":329562,"byte_end":329579,"line_start":270,"line_end":270,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3404},{"krate":0,"index":3405}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":330058,"byte_end":330073,"line_start":294,"line_end":294,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3415},{"krate":0,"index":3416},{"krate":0,"index":3417},{"krate":0,"index":3424},{"krate":0,"index":3425}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":330918,"byte_end":330934,"line_start":335,"line_end":335,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3435}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331652,"byte_end":331661,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3451}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331850,"byte_end":331859,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3455},{"krate":0,"index":3456}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":332489,"byte_end":332506,"line_start":56,"line_end":56,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3467},{"krate":0,"index":3468},{"krate":0,"index":3469},{"krate":0,"index":3470},{"krate":0,"index":3471},{"krate":0,"index":3472}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":333306,"byte_end":333323,"line_start":89,"line_end":89,"column_start":49,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3477},{"krate":0,"index":3478}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":333726,"byte_end":333741,"line_start":111,"line_end":111,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3488},{"krate":0,"index":3489},{"krate":0,"index":3490},{"krate":0,"index":3496},{"krate":0,"index":3497}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":336561,"byte_end":336571,"line_start":64,"line_end":64,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3570}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":336868,"byte_end":336878,"line_start":77,"line_end":77,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3575}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":337190,"byte_end":337198,"line_start":90,"line_end":90,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3580}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":337533,"byte_end":337541,"line_start":104,"line_end":104,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3586}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":337877,"byte_end":337885,"line_start":118,"line_end":118,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3590}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":338179,"byte_end":338187,"line_start":131,"line_end":131,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3595}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":338657,"byte_end":338664,"line_start":152,"line_end":152,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3606}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":339119,"byte_end":339126,"line_start":168,"line_end":168,"column_start":62,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":3613}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":339653,"byte_end":339660,"line_start":191,"line_end":191,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3622}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":339992,"byte_end":339999,"line_start":205,"line_end":205,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3628}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":340451,"byte_end":340461,"line_start":224,"line_end":224,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3634}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":340901,"byte_end":340911,"line_start":241,"line_end":241,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3639}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":341315,"byte_end":341321,"line_start":259,"line_end":259,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3643}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":341976,"byte_end":341982,"line_start":278,"line_end":278,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3647}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":342504,"byte_end":342510,"line_start":298,"line_end":298,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3654}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":342771,"byte_end":342777,"line_start":308,"line_end":308,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3657}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":343053,"byte_end":343059,"line_start":318,"line_end":318,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3661}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":343430,"byte_end":343438,"line_start":332,"line_end":332,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3668}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":343724,"byte_end":343732,"line_start":345,"line_end":345,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3673}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":344144,"byte_end":344147,"line_start":361,"line_end":361,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3678}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345458,"byte_end":345464,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3696},{"krate":0,"index":3697}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":346313,"byte_end":346319,"line_start":57,"line_end":57,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3701},{"krate":0,"index":3702}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":346769,"byte_end":346783,"line_start":79,"line_end":79,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3709},{"krate":0,"index":3710},{"krate":0,"index":3711}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347834,"byte_end":347841,"line_start":126,"line_end":126,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3717},{"krate":0,"index":3718},{"krate":0,"index":3720}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":348159,"byte_end":348166,"line_start":144,"line_end":144,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3723},{"krate":0,"index":3725},{"krate":0,"index":3727}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":348778,"byte_end":348793,"line_start":176,"line_end":176,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3734},{"krate":0,"index":3735},{"krate":0,"index":3736},{"krate":0,"index":3737}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":349590,"byte_end":349594,"line_start":210,"line_end":210,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3744},{"krate":0,"index":3745},{"krate":0,"index":3746}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":349972,"byte_end":349976,"line_start":229,"line_end":229,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3749}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":350105,"byte_end":350109,"line_start":236,"line_end":236,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3752}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":353131,"byte_end":353136,"line_start":94,"line_end":94,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3791},{"krate":0,"index":3792},{"krate":0,"index":3793},{"krate":0,"index":3796}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":354017,"byte_end":354026,"line_start":130,"line_end":130,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3808},{"krate":0,"index":3809},{"krate":0,"index":3810}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":355063,"byte_end":355075,"line_start":172,"line_end":172,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3828},{"krate":0,"index":3829},{"krate":0,"index":3830}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":355710,"byte_end":355716,"line_start":200,"line_end":200,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3846},{"krate":0,"index":3847},{"krate":0,"index":3849}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":357117,"byte_end":357123,"line_start":252,"line_end":252,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3864},{"krate":0,"index":3865},{"krate":0,"index":3867}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":358064,"byte_end":358077,"line_start":292,"line_end":292,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3882},{"krate":0,"index":3883},{"krate":0,"index":3884},{"krate":0,"index":3885},{"krate":0,"index":3886},{"krate":0,"index":3887}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":359340,"byte_end":359353,"line_start":338,"line_end":338,"column_start":50,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3894},{"krate":0,"index":3895}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":360021,"byte_end":360032,"line_start":367,"line_end":367,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":3912},{"krate":0,"index":3913}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":360773,"byte_end":360785,"line_start":400,"line_end":400,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3924}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":361869,"byte_end":361877,"line_start":446,"line_end":446,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3944},{"krate":0,"index":3945},{"krate":0,"index":3946}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":363003,"byte_end":363008,"line_start":36,"line_end":36,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3982}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":363098,"byte_end":363103,"line_start":42,"line_end":42,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3985}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":363239,"byte_end":363244,"line_start":48,"line_end":48,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3988},{"krate":0,"index":3989},{"krate":0,"index":3991}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":363530,"byte_end":363535,"line_start":63,"line_end":63,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3994},{"krate":0,"index":3996},{"krate":0,"index":3997}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":364015,"byte_end":364028,"line_start":86,"line_end":86,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4005},{"krate":0,"index":4006},{"krate":0,"index":4007},{"krate":0,"index":4008},{"krate":0,"index":4009}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":365327,"byte_end":365331,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4025},{"krate":0,"index":4026},{"krate":0,"index":4028}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":365617,"byte_end":365621,"line_start":49,"line_end":49,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4031},{"krate":0,"index":4033},{"krate":0,"index":4034}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31856,"byte_end":31857,"line_start":266,"line_end":266,"column_start":67,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4055},{"krate":0,"index":4056},{"krate":0,"index":4057}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33365,"byte_end":33366,"line_start":313,"line_end":313,"column_start":70,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":4066},{"krate":0,"index":4067},{"krate":0,"index":4068}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92190,"byte_end":92191,"line_start":2077,"line_end":2077,"column_start":52,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4270},{"krate":0,"index":4271},{"krate":0,"index":4272}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116412,"byte_end":116418,"line_start":2841,"line_end":2841,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":6275},{"krate":0,"index":4352},{"krate":0,"index":4353},{"krate":0,"index":4354},{"krate":0,"index":4355},{"krate":0,"index":4356}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116743,"byte_end":116749,"line_start":2858,"line_end":2858,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6276},{"krate":0,"index":4360},{"krate":0,"index":4361},{"krate":0,"index":4362},{"krate":0,"index":4363},{"krate":0,"index":4364}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":367000,"byte_end":367006,"line_start":27,"line_end":27,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4380},{"krate":0,"index":4381},{"krate":0,"index":4382}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":367179,"byte_end":367187,"line_start":36,"line_end":36,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4385},{"krate":0,"index":4386},{"krate":0,"index":4388}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":367482,"byte_end":367490,"line_start":51,"line_end":51,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4391},{"krate":0,"index":4393},{"krate":0,"index":4394}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":368652,"byte_end":368656,"line_start":92,"line_end":92,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4399}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":370137,"byte_end":370151,"line_start":151,"line_end":151,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4417},{"krate":0,"index":4418},{"krate":0,"index":4419},{"krate":0,"index":4420}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":370763,"byte_end":370769,"line_start":174,"line_end":174,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4424}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373501,"byte_end":373506,"line_start":50,"line_end":50,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4475},{"krate":0,"index":4476},{"krate":0,"index":4477}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373783,"byte_end":373795,"line_start":66,"line_end":66,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4483},{"krate":0,"index":4484},{"krate":0,"index":4485}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":382245,"byte_end":382249,"line_start":49,"line_end":49,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4499}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":382823,"byte_end":382837,"line_start":63,"line_end":63,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4502},{"krate":0,"index":4503},{"krate":0,"index":4504}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":387254,"byte_end":387260,"line_start":20,"line_end":20,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4520},{"krate":0,"index":4521},{"krate":0,"index":4522}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":387699,"byte_end":387703,"line_start":42,"line_end":42,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4526}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":388961,"byte_end":388967,"line_start":93,"line_end":93,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4545}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mergesort.rs","byte_start":418765,"byte_end":418775,"line_start":33,"line_end":33,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4584}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mergesort.rs","byte_start":421725,"byte_end":421731,"line_start":103,"line_end":103,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4593}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mergesort.rs","byte_start":421980,"byte_end":421993,"line_start":115,"line_end":115,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4600}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mergesort.rs","byte_start":425719,"byte_end":425728,"line_start":218,"line_end":218,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4611}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mergesort.rs","byte_start":437170,"byte_end":437175,"line_start":522,"line_end":522,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4635}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\quicksort.rs","byte_start":446362,"byte_end":446373,"line_start":22,"line_end":22,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4666}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\quicksort.rs","byte_start":446603,"byte_end":446609,"line_start":35,"line_end":35,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4672}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\quicksort.rs","byte_start":446816,"byte_end":446826,"line_start":47,"line_end":47,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4679}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":405566,"byte_end":405570,"line_start":450,"line_end":450,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4824}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":405697,"byte_end":405701,"line_start":456,"line_end":456,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4828},{"krate":0,"index":4829},{"krate":0,"index":4831}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":406027,"byte_end":406031,"line_start":471,"line_end":471,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4835},{"krate":0,"index":4837},{"krate":0,"index":4838}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":406542,"byte_end":406554,"line_start":495,"line_end":495,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4847},{"krate":0,"index":4848},{"krate":0,"index":4849},{"krate":0,"index":4850}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":407121,"byte_end":407127,"line_start":516,"line_end":516,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4854}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":407256,"byte_end":407262,"line_start":522,"line_end":522,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4858},{"krate":0,"index":4859},{"krate":0,"index":4861}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":407590,"byte_end":407596,"line_start":537,"line_end":537,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4865},{"krate":0,"index":4867},{"krate":0,"index":4868}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":408227,"byte_end":408241,"line_start":565,"line_end":565,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4878},{"krate":0,"index":4879},{"krate":0,"index":4880},{"krate":0,"index":4881}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":409098,"byte_end":409105,"line_start":596,"line_end":596,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4885}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":409235,"byte_end":409242,"line_start":602,"line_end":602,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4889},{"krate":0,"index":4890},{"krate":0,"index":4892}],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":409570,"byte_end":409577,"line_start":617,"line_end":617,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":4896},{"krate":0,"index":4898},{"krate":0,"index":4899}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":410259,"byte_end":410274,"line_start":646,"line_end":646,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4909},{"krate":0,"index":4910},{"krate":0,"index":4911},{"krate":0,"index":4912}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":411157,"byte_end":411164,"line_start":677,"line_end":677,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4916},{"krate":0,"index":4917},{"krate":0,"index":4919}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":411494,"byte_end":411501,"line_start":692,"line_end":692,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":4923},{"krate":0,"index":4925},{"krate":0,"index":4926}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":412022,"byte_end":412037,"line_start":716,"line_end":716,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4935},{"krate":0,"index":4936},{"krate":0,"index":4937},{"krate":0,"index":4938}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":412684,"byte_end":412693,"line_start":740,"line_end":740,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4942},{"krate":0,"index":4943},{"krate":0,"index":4945}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":413025,"byte_end":413034,"line_start":755,"line_end":755,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":4949},{"krate":0,"index":4951},{"krate":0,"index":4952}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":413675,"byte_end":413692,"line_start":783,"line_end":783,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4962},{"krate":0,"index":4963},{"krate":0,"index":4964},{"krate":0,"index":4965}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":414536,"byte_end":414541,"line_start":813,"line_end":813,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4976}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":414724,"byte_end":414729,"line_start":822,"line_end":822,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4981}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":414925,"byte_end":414930,"line_start":828,"line_end":828,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4986},{"krate":0,"index":4987}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":416424,"byte_end":416432,"line_start":889,"line_end":889,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5010}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":416657,"byte_end":416665,"line_start":897,"line_end":897,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5015},{"krate":0,"index":5016}],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":489127,"byte_end":489129,"line_start":350,"line_end":350,"column_start":54,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":6757},{"krate":0,"index":5093},{"krate":0,"index":5094},{"krate":0,"index":5095},{"krate":0,"index":5096},{"krate":0,"index":5099},{"krate":0,"index":5102}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":490372,"byte_end":490377,"line_start":403,"line_end":403,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5110},{"krate":0,"index":5111}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":490637,"byte_end":490650,"line_start":414,"line_end":414,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5115},{"krate":0,"index":5116},{"krate":0,"index":5117}],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":491449,"byte_end":491460,"line_start":448,"line_end":448,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5125},{"krate":0,"index":5126}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":491811,"byte_end":491830,"line_start":463,"line_end":463,"column_start":33,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":5130},{"krate":0,"index":5131},{"krate":0,"index":5132}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":492802,"byte_end":492807,"line_start":503,"line_end":503,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5139},{"krate":0,"index":5140}],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":493065,"byte_end":493078,"line_start":514,"line_end":514,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5144},{"krate":0,"index":5145},{"krate":0,"index":5146}],"docs":"","sig":null,"attributes":[]},{"id":449,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":493835,"byte_end":493846,"line_start":547,"line_end":547,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5153},{"krate":0,"index":5154}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":494111,"byte_end":494130,"line_start":558,"line_end":558,"column_start":33,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":5158},{"krate":0,"index":5159},{"krate":0,"index":5160}],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":494871,"byte_end":494876,"line_start":588,"line_end":588,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5165}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":495026,"byte_end":495031,"line_start":594,"line_end":594,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":5169},{"krate":0,"index":5170}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":496691,"byte_end":496706,"line_start":654,"line_end":654,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5191}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Inherent","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":496860,"byte_end":496883,"line_start":660,"line_end":660,"column_start":36,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":5196}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":497191,"byte_end":497206,"line_start":669,"line_end":669,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":5200},{"krate":0,"index":5201}],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":497554,"byte_end":497577,"line_start":681,"line_end":681,"column_start":58,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":5207},{"krate":0,"index":5208},{"krate":0,"index":5210}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":498541,"byte_end":498546,"line_start":721,"line_end":721,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5215},{"krate":0,"index":5216}],"docs":"","sig":null,"attributes":[]},{"id":458,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":499140,"byte_end":499155,"line_start":746,"line_end":746,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5221},{"krate":0,"index":5222}],"docs":"","sig":null,"attributes":[]},{"id":459,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":499827,"byte_end":499834,"line_start":774,"line_end":774,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5233},{"krate":0,"index":5234}],"docs":"","sig":null,"attributes":[]},{"id":460,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":500211,"byte_end":500226,"line_start":789,"line_end":789,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":5240},{"krate":0,"index":5241},{"krate":0,"index":5242}],"docs":"","sig":null,"attributes":[]},{"id":461,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":501270,"byte_end":501282,"line_start":831,"line_end":831,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":5254},{"krate":0,"index":5255}],"docs":"","sig":null,"attributes":[]},{"id":462,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":501695,"byte_end":501715,"line_start":847,"line_end":847,"column_start":51,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":5261},{"krate":0,"index":5262},{"krate":0,"index":5263}],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":502886,"byte_end":502889,"line_start":18,"line_end":18,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5273},{"krate":0,"index":5274},{"krate":0,"index":5275}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":503062,"byte_end":503070,"line_start":27,"line_end":27,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5278},{"krate":0,"index":5279},{"krate":0,"index":5281}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":503367,"byte_end":503375,"line_start":42,"line_end":42,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5284},{"krate":0,"index":5286},{"krate":0,"index":5287}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":504498,"byte_end":504509,"line_start":80,"line_end":80,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":5296},{"krate":0,"index":5297},{"krate":0,"index":5298},{"krate":0,"index":5299}],"docs":"","sig":null,"attributes":[]},{"id":467,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":505173,"byte_end":505184,"line_start":100,"line_end":100,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":5303}],"docs":"","sig":null,"attributes":[]},{"id":468,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":505553,"byte_end":505563,"line_start":115,"line_end":115,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5311},{"krate":0,"index":5312},{"krate":0,"index":5313}],"docs":"","sig":null,"attributes":[]},{"id":469,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":505885,"byte_end":505895,"line_start":129,"line_end":129,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":5317}],"docs":"","sig":null,"attributes":[]},{"id":470,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":506100,"byte_end":506110,"line_start":136,"line_end":136,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5321}],"docs":"","sig":null,"attributes":[]},{"id":471,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":506216,"byte_end":506226,"line_start":142,"line_end":142,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5325}],"docs":"","sig":null,"attributes":[]},{"id":472,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\par_either.rs","byte_start":507274,"byte_end":507280,"line_start":6,"line_end":6,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5341},{"krate":0,"index":5342},{"krate":0,"index":5344}],"docs":"","sig":null,"attributes":[]},{"id":473,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\par_either.rs","byte_start":507800,"byte_end":507806,"line_start":28,"line_end":28,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5348},{"krate":0,"index":5350},{"krate":0,"index":5351}],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Direct","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\par_either.rs","byte_start":508600,"byte_end":508606,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5357}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4273,"byte_end":4284,"line_start":109,"line_end":109,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":53}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":12793,"byte_end":12804,"line_start":24,"line_end":24,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":55}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":12814,"byte_end":12823,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":73}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":12833,"byte_end":12842,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":87}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":12852,"byte_end":12860,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":100}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":12870,"byte_end":12878,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":121}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":12888,"byte_end":12899,"line_start":29,"line_end":29,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":141}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\mod.rs","byte_start":12909,"byte_end":12918,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":154}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4294,"byte_end":4298,"line_start":110,"line_end":110,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":182}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":27788,"byte_end":27796,"line_start":123,"line_end":123,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1286}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4308,"byte_end":4314,"line_start":111,"line_end":111,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4365}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4324,"byte_end":4331,"line_start":112,"line_end":112,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4430}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4341,"byte_end":4346,"line_start":113,"line_end":113,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":4464}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4356,"byte_end":4371,"line_start":114,"line_end":114,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":4491}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4381,"byte_end":4387,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4508}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4397,"byte_end":4402,"line_start":116,"line_end":116,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":4552}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4412,"byte_end":4415,"line_start":117,"line_end":117,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":5029}},{"kind":"Mod","span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\lib.rs","byte_start":4425,"byte_end":4428,"line_start":118,"line_end":118,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":5265}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\split_producer.rs","byte_start":8341,"byte_end":8346,"line_start":17,"line_end":17,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":29}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\split_producer.rs","byte_start":8772,"byte_end":8785,"line_start":29,"line_end":29,"column_start":16,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":22},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\split_producer.rs","byte_start":10253,"byte_end":10266,"line_start":77,"line_end":77,"column_start":38,"column_end":51},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":22},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","byte_start":13379,"byte_end":13389,"line_start":18,"line_end":18,"column_start":46,"column_end":56},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":671},"to":{"krate":0,"index":4043}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\binary_heap.rs","byte_start":13851,"byte_end":13855,"line_start":40,"line_end":40,"column_start":35,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":5442},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_map.rs","byte_start":15044,"byte_end":15048,"line_start":34,"line_end":34,"column_start":44,"column_end":48},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":5498},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\btree_set.rs","byte_start":16553,"byte_end":16557,"line_start":34,"line_end":34,"column_start":40,"column_end":44},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":5574},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_map.rs","byte_start":17810,"byte_end":17814,"line_start":35,"line_end":35,"column_start":50,"column_end":54},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":5623},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\hash_set.rs","byte_start":19454,"byte_end":19458,"line_start":35,"line_end":35,"column_start":41,"column_end":45},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":5702},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\linked_list.rs","byte_start":20548,"byte_end":20552,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":5750},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\collections\\vec_deque.rs","byte_start":21943,"byte_end":21947,"line_start":35,"line_end":35,"column_start":29,"column_end":33},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":5828},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118638,"byte_end":118643,"line_start":46,"line_end":46,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":257}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":118802,"byte_end":118803,"line_start":51,"line_end":51,"column_start":45,"column_end":46},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":260},"to":{"krate":0,"index":257}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":119313,"byte_end":119323,"line_start":71,"line_end":71,"column_start":50,"column_end":60},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":5874},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":120326,"byte_end":120346,"line_start":107,"line_end":107,"column_start":41,"column_end":61},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":267},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\par_bridge.rs","byte_start":120638,"byte_end":120658,"line_start":118,"line_end":118,"column_start":60,"column_end":80},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":267},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":124565,"byte_end":124570,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":5883},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":124798,"byte_end":124803,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":5883},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":125906,"byte_end":125911,"line_start":67,"line_end":67,"column_start":40,"column_end":45},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":5883},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":126846,"byte_end":126855,"line_start":103,"line_end":103,"column_start":51,"column_end":60},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":327},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":127533,"byte_end":127542,"line_start":128,"line_end":128,"column_start":51,"column_end":60},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":339},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":128211,"byte_end":128224,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":128407,"byte_end":128420,"line_start":168,"line_end":168,"column_start":25,"column_end":38},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":351},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":130032,"byte_end":130040,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":130254,"byte_end":130262,"line_start":237,"line_end":237,"column_start":25,"column_end":33},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":372},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":130558,"byte_end":130566,"line_start":253,"line_end":253,"column_start":34,"column_end":42},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":372},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chain.rs","byte_start":130687,"byte_end":130695,"line_start":260,"line_end":260,"column_start":36,"column_end":44},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":372},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find.rs","byte_start":131319,"byte_end":131331,"line_start":20,"line_end":20,"column_start":13,"column_end":25},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find.rs","byte_start":131485,"byte_end":131497,"line_start":26,"line_end":26,"column_start":36,"column_end":48},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":406},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find.rs","byte_start":132082,"byte_end":132094,"line_start":52,"line_end":52,"column_start":45,"column_end":57},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":406},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find.rs","byte_start":132458,"byte_end":132468,"line_start":72,"line_end":72,"column_start":30,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":431},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find.rs","byte_start":133495,"byte_end":133506,"line_start":116,"line_end":116,"column_start":32,"column_end":43},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":452},"to":{"krate":0,"index":1329}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find_first_last\\mod.rs","byte_start":136032,"byte_end":136044,"line_start":69,"line_end":69,"column_start":13,"column_end":25},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find_first_last\\mod.rs","byte_start":136594,"byte_end":136606,"line_start":88,"line_end":88,"column_start":32,"column_end":44},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":477},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find_first_last\\mod.rs","byte_start":137672,"byte_end":137684,"line_start":129,"line_end":129,"column_start":41,"column_end":53},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":477},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find_first_last\\mod.rs","byte_start":139246,"byte_end":139256,"line_start":174,"line_end":174,"column_start":51,"column_end":61},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":506},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\find_first_last\\mod.rs","byte_start":140964,"byte_end":140975,"line_start":231,"line_end":231,"column_start":32,"column_end":43},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":523},"to":{"krate":0,"index":1329}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":141798,"byte_end":141804,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":5904},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":142003,"byte_end":142009,"line_start":33,"line_end":33,"column_start":30,"column_end":36},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":5904},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":142342,"byte_end":142348,"line_start":51,"line_end":51,"column_start":37,"column_end":43},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":5904},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":143046,"byte_end":143054,"line_start":83,"line_end":83,"column_start":45,"column_end":53},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":556},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":143627,"byte_end":143640,"line_start":112,"line_end":112,"column_start":22,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":567},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":144759,"byte_end":144767,"line_start":159,"line_end":159,"column_start":22,"column_end":30},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":580},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":145445,"byte_end":145453,"line_start":185,"line_end":185,"column_start":31,"column_end":39},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":580},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\chunks.rs","byte_start":145614,"byte_end":145622,"line_start":195,"line_end":195,"column_start":33,"column_end":41},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":580},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\collect\\consumer.rs","byte_start":152343,"byte_end":152358,"line_start":30,"line_end":30,"column_start":24,"column_end":39},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\collect\\consumer.rs","byte_start":152651,"byte_end":152666,"line_start":38,"line_end":38,"column_start":40,"column_end":55},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":639},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\collect\\consumer.rs","byte_start":153693,"byte_end":153706,"line_start":72,"line_end":72,"column_start":38,"column_end":51},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":644},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\collect\\consumer.rs","byte_start":154717,"byte_end":154732,"line_start":106,"line_end":106,"column_start":49,"column_end":64},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":639},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\collect\\mod.rs","byte_start":148595,"byte_end":148602,"line_start":76,"line_end":76,"column_start":24,"column_end":31},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\collect\\mod.rs","byte_start":150268,"byte_end":150271,"line_start":121,"line_end":121,"column_start":31,"column_end":34},"kind":{"Impl":{"id":77}},"from":{"krate":5,"index":7050},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":163209,"byte_end":163218,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":5914},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":163411,"byte_end":163420,"line_start":28,"line_end":28,"column_start":30,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":5914},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":163764,"byte_end":163773,"line_start":46,"line_end":46,"column_start":37,"column_end":46},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":5914},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":164279,"byte_end":164287,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":735},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\enumerate.rs","byte_start":164871,"byte_end":164888,"line_start":92,"line_end":92,"column_start":22,"column_end":39},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":744},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":166694,"byte_end":166700,"line_start":18,"line_end":18,"column_start":48,"column_end":54},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":5923},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":166860,"byte_end":166866,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":5923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":167077,"byte_end":167083,"line_start":34,"line_end":34,"column_start":33,"column_end":39},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":5923},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":167631,"byte_end":167645,"line_start":58,"line_end":58,"column_start":16,"column_end":30},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":783},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":167796,"byte_end":167810,"line_start":64,"line_end":64,"column_start":39,"column_end":53},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":783},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":168554,"byte_end":168568,"line_start":94,"line_end":94,"column_start":48,"column_end":62},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":783},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter.rs","byte_start":168955,"byte_end":168967,"line_start":113,"line_end":113,"column_start":33,"column_end":45},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":812},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":170243,"byte_end":170252,"line_start":18,"line_end":18,"column_start":48,"column_end":57},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":5932},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":170459,"byte_end":170468,"line_start":26,"line_end":26,"column_start":30,"column_end":39},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":5932},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":170657,"byte_end":170666,"line_start":33,"line_end":33,"column_start":36,"column_end":45},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":5932},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":171233,"byte_end":171250,"line_start":58,"line_end":58,"column_start":20,"column_end":37},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":171403,"byte_end":171420,"line_start":64,"line_end":64,"column_start":38,"column_end":55},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":855},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":172206,"byte_end":172223,"line_start":95,"line_end":95,"column_start":47,"column_end":64},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":855},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\filter_map.rs","byte_start":172628,"byte_end":172643,"line_start":114,"line_end":114,"column_start":36,"column_end":51},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":886},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":173945,"byte_end":173952,"line_start":18,"line_end":18,"column_start":48,"column_end":55},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":5941},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":174131,"byte_end":174138,"line_start":24,"line_end":24,"column_start":30,"column_end":37},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":5941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":174318,"byte_end":174325,"line_start":31,"line_end":31,"column_start":37,"column_end":44},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":5941},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":174940,"byte_end":174955,"line_start":59,"line_end":59,"column_start":16,"column_end":31},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":930},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":175100,"byte_end":175115,"line_start":65,"line_end":65,"column_start":38,"column_end":53},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":930},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":175907,"byte_end":175922,"line_start":97,"line_end":97,"column_start":47,"column_end":62},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":930},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flat_map.rs","byte_start":176366,"byte_end":176379,"line_start":118,"line_end":118,"column_start":36,"column_end":49},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":961},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flatten.rs","byte_start":177951,"byte_end":177958,"line_start":16,"line_end":16,"column_start":13,"column_end":20},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":5950},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\flatten.rs","byte_start":178192,"byte_end":178199,"line_start":27,"line_end":27,"column_start":34,"column_end":41},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":5950},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":178635,"byte_end":178639,"line_start":6,"line_end":6,"column_start":19,"column_end":23},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":5959},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":179436,"byte_end":179440,"line_start":35,"line_end":35,"column_start":52,"column_end":56},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":5959},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":179630,"byte_end":179634,"line_start":41,"line_end":41,"column_start":40,"column_end":44},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":5959},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":180251,"byte_end":180263,"line_start":69,"line_end":69,"column_start":42,"column_end":54},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1029},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":181119,"byte_end":181131,"line_start":105,"line_end":105,"column_start":51,"column_end":63},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1029},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":181604,"byte_end":181614,"line_start":130,"line_end":130,"column_start":37,"column_end":47},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1059},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":182774,"byte_end":182782,"line_start":182,"line_end":182,"column_start":15,"column_end":23},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":5971},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":183571,"byte_end":183579,"line_start":210,"line_end":210,"column_start":58,"column_end":66},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":5971},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":183833,"byte_end":183841,"line_start":219,"line_end":219,"column_start":36,"column_end":44},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":5971},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":184413,"byte_end":184429,"line_start":246,"line_end":246,"column_start":38,"column_end":54},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1102},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\fold.rs","byte_start":185347,"byte_end":185363,"line_start":285,"line_end":285,"column_start":47,"column_end":63},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1102},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\for_each.rs","byte_start":186096,"byte_end":186111,"line_start":19,"line_end":19,"column_start":32,"column_end":47},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1140},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\for_each.rs","byte_start":186507,"byte_end":186522,"line_start":40,"line_end":40,"column_start":30,"column_end":45},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1140},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\for_each.rs","byte_start":186946,"byte_end":186961,"line_start":66,"line_end":66,"column_start":41,"column_end":56},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1140},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":187844,"byte_end":187847,"line_start":22,"line_end":22,"column_start":37,"column_end":40},"kind":{"Impl":{"id":120}},"from":{"krate":5,"index":7050},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":188116,"byte_end":188124,"line_start":35,"line_end":35,"column_start":37,"column_end":45},"kind":{"Impl":{"id":121}},"from":{"krate":5,"index":4039},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":188480,"byte_end":188490,"line_start":49,"line_end":49,"column_start":37,"column_end":47},"kind":{"Impl":{"id":122}},"from":{"krate":5,"index":671},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":188799,"byte_end":188809,"line_start":63,"line_end":63,"column_start":37,"column_end":47},"kind":{"Impl":{"id":123}},"from":{"krate":5,"index":3232},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":189272,"byte_end":189279,"line_start":79,"line_end":79,"column_start":48,"column_end":55},"kind":{"Impl":{"id":124}},"from":{"krate":1,"index":1090},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":189813,"byte_end":189821,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"kind":{"Impl":{"id":125}},"from":{"krate":5,"index":1258},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":190120,"byte_end":190127,"line_start":111,"line_end":111,"column_start":40,"column_end":47},"kind":{"Impl":{"id":126}},"from":{"krate":1,"index":1807},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":190449,"byte_end":190457,"line_start":125,"line_end":125,"column_start":37,"column_end":45},"kind":{"Impl":{"id":127}},"from":{"krate":5,"index":7427},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":190735,"byte_end":190741,"line_start":138,"line_end":138,"column_start":37,"column_end":43},"kind":{"Impl":{"id":128}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":191002,"byte_end":191008,"line_start":148,"line_end":148,"column_start":45,"column_end":51},"kind":{"Impl":{"id":129}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":191275,"byte_end":191281,"line_start":158,"line_end":158,"column_start":44,"column_end":50},"kind":{"Impl":{"id":130}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":191544,"byte_end":191550,"line_start":168,"line_end":168,"column_start":39,"column_end":45},"kind":{"Impl":{"id":131}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":191820,"byte_end":191826,"line_start":178,"line_end":178,"column_start":49,"column_end":55},"kind":{"Impl":{"id":132}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\from_par_iter.rs","byte_start":192269,"byte_end":192272,"line_start":192,"line_end":192,"column_start":52,"column_end":55},"kind":{"Impl":{"id":133}},"from":{"krate":5,"index":546},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195932,"byte_end":195936,"line_start":59,"line_end":59,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":195939,"byte_end":195944,"line_start":59,"line_end":59,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198946,"byte_end":198950,"line_start":128,"line_end":128,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":198953,"byte_end":198958,"line_start":128,"line_end":128,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":200266,"byte_end":200271,"line_start":159,"line_end":159,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":202286,"byte_end":202294,"line_start":213,"line_end":213,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":1313},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203399,"byte_end":203403,"line_start":236,"line_end":236,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":203406,"byte_end":203411,"line_start":236,"line_end":236,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":204399,"byte_end":204407,"line_start":263,"line_end":263,"column_start":6,"column_end":14},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":5983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":205526,"byte_end":205540,"line_start":302,"line_end":302,"column_start":6,"column_end":20},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":5988},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\plumbing\\mod.rs","byte_start":207898,"byte_end":207906,"line_start":364,"line_end":364,"column_start":40,"column_end":48},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1350},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":212169,"byte_end":212176,"line_start":8,"line_end":8,"column_start":19,"column_end":26},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":5994},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":213078,"byte_end":213085,"line_start":39,"line_end":39,"column_start":55,"column_end":62},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":5994},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":213281,"byte_end":213288,"line_start":45,"line_end":45,"column_start":40,"column_end":47},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":5994},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":213992,"byte_end":214007,"line_start":75,"line_end":75,"column_start":42,"column_end":57},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1419},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":214898,"byte_end":214913,"line_start":111,"line_end":111,"column_start":51,"column_end":66},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1419},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":215435,"byte_end":215448,"line_start":136,"line_end":136,"column_start":36,"column_end":49},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1451},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":216176,"byte_end":216187,"line_start":167,"line_end":167,"column_start":15,"column_end":26},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":6009},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":217028,"byte_end":217039,"line_start":196,"line_end":196,"column_start":56,"column_end":67},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":6009},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":217320,"byte_end":217331,"line_start":208,"line_end":208,"column_start":36,"column_end":47},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":6009},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":217945,"byte_end":217964,"line_start":236,"line_end":236,"column_start":38,"column_end":57},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1486},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_fold.rs","byte_start":218927,"byte_end":218946,"line_start":276,"line_end":276,"column_start":47,"column_end":66},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1486},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\reduce.rs","byte_start":219843,"byte_end":219857,"line_start":23,"line_end":23,"column_start":26,"column_end":40},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1531},"to":{"krate":2,"index":3014}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\reduce.rs","byte_start":219899,"byte_end":219913,"line_start":25,"line_end":25,"column_start":27,"column_end":41},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1531},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\reduce.rs","byte_start":220015,"byte_end":220029,"line_start":31,"line_end":31,"column_start":36,"column_end":50},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1531},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\reduce.rs","byte_start":220556,"byte_end":220570,"line_start":57,"line_end":57,"column_start":45,"column_end":59},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1531},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\reduce.rs","byte_start":220819,"byte_end":220833,"line_start":72,"line_end":72,"column_start":35,"column_end":49},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1531},"to":{"krate":0,"index":1329}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\reduce.rs","byte_start":221078,"byte_end":221090,"line_start":86,"line_end":86,"column_start":30,"column_end":42},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1570},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":222205,"byte_end":222209,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":6021},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":222441,"byte_end":222445,"line_start":29,"line_end":29,"column_start":30,"column_end":34},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":6021},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":222780,"byte_end":222784,"line_start":47,"line_end":47,"column_start":37,"column_end":41},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":6021},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\skip.rs","byte_start":223365,"byte_end":223373,"line_start":73,"line_end":73,"column_start":45,"column_end":53},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1611},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce.rs","byte_start":224519,"byte_end":224536,"line_start":29,"line_end":29,"column_start":26,"column_end":43},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1641},"to":{"krate":2,"index":3014}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce.rs","byte_start":224578,"byte_end":224595,"line_start":31,"line_end":31,"column_start":27,"column_end":44},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1641},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce.rs","byte_start":224697,"byte_end":224714,"line_start":37,"line_end":37,"column_start":36,"column_end":53},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1641},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce.rs","byte_start":225328,"byte_end":225345,"line_start":64,"line_end":64,"column_start":45,"column_end":62},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1641},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce.rs","byte_start":225612,"byte_end":225629,"line_start":79,"line_end":79,"column_start":35,"column_end":52},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1641},"to":{"krate":0,"index":1329}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce.rs","byte_start":226109,"byte_end":226124,"line_start":98,"line_end":98,"column_start":30,"column_end":45},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1681},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce_with.rs","byte_start":227468,"byte_end":227489,"line_start":26,"line_end":26,"column_start":22,"column_end":43},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1715},"to":{"krate":2,"index":3014}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce_with.rs","byte_start":227523,"byte_end":227544,"line_start":28,"line_end":28,"column_start":23,"column_end":44},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1715},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce_with.rs","byte_start":227638,"byte_end":227659,"line_start":34,"line_end":34,"column_start":32,"column_end":53},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1715},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce_with.rs","byte_start":228238,"byte_end":228259,"line_start":60,"line_end":60,"column_start":41,"column_end":62},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1715},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce_with.rs","byte_start":228496,"byte_end":228517,"line_start":74,"line_end":74,"column_start":39,"column_end":60},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1715},"to":{"krate":0,"index":1329}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\try_reduce_with.rs","byte_start":229176,"byte_end":229195,"line_start":97,"line_end":97,"column_start":30,"column_end":49},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1748},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234511,"byte_end":234516,"line_start":124,"line_end":124,"column_start":29,"column_end":34},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":6031},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":234696,"byte_end":234701,"line_start":130,"line_end":130,"column_start":33,"column_end":38},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":6031},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\splitter.rs","byte_start":235193,"byte_end":235206,"line_start":154,"line_end":154,"column_start":38,"column_end":51},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1789},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":236167,"byte_end":236171,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":6040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":236403,"byte_end":236407,"line_start":28,"line_end":28,"column_start":30,"column_end":34},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":6040},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":236742,"byte_end":236746,"line_start":46,"line_end":46,"column_start":37,"column_end":41},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":6040},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\take.rs","byte_start":237309,"byte_end":237317,"line_start":72,"line_end":72,"column_start":45,"column_end":53},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1833},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":238255,"byte_end":238258,"line_start":20,"line_end":20,"column_start":48,"column_end":51},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":6050},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":238415,"byte_end":238418,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":6050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":238620,"byte_end":238623,"line_start":36,"line_end":36,"column_start":36,"column_end":39},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":6050},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":239097,"byte_end":239100,"line_start":57,"line_end":57,"column_start":43,"column_end":46},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":6050},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":239842,"byte_end":239850,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1884},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":240533,"byte_end":240544,"line_start":118,"line_end":118,"column_start":32,"column_end":43},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1897},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":241720,"byte_end":241731,"line_start":172,"line_end":172,"column_start":16,"column_end":27},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1916},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":241872,"byte_end":241883,"line_start":178,"line_end":178,"column_start":38,"column_end":49},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1916},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":242622,"byte_end":242633,"line_start":209,"line_end":209,"column_start":47,"column_end":58},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1916},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map.rs","byte_start":243028,"byte_end":243037,"line_start":229,"line_end":229,"column_start":36,"column_end":45},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1947},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":244274,"byte_end":244281,"line_start":20,"line_end":20,"column_start":58,"column_end":65},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":6059},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":244513,"byte_end":244520,"line_start":29,"line_end":29,"column_start":15,"column_end":22},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":6059},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":244751,"byte_end":244758,"line_start":39,"line_end":39,"column_start":39,"column_end":46},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":6059},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":245274,"byte_end":245281,"line_start":61,"line_end":61,"column_start":46,"column_end":53},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":6059},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":246126,"byte_end":246134,"line_start":96,"line_end":96,"column_start":54,"column_end":62},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2007},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":246921,"byte_end":246936,"line_start":128,"line_end":128,"column_start":35,"column_end":50},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":2023},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":248273,"byte_end":248284,"line_start":188,"line_end":188,"column_start":35,"column_end":46},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":2045},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":248665,"byte_end":248676,"line_start":206,"line_end":206,"column_start":46,"column_end":57},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2045},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":248967,"byte_end":248978,"line_start":218,"line_end":218,"column_start":44,"column_end":55},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2045},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":249296,"byte_end":249311,"line_start":235,"line_end":235,"column_start":19,"column_end":34},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2075},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":249477,"byte_end":249492,"line_start":241,"line_end":241,"column_start":41,"column_end":56},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2075},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":250336,"byte_end":250351,"line_start":274,"line_end":274,"column_start":50,"column_end":65},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2075},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":250815,"byte_end":250828,"line_start":296,"line_end":296,"column_start":39,"column_end":52},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2111},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":252359,"byte_end":252366,"line_start":352,"line_end":352,"column_start":54,"column_end":61},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":6071},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":252539,"byte_end":252546,"line_start":358,"line_end":358,"column_start":18,"column_end":25},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":6071},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":252789,"byte_end":252796,"line_start":368,"line_end":368,"column_start":45,"column_end":52},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":6071},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":253336,"byte_end":253343,"line_start":390,"line_end":390,"column_start":52,"column_end":59},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":6071},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":254218,"byte_end":254226,"line_start":425,"line_end":425,"column_start":60,"column_end":68},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2171},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":255044,"byte_end":255059,"line_start":457,"line_end":457,"column_start":41,"column_end":56},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2188},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":256517,"byte_end":256532,"line_start":520,"line_end":520,"column_start":22,"column_end":37},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":2211},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":256714,"byte_end":256729,"line_start":526,"line_end":526,"column_start":47,"column_end":62},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":2211},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\map_with.rs","byte_start":257585,"byte_end":257600,"line_start":559,"line_end":559,"column_start":56,"column_end":71},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":2211},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":258515,"byte_end":258518,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":6083},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":258740,"byte_end":258743,"line_start":30,"line_end":30,"column_start":33,"column_end":36},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":6083},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":259127,"byte_end":259130,"line_start":49,"line_end":49,"column_start":40,"column_end":43},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":6083},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":259790,"byte_end":259799,"line_start":79,"line_end":79,"column_start":54,"column_end":63},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2284},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":260420,"byte_end":260429,"line_start":102,"line_end":102,"column_start":54,"column_end":63},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2296},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip.rs","byte_start":261086,"byte_end":261097,"line_start":129,"line_end":129,"column_start":45,"column_end":56},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2308},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":262506,"byte_end":262511,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":6096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":262780,"byte_end":262785,"line_start":31,"line_end":31,"column_start":33,"column_end":38},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":6096},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\zip_eq.rs","byte_start":263177,"byte_end":263182,"line_start":50,"line_end":50,"column_start":40,"column_end":45},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":6096},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":264299,"byte_end":264309,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":6108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":264560,"byte_end":264570,"line_start":34,"line_end":34,"column_start":33,"column_end":43},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":6108},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":264947,"byte_end":264957,"line_start":53,"line_end":53,"column_start":40,"column_end":50},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":6108},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":265853,"byte_end":265862,"line_start":90,"line_end":90,"column_start":51,"column_end":60},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":2378},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":266672,"byte_end":266681,"line_start":119,"line_end":119,"column_start":51,"column_end":60},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":2392},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":267462,"byte_end":267480,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":2406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":267800,"byte_end":267818,"line_start":171,"line_end":171,"column_start":25,"column_end":43},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2406},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":270683,"byte_end":270696,"line_start":267,"line_end":267,"column_start":25,"column_end":38},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":2428},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":271829,"byte_end":271842,"line_start":306,"line_end":306,"column_start":36,"column_end":49},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2428},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave.rs","byte_start":272403,"byte_end":272416,"line_start":327,"line_end":327,"column_start":34,"column_end":47},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2428},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":273343,"byte_end":273361,"line_start":23,"line_end":23,"column_start":12,"column_end":30},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":6121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":274002,"byte_end":274020,"line_start":44,"line_end":44,"column_start":33,"column_end":51},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":6121},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\interleave_shortest.rs","byte_start":274397,"byte_end":274415,"line_start":63,"line_end":63,"column_start":40,"column_end":58},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":6121},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":275517,"byte_end":275528,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":6133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":275758,"byte_end":275769,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":6133},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":276299,"byte_end":276310,"line_start":57,"line_end":57,"column_start":37,"column_end":48},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":6133},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":277217,"byte_end":277225,"line_start":96,"line_end":96,"column_start":45,"column_end":53},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":2505},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":277792,"byte_end":277811,"line_start":124,"line_end":124,"column_start":9,"column_end":28},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":2517},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":278052,"byte_end":278071,"line_start":138,"line_end":138,"column_start":22,"column_end":41},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":2517},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":280246,"byte_end":280261,"line_start":217,"line_end":217,"column_start":22,"column_end":37},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":2536},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":281033,"byte_end":281048,"line_start":246,"line_end":246,"column_start":33,"column_end":48},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":2536},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":281696,"byte_end":281711,"line_start":268,"line_end":268,"column_start":31,"column_end":46},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":2536},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":282059,"byte_end":282078,"line_start":285,"line_end":285,"column_start":12,"column_end":31},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":2553},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":282303,"byte_end":282322,"line_start":298,"line_end":298,"column_start":28,"column_end":47},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":2553},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":283400,"byte_end":283419,"line_start":335,"line_end":335,"column_start":37,"column_end":56},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":2553},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\intersperse.rs","byte_start":283959,"byte_end":283976,"line_start":361,"line_end":361,"column_start":26,"column_end":43},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":2577},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285749,"byte_end":285755,"line_start":20,"line_end":20,"column_start":48,"column_end":54},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":6143},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":285915,"byte_end":285921,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":6143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":286132,"byte_end":286138,"line_start":36,"line_end":36,"column_start":33,"column_end":39},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":6143},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":286600,"byte_end":286606,"line_start":56,"line_end":56,"column_start":40,"column_end":46},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":6143},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":287347,"byte_end":287355,"line_start":87,"line_end":87,"column_start":48,"column_end":56},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":2629},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":288036,"byte_end":288050,"line_start":115,"line_end":115,"column_start":29,"column_end":43},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":2641},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":289314,"byte_end":289328,"line_start":171,"line_end":171,"column_start":16,"column_end":30},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":2659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":289475,"byte_end":289489,"line_start":177,"line_end":177,"column_start":35,"column_end":49},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":2659},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":290235,"byte_end":290249,"line_start":207,"line_end":207,"column_start":44,"column_end":58},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":2659},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":290774,"byte_end":290786,"line_start":233,"line_end":233,"column_start":33,"column_end":45},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":2688},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":291732,"byte_end":291741,"line_start":277,"line_end":277,"column_start":25,"column_end":34},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":6152},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":292491,"byte_end":292500,"line_start":310,"line_end":310,"column_start":34,"column_end":43},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":6152},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\update.rs","byte_start":292604,"byte_end":292613,"line_start":317,"line_end":317,"column_start":36,"column_end":45},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":6152},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\noop.rs","byte_start":292918,"byte_end":292930,"line_start":5,"line_end":5,"column_start":25,"column_end":37},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":2733},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\noop.rs","byte_start":293274,"byte_end":293286,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":2733},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\noop.rs","byte_start":293642,"byte_end":293654,"line_start":45,"line_end":45,"column_start":34,"column_end":46},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":2733},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\noop.rs","byte_start":293848,"byte_end":293859,"line_start":57,"line_end":57,"column_start":22,"column_end":33},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":2755},"to":{"krate":0,"index":1329}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":294413,"byte_end":294416,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":6165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":294597,"byte_end":294600,"line_start":26,"line_end":26,"column_start":30,"column_end":33},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":6165},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":294935,"byte_end":294938,"line_start":44,"line_end":44,"column_start":37,"column_end":40},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":6165},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":295508,"byte_end":295516,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":2781},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\rev.rs","byte_start":296031,"byte_end":296042,"line_start":92,"line_end":92,"column_start":22,"column_end":33},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":2791},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":297261,"byte_end":297267,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":6174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":297471,"byte_end":297477,"line_start":27,"line_end":27,"column_start":30,"column_end":36},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":6174},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":297812,"byte_end":297818,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":6174},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":298396,"byte_end":298404,"line_start":71,"line_end":71,"column_start":45,"column_end":53},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":2828},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":299039,"byte_end":299053,"line_start":98,"line_end":98,"column_start":22,"column_end":36},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":2838},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":300345,"byte_end":300351,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":6184},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":300555,"byte_end":300561,"line_start":161,"line_end":161,"column_start":30,"column_end":36},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":6184},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":300896,"byte_end":300902,"line_start":179,"line_end":179,"column_start":37,"column_end":43},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":6184},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":301480,"byte_end":301488,"line_start":205,"line_end":205,"column_start":45,"column_end":53},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":2868},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\len.rs","byte_start":302123,"byte_end":302137,"line_start":232,"line_end":232,"column_start":22,"column_end":36},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":2878},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":303436,"byte_end":303442,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":6194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":303629,"byte_end":303635,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":6194},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":304083,"byte_end":304089,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":6194},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":304734,"byte_end":304742,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":2925},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":305299,"byte_end":305313,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":2935},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":306209,"byte_end":306223,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":2950},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":306335,"byte_end":306349,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":2950},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":306997,"byte_end":307011,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":2950},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\cloned.rs","byte_start":307331,"byte_end":307343,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":2972},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":308387,"byte_end":308393,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":6203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":308580,"byte_end":308586,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":6203},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":309033,"byte_end":309039,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":6203},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":309683,"byte_end":309691,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":3014},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":310247,"byte_end":310261,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":311230,"byte_end":311244,"line_start":143,"line_end":143,"column_start":9,"column_end":23},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":3039},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":311356,"byte_end":311370,"line_start":149,"line_end":149,"column_start":36,"column_end":50},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":3039},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":312017,"byte_end":312031,"line_start":178,"line_end":178,"column_start":45,"column_end":59},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":3039},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\copied.rs","byte_start":312350,"byte_end":312362,"line_start":196,"line_end":196,"column_start":34,"column_end":46},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":3061},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\product.rs","byte_start":313467,"byte_end":313482,"line_start":23,"line_end":23,"column_start":31,"column_end":46},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":3097},"to":{"krate":2,"index":3004}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\product.rs","byte_start":313504,"byte_end":313519,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":3097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\product.rs","byte_start":313668,"byte_end":313683,"line_start":33,"line_end":33,"column_start":28,"column_end":43},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":3097},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\product.rs","byte_start":314233,"byte_end":314248,"line_start":60,"line_end":60,"column_start":37,"column_end":52},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":3097},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\product.rs","byte_start":314480,"byte_end":314495,"line_start":73,"line_end":73,"column_start":24,"column_end":39},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":3097},"to":{"krate":0,"index":1329}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\product.rs","byte_start":314680,"byte_end":314693,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\sum.rs","byte_start":315681,"byte_end":315692,"line_start":23,"line_end":23,"column_start":31,"column_end":42},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":3154},"to":{"krate":2,"index":3004}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\sum.rs","byte_start":315714,"byte_end":315725,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":3154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\sum.rs","byte_start":315866,"byte_end":315877,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":3154},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\sum.rs","byte_start":316344,"byte_end":316355,"line_start":56,"line_end":56,"column_start":37,"column_end":48},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":3154},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\sum.rs","byte_start":316571,"byte_end":316582,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":3154},"to":{"krate":0,"index":1329}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\sum.rs","byte_start":316755,"byte_end":316764,"line_start":82,"line_end":82,"column_start":26,"column_end":35},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":3179},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":317860,"byte_end":317867,"line_start":21,"line_end":21,"column_start":48,"column_end":55},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":6212},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":318028,"byte_end":318035,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":6212},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":318250,"byte_end":318257,"line_start":37,"line_end":37,"column_start":33,"column_end":40},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":6212},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":318717,"byte_end":318724,"line_start":57,"line_end":57,"column_start":40,"column_end":47},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":6212},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":319466,"byte_end":319474,"line_start":88,"line_end":88,"column_start":48,"column_end":56},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":3227},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":320149,"byte_end":320164,"line_start":116,"line_end":116,"column_start":29,"column_end":44},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":321378,"byte_end":321393,"line_start":170,"line_end":170,"column_start":16,"column_end":31},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":3257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":321543,"byte_end":321558,"line_start":176,"line_end":176,"column_start":35,"column_end":50},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":3257},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":322301,"byte_end":322316,"line_start":206,"line_end":206,"column_start":44,"column_end":59},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":3257},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\inspect.rs","byte_start":322699,"byte_end":322712,"line_start":225,"line_end":225,"column_start":33,"column_end":46},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":3286},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":324100,"byte_end":324104,"line_start":23,"line_end":23,"column_start":19,"column_end":23},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":6230},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":324262,"byte_end":324266,"line_start":32,"line_end":32,"column_start":10,"column_end":14},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":6230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":324376,"byte_end":324385,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":6221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":324579,"byte_end":324588,"line_start":49,"line_end":49,"column_start":30,"column_end":39},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":6221},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":325098,"byte_end":325107,"line_start":72,"line_end":72,"column_start":37,"column_end":46},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":6221},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":325807,"byte_end":325815,"line_start":102,"line_end":102,"column_start":45,"column_end":53},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":3341},"to":{"krate":0,"index":1299}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":326524,"byte_end":326541,"line_start":131,"line_end":131,"column_start":26,"column_end":43},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":3350},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":327639,"byte_end":327652,"line_start":183,"line_end":183,"column_start":26,"column_end":39},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":3366},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":327999,"byte_end":328012,"line_start":202,"line_end":202,"column_start":37,"column_end":50},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":3366},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":328263,"byte_end":328276,"line_start":215,"line_end":215,"column_start":35,"column_end":48},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":3366},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":328587,"byte_end":328604,"line_start":232,"line_end":232,"column_start":32,"column_end":49},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":3385},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":329562,"byte_end":329579,"line_start":270,"line_end":270,"column_start":41,"column_end":58},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":3385},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":330058,"byte_end":330073,"line_start":294,"line_end":294,"column_start":30,"column_end":45},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":3406},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\panic_fuse.rs","byte_start":330918,"byte_end":330934,"line_start":335,"line_end":335,"column_start":31,"column_end":47},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":3426},"to":{"krate":0,"index":1329}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331652,"byte_end":331661,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":6237},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":331850,"byte_end":331859,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":6237},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":332489,"byte_end":332506,"line_start":56,"line_end":56,"column_start":40,"column_end":57},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":333306,"byte_end":333323,"line_start":89,"line_end":89,"column_start":49,"column_end":66},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\while_some.rs","byte_start":333726,"byte_end":333741,"line_start":111,"line_end":111,"column_start":38,"column_end":53},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":3479},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":336561,"byte_end":336571,"line_start":64,"line_end":64,"column_start":31,"column_end":41},"kind":{"Impl":{"id":335}},"from":{"krate":5,"index":671},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":336868,"byte_end":336878,"line_start":77,"line_end":77,"column_start":39,"column_end":49},"kind":{"Impl":{"id":336}},"from":{"krate":5,"index":671},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":337190,"byte_end":337198,"line_start":90,"line_end":90,"column_start":39,"column_end":47},"kind":{"Impl":{"id":337}},"from":{"krate":5,"index":1258},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":337533,"byte_end":337541,"line_start":104,"line_end":104,"column_start":59,"column_end":67},"kind":{"Impl":{"id":338}},"from":{"krate":5,"index":1258},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":337877,"byte_end":337885,"line_start":118,"line_end":118,"column_start":31,"column_end":39},"kind":{"Impl":{"id":339}},"from":{"krate":5,"index":7427},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":338179,"byte_end":338187,"line_start":131,"line_end":131,"column_start":39,"column_end":47},"kind":{"Impl":{"id":340}},"from":{"krate":5,"index":7427},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":338657,"byte_end":338664,"line_start":152,"line_end":152,"column_start":42,"column_end":49},"kind":{"Impl":{"id":341}},"from":{"krate":1,"index":1090},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":339119,"byte_end":339126,"line_start":168,"line_end":168,"column_start":62,"column_end":69},"kind":{"Impl":{"id":342}},"from":{"krate":1,"index":1090},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":339653,"byte_end":339660,"line_start":191,"line_end":191,"column_start":34,"column_end":41},"kind":{"Impl":{"id":343}},"from":{"krate":1,"index":1807},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":339992,"byte_end":339999,"line_start":205,"line_end":205,"column_start":42,"column_end":49},"kind":{"Impl":{"id":344}},"from":{"krate":1,"index":1807},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":340451,"byte_end":340461,"line_start":224,"line_end":224,"column_start":31,"column_end":41},"kind":{"Impl":{"id":345}},"from":{"krate":5,"index":3232},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":340901,"byte_end":340911,"line_start":241,"line_end":241,"column_start":39,"column_end":49},"kind":{"Impl":{"id":346}},"from":{"krate":5,"index":3232},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":341315,"byte_end":341321,"line_start":259,"line_end":259,"column_start":31,"column_end":37},"kind":{"Impl":{"id":347}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":341976,"byte_end":341982,"line_start":278,"line_end":278,"column_start":39,"column_end":45},"kind":{"Impl":{"id":348}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":342504,"byte_end":342510,"line_start":298,"line_end":298,"column_start":38,"column_end":44},"kind":{"Impl":{"id":349}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":342771,"byte_end":342777,"line_start":308,"line_end":308,"column_start":33,"column_end":39},"kind":{"Impl":{"id":350}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":343053,"byte_end":343059,"line_start":318,"line_end":318,"column_start":43,"column_end":49},"kind":{"Impl":{"id":351}},"from":{"krate":5,"index":7590},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":343430,"byte_end":343438,"line_start":332,"line_end":332,"column_start":31,"column_end":39},"kind":{"Impl":{"id":352}},"from":{"krate":5,"index":4039},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":343724,"byte_end":343732,"line_start":345,"line_end":345,"column_start":39,"column_end":47},"kind":{"Impl":{"id":353}},"from":{"krate":5,"index":4039},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\extend.rs","byte_start":344144,"byte_end":344147,"line_start":361,"line_end":361,"column_start":39,"column_end":42},"kind":{"Impl":{"id":354}},"from":{"krate":5,"index":7050},"to":{"krate":0,"index":4339}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":345458,"byte_end":345464,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":6246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":346313,"byte_end":346319,"line_start":57,"line_end":57,"column_start":30,"column_end":36},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":6246},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":346769,"byte_end":346783,"line_start":79,"line_end":79,"column_start":45,"column_end":59},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":3704},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":347834,"byte_end":347841,"line_start":126,"line_end":126,"column_start":30,"column_end":37},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":6255},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":348159,"byte_end":348166,"line_start":144,"line_end":144,"column_start":37,"column_end":44},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":6255},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":348778,"byte_end":348793,"line_start":176,"line_end":176,"column_start":36,"column_end":51},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":3728},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":349590,"byte_end":349594,"line_start":210,"line_end":210,"column_start":29,"column_end":33},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":3738},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":349972,"byte_end":349976,"line_start":229,"line_end":229,"column_start":40,"column_end":44},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":3738},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\repeat.rs","byte_start":350105,"byte_end":350109,"line_start":236,"line_end":236,"column_start":38,"column_end":42},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":3738},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":350448,"byte_end":350452,"line_start":7,"line_end":7,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":3756}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":350455,"byte_end":350459,"line_start":7,"line_end":7,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":3756}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":353131,"byte_end":353136,"line_start":94,"line_end":94,"column_start":44,"column_end":49},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":3786},"to":{"krate":0,"index":3756}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":354017,"byte_end":354026,"line_start":130,"line_end":130,"column_start":27,"column_end":36},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":3802},"to":{"krate":0,"index":3756}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":355063,"byte_end":355075,"line_start":172,"line_end":172,"column_start":33,"column_end":45},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":3820},"to":{"krate":0,"index":3756}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":355710,"byte_end":355716,"line_start":200,"line_end":200,"column_start":45,"column_end":51},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":3833},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":357117,"byte_end":357123,"line_start":252,"line_end":252,"column_start":42,"column_end":48},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":3850},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":358064,"byte_end":358077,"line_start":292,"line_end":292,"column_start":41,"column_end":54},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":3868},"to":{"krate":0,"index":1313}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":359340,"byte_end":359353,"line_start":338,"line_end":338,"column_start":50,"column_end":63},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":3868},"to":{"krate":0,"index":1332}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":360021,"byte_end":360032,"line_start":367,"line_end":367,"column_start":39,"column_end":50},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":3896},"to":{"krate":0,"index":1321}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":360773,"byte_end":360785,"line_start":400,"line_end":400,"column_start":40,"column_end":52},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":3914},"to":{"krate":0,"index":1329}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\unzip.rs","byte_start":361869,"byte_end":361877,"line_start":446,"line_end":446,"column_start":38,"column_end":46},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":3939},"to":{"krate":0,"index":3756}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":363003,"byte_end":363008,"line_start":36,"line_end":36,"column_start":25,"column_end":30},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":3977},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":363098,"byte_end":363103,"line_start":42,"line_end":42,"column_start":30,"column_end":35},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":3977},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":363239,"byte_end":363244,"line_start":48,"line_end":48,"column_start":36,"column_end":41},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":3977},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":363530,"byte_end":363535,"line_start":63,"line_end":63,"column_start":43,"column_end":48},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":3977},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\empty.rs","byte_start":364015,"byte_end":364028,"line_start":86,"line_end":86,"column_start":28,"column_end":41},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":3999},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":365327,"byte_end":365331,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":6265},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\once.rs","byte_start":365617,"byte_end":365621,"line_start":49,"line_end":49,"column_start":43,"column_end":47},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":6265},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":31856,"byte_end":31857,"line_start":266,"line_end":266,"column_start":67,"column_end":68},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":4054},"to":{"krate":0,"index":4047}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":33365,"byte_end":33366,"line_start":313,"line_end":313,"column_start":70,"column_end":71},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":4065},"to":{"krate":0,"index":4058}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34255,"byte_end":34260,"line_start":339,"line_end":339,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":34263,"byte_end":34267,"line_start":339,"line_end":339,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92190,"byte_end":92191,"line_start":2077,"line_end":2077,"column_start":52,"column_end":53},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":4269},"to":{"krate":0,"index":4043}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":92558,"byte_end":92574,"line_start":2091,"line_end":2091,"column_start":36,"column_end":52},"kind":"SuperTrait","from":{"krate":0,"index":4069},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116412,"byte_end":116418,"line_start":2841,"line_end":2841,"column_start":21,"column_end":27},"kind":{"Impl":{"id":384}},"from":{"krate":2,"index":43359},"to":{"krate":0,"index":4344}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\iter\\mod.rs","byte_start":116743,"byte_end":116749,"line_start":2858,"line_end":2858,"column_start":24,"column_end":30},"kind":{"Impl":{"id":385}},"from":{"krate":2,"index":43485},"to":{"krate":0,"index":4344}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":367000,"byte_end":367006,"line_start":27,"line_end":27,"column_start":40,"column_end":46},"kind":{"Impl":{"id":386}},"from":{"krate":2,"index":43359},"to":{"krate":0,"index":4043}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":367179,"byte_end":367187,"line_start":36,"line_end":36,"column_start":36,"column_end":44},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":6277},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":367482,"byte_end":367490,"line_start":51,"line_end":51,"column_start":43,"column_end":51},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":6277},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":368652,"byte_end":368656,"line_start":92,"line_end":92,"column_start":29,"column_end":33},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":6286},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":370137,"byte_end":370151,"line_start":151,"line_end":151,"column_start":28,"column_end":42},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":4412},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\option.rs","byte_start":370763,"byte_end":370769,"line_start":174,"line_end":174,"column_start":48,"column_end":54},"kind":{"Impl":{"id":395}},"from":{"krate":2,"index":43359},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373501,"byte_end":373506,"line_start":50,"line_end":50,"column_start":34,"column_end":39},"kind":{"Impl":{"id":396}},"from":{"krate":2,"index":41918},"to":{"krate":0,"index":4043}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range.rs","byte_start":373783,"byte_end":373795,"line_start":66,"line_end":66,"column_start":26,"column_end":38},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":4478},"to":{"krate":2,"index":7427}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":382245,"byte_end":382249,"line_start":49,"line_end":49,"column_start":9,"column_end":13},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":6529},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\range_inclusive.rs","byte_start":382823,"byte_end":382837,"line_start":63,"line_end":63,"column_start":34,"column_end":48},"kind":{"Impl":{"id":399}},"from":{"krate":2,"index":41987},"to":{"krate":0,"index":4043}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":387254,"byte_end":387260,"line_start":20,"line_end":20,"column_start":43,"column_end":49},"kind":{"Impl":{"id":400}},"from":{"krate":2,"index":43485},"to":{"krate":0,"index":4043}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":387699,"byte_end":387703,"line_start":42,"line_end":42,"column_start":29,"column_end":33},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":6644},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\result.rs","byte_start":388961,"byte_end":388967,"line_start":93,"line_end":93,"column_start":54,"column_end":60},"kind":{"Impl":{"id":408}},"from":{"krate":2,"index":43485},"to":{"krate":0,"index":4335}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mergesort.rs","byte_start":418765,"byte_end":418775,"line_start":33,"line_end":33,"column_start":18,"column_end":28},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":4577},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mergesort.rs","byte_start":421725,"byte_end":421731,"line_start":103,"line_end":103,"column_start":22,"column_end":28},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":4588},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mergesort.rs","byte_start":421980,"byte_end":421993,"line_start":115,"line_end":115,"column_start":22,"column_end":35},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":4594},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mergesort.rs","byte_start":425719,"byte_end":425728,"line_start":218,"line_end":218,"column_start":22,"column_end":31},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":4604},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mergesort.rs","byte_start":437170,"byte_end":437175,"line_start":522,"line_end":522,"column_start":22,"column_end":27},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":4626},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\quicksort.rs","byte_start":446362,"byte_end":446373,"line_start":22,"line_end":22,"column_start":18,"column_end":29},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":4660},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\quicksort.rs","byte_start":446603,"byte_end":446609,"line_start":35,"line_end":35,"column_start":18,"column_end":24},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":4667},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\quicksort.rs","byte_start":446816,"byte_end":446826,"line_start":47,"line_end":47,"column_start":18,"column_end":28},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":4673},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":405566,"byte_end":405570,"line_start":450,"line_end":450,"column_start":32,"column_end":36},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":6712},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":405697,"byte_end":405701,"line_start":456,"line_end":456,"column_start":51,"column_end":55},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":6712},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":406027,"byte_end":406031,"line_start":471,"line_end":471,"column_start":58,"column_end":62},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":6712},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":406542,"byte_end":406554,"line_start":495,"line_end":495,"column_start":43,"column_end":55},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":4840},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":407121,"byte_end":407127,"line_start":516,"line_end":516,"column_start":32,"column_end":38},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":6720},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":407256,"byte_end":407262,"line_start":522,"line_end":522,"column_start":51,"column_end":57},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":6720},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":407590,"byte_end":407596,"line_start":537,"line_end":537,"column_start":58,"column_end":64},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":6720},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":408227,"byte_end":408241,"line_start":565,"line_end":565,"column_start":43,"column_end":57},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":4870},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":409098,"byte_end":409105,"line_start":596,"line_end":596,"column_start":32,"column_end":39},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":6729},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":409235,"byte_end":409242,"line_start":602,"line_end":602,"column_start":51,"column_end":58},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":6729},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":409570,"byte_end":409577,"line_start":617,"line_end":617,"column_start":58,"column_end":65},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":6729},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":410259,"byte_end":410274,"line_start":646,"line_end":646,"column_start":43,"column_end":58},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":4901},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":411157,"byte_end":411164,"line_start":677,"line_end":677,"column_start":51,"column_end":58},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":6738},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":411494,"byte_end":411501,"line_start":692,"line_end":692,"column_start":58,"column_end":65},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":6738},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":412022,"byte_end":412037,"line_start":716,"line_end":716,"column_start":43,"column_end":58},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":4928},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":412684,"byte_end":412693,"line_start":740,"line_end":740,"column_start":51,"column_end":60},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":6746},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":413025,"byte_end":413034,"line_start":755,"line_end":755,"column_start":58,"column_end":67},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":6746},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":413675,"byte_end":413692,"line_start":783,"line_end":783,"column_start":43,"column_end":60},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":4954},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":414536,"byte_end":414541,"line_start":813,"line_end":813,"column_start":36,"column_end":41},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":4966},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":414724,"byte_end":414729,"line_start":822,"line_end":822,"column_start":36,"column_end":41},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":4966},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":414925,"byte_end":414930,"line_start":828,"line_end":828,"column_start":40,"column_end":45},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":4966},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":416424,"byte_end":416432,"line_start":889,"line_end":889,"column_start":36,"column_end":44},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":5000},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\slice\\mod.rs","byte_start":416657,"byte_end":416665,"line_start":897,"line_end":897,"column_start":40,"column_end":48},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":5000},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487268,"byte_end":487273,"line_start":283,"line_end":283,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":5058}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487276,"byte_end":487280,"line_start":283,"line_end":283,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":5058}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":487283,"byte_end":487287,"line_start":283,"line_end":283,"column_start":39,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":3004},"to":{"krate":0,"index":5058}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":489127,"byte_end":489129,"line_start":350,"line_end":350,"column_start":54,"column_end":56},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":5092},"to":{"krate":0,"index":5058}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":490372,"byte_end":490377,"line_start":403,"line_end":403,"column_start":32,"column_end":37},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":6758},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":490637,"byte_end":490650,"line_start":414,"line_end":414,"column_start":33,"column_end":46},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":5105},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":491449,"byte_end":491460,"line_start":448,"line_end":448,"column_start":32,"column_end":43},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":6767},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":491811,"byte_end":491830,"line_start":463,"line_end":463,"column_start":33,"column_end":52},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":5119},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":492802,"byte_end":492807,"line_start":503,"line_end":503,"column_start":32,"column_end":37},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":6776},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":493065,"byte_end":493078,"line_start":514,"line_end":514,"column_start":33,"column_end":46},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":5134},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":493835,"byte_end":493846,"line_start":547,"line_end":547,"column_start":32,"column_end":43},"kind":{"Impl":{"id":449}},"from":{"krate":0,"index":6785},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":494111,"byte_end":494130,"line_start":558,"line_end":558,"column_start":33,"column_end":52},"kind":{"Impl":{"id":450}},"from":{"krate":0,"index":5148},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":494871,"byte_end":494876,"line_start":588,"line_end":588,"column_start":23,"column_end":28},"kind":{"Impl":{"id":451}},"from":{"krate":0,"index":6794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":495026,"byte_end":495031,"line_start":594,"line_end":594,"column_start":44,"column_end":49},"kind":{"Impl":{"id":452}},"from":{"krate":0,"index":6794},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":496691,"byte_end":496706,"line_start":654,"line_end":654,"column_start":23,"column_end":38},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":6807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":496860,"byte_end":496883,"line_start":660,"line_end":660,"column_start":36,"column_end":59},"kind":{"Impl":{"id":454}},"from":{"krate":0,"index":5182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":497191,"byte_end":497206,"line_start":669,"line_end":669,"column_start":44,"column_end":59},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":6807},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":497554,"byte_end":497577,"line_start":681,"line_end":681,"column_start":58,"column_end":81},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":5182},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":498541,"byte_end":498546,"line_start":721,"line_end":721,"column_start":32,"column_end":37},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":6820},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":499140,"byte_end":499155,"line_start":746,"line_end":746,"column_start":32,"column_end":47},"kind":{"Impl":{"id":458}},"from":{"krate":0,"index":6830},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":499827,"byte_end":499834,"line_start":774,"line_end":774,"column_start":44,"column_end":51},"kind":{"Impl":{"id":459}},"from":{"krate":0,"index":6840},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":500211,"byte_end":500226,"line_start":789,"line_end":789,"column_start":51,"column_end":66},"kind":{"Impl":{"id":460}},"from":{"krate":0,"index":5224},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":501270,"byte_end":501282,"line_start":831,"line_end":831,"column_start":44,"column_end":56},"kind":{"Impl":{"id":461}},"from":{"krate":0,"index":6853},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\str.rs","byte_start":501695,"byte_end":501715,"line_start":847,"line_end":847,"column_start":51,"column_end":71},"kind":{"Impl":{"id":462}},"from":{"krate":0,"index":5244},"to":{"krate":0,"index":1336}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":502886,"byte_end":502889,"line_start":18,"line_end":18,"column_start":40,"column_end":43},"kind":{"Impl":{"id":463}},"from":{"krate":5,"index":7050},"to":{"krate":0,"index":4043}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":503062,"byte_end":503070,"line_start":27,"line_end":27,"column_start":36,"column_end":44},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":6866},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":503367,"byte_end":503375,"line_start":42,"line_end":42,"column_start":43,"column_end":51},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":6866},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":504498,"byte_end":504509,"line_start":80,"line_end":80,"column_start":43,"column_end":54},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":5289},"to":{"krate":0,"index":1304}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":505173,"byte_end":505184,"line_start":100,"line_end":100,"column_start":39,"column_end":50},"kind":{"Impl":{"id":467}},"from":{"krate":0,"index":5289},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":505553,"byte_end":505563,"line_start":115,"line_end":115,"column_start":36,"column_end":46},"kind":{"Impl":{"id":468}},"from":{"krate":0,"index":5304},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":505885,"byte_end":505895,"line_start":129,"line_end":129,"column_start":47,"column_end":57},"kind":{"Impl":{"id":469}},"from":{"krate":0,"index":5304},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":506100,"byte_end":506110,"line_start":136,"line_end":136,"column_start":45,"column_end":55},"kind":{"Impl":{"id":470}},"from":{"krate":0,"index":5304},"to":{"krate":2,"index":7496}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\vec.rs","byte_start":506216,"byte_end":506226,"line_start":142,"line_end":142,"column_start":32,"column_end":42},"kind":{"Impl":{"id":471}},"from":{"krate":0,"index":5304},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\par_either.rs","byte_start":507274,"byte_end":507280,"line_start":6,"line_end":6,"column_start":33,"column_end":39},"kind":{"Impl":{"id":472}},"from":{"krate":21,"index":177},"to":{"krate":0,"index":4069}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\par_either.rs","byte_start":507800,"byte_end":507806,"line_start":28,"line_end":28,"column_start":40,"column_end":46},"kind":{"Impl":{"id":473}},"from":{"krate":21,"index":177},"to":{"krate":0,"index":4273}},{"span":{"file_name":"C:\\Users\\matth\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.2.1\\src\\par_either.rs","byte_start":508600,"byte_end":508606,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"kind":{"Impl":{"id":474}},"from":{"krate":21,"index":177},"to":{"krate":0,"index":4339}}]}